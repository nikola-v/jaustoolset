/*
 * Created on Feb 17, 2004
 */
package com.u2d.field;

import java.util.List;
import com.u2d.app.*;
import com.u2d.element.Field;
import com.u2d.model.ComplexEObject;
import com.u2d.model.ComplexType;
import com.u2d.model.Title;
import com.u2d.model.AbstractListEO;
import com.u2d.pubsub.*;
import static com.u2d.pubsub.AppEventType.*;

/**
 * @author Eitan Suez
 */
public class BasicAssociationStrategy implements AssociationStrategy
{
   protected Field _field;
   protected ComplexEObject _parent;
   
   public BasicAssociationStrategy(Field field, ComplexEObject parent)
   {
      _field = field;
      _parent = parent;
   }
   
   public Title title()
   {
      return _parent.title().append(_field.getLabel());
   }
   public String toString() { return title().toString(); }
   
   // conveniences..
   
   public ComplexEObject get()
   {
      return (ComplexEObject) _field.get(_parent);
   }
   // obviously this class needs a lot of work..
   // what is needed: two types of associations: tomany and toone, with polymorphic get
   public AbstractListEO getAsList()
   {
      return (AbstractListEO) _field.get(_parent);
   }
   
   public void set(final ComplexEObject value)
   {
      //speaks for itself, but in prose:  if transient delay set until after save
      if (value != null && value.isTransientState())
      {
         value.addAppEventListener(CREATE, new AppEventListener()
            {
               public void onEvent(AppEvent evt)
               {
                  _field.set(_parent, value);
               }
            });
      }
      else
      {
         _field.set(_parent, value);
      }
   }
   
   public void associateList(final List value)
   {
      _field.set(_parent, value);
      if (!_parent.isEditableState()) _parent.save();
   }
   
   public void associate(ComplexEObject value)
   {
      set(value);
      if (!_parent.isEditableState()) _parent.save();
   }
   
   public void dissociate()
   {
      ComplexEObject oldValue = get();
      
      set(null);

      if (!_parent.isEditableState())
      {
         Context.getInstance().getPersistenceMechanism().updateAssociation(_parent, oldValue);
      }
   }
   
   public void dissociateItem(ComplexEObject eo)
   {
      AbstractListEO list = (AbstractListEO) _field.get(_parent);
      list.remove(eo);
      if (!_parent.isEditableState())
      {
         _parent.save();
      }
   }
   
   // JTS --- remove by index instead of object
   public void dissociateItem(int index)
   {
       AbstractListEO list = (AbstractListEO) _field.get(_parent);
      list.remove(index);
      if (!_parent.isEditableState())
      {
         _parent.save();
      }
   }
   
   public Field field() { return _field; }
   public ComplexEObject parent() { return _parent; }
   
   public javax.swing.Icon iconSm() { return _field.fieldtype().iconSm(); }
   public boolean isEmpty() { return _field.isEmpty(_parent); }
   public ComplexType type() { return _field.fieldtype(); }
   
   public boolean isEditableState()
   {
      return _parent.isEditableState();
   }
   
   public String getName() { return _field.name(); }
   
   
}
