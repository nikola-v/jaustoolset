<?xml version="1.0" encoding="UTF-8"?> <?oxygen RNGSchema="../jsidl/jaus_service_interface_definition_language.rnc" type="compact"?>
<service_def name="ManipulatorEndEffectorPoseListDriver" id="urn:jaus:jss:manipulator:ManipulatorEndEffectorPoseListDriver"
  version="1.0" xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1" >
  <description xml:space="preserve">
  	The function of the End-Effector Pose List Driver is to perform closed-loop control of a sequence of positions and orientations of the tool tip 
    specified in vehicle coordinate system. The sequence of targets is specified by one or more SetElement messages, as defined by the List Manager 
    Service. The \u201CSet Motion Profile\u201D message is used to set maximum velocity and acceleration rates for each of the variable joint parameters.  
    All motions utilize the motion profile data that was most recently sent.  Default settings are not assumed so that upon initialization this message 
    must be sent before the first \u201CExecuteList\u201D message is sent.
  </description>
  <assumptions>
    Messages may be delayed, lost, or reordered.
  </assumptions>
  <references>
    <inherits_from name="listManager" id="urn:jaus:jss:manipulator:ListManager" version="1.0" />
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet" version="1.0" />
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="ExecuteList" declared_type_ref="manipulator.commandClass.ExecuteList" />
      <declared_message_def name="SetMotionProfile" declared_type_ref="manipulator.commandClass.SetMotionProfile" />
      <declared_message_def name="SetToolOffset" declared_type_ref="manipulator.commandClass.SetToolOffset" />
      <declared_message_def name="QueryToolOffset" declared_type_ref="manipulator.queryClass.QueryToolOffset" />
      <declared_message_def name="QueryActiveElement" declared_type_ref="manipulator.queryClass.QueryActiveElement" />
      <declared_message_def name="QueryManipulatorSpecifications" declared_type_ref="manipulator.queryClass.QueryManipulatorSpecifications" />
      <declared_message_def name="QueryMotionProfile" declared_type_ref="manipulator.queryClass.QueryMotionProfile" />
      <declared_message_def name="QueryCommandedEndEffectorPose" declared_type_ref="manipulator.queryClass.QueryCommandedEndEffectorPose" />
    </input_set>
    <output_set>
      <declared_message_def name="ReportActiveElement" declared_type_ref="manipulator.informClass.ReportActiveElement" />
      <declared_message_def name="ReportManipulatorSpecifications" declared_type_ref="manipulator.informClass.ReportManipulatorSpecifications" />
      <declared_message_def name="ReportMotionProfile" declared_type_ref="manipulator.informClass.ReportMotionProfile" />
      <declared_message_def name="ReportCommandedEndEffectorPose" declared_type_ref="manipulator.informClass.ReportCommandedEndEffectorPose" />
      <declared_message_def name="ReportToolOffset" declared_type_ref="manipulator.informClass.ReportToolOffset" />
    </output_set>
  </message_set>
  <internal_events_set />
  <protocol_behavior is_stateless="false">
    <start state_machine_name="listManager.management.accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled.StateA" />
    <state_machine name="listManager.management.accessControl.events.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">
          <state name="NotControlled" initial_state="StateA" interpretation="redefine state in order to extend">
            <state name="StateA" initial_state="Init">
              <default_state>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryActiveElement" value="msg" interpretation="enveloped query Active element message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Active Element message">
                    <argument value=" 'ReportActiveElement' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedEndEffectorPose" value="msg" interpretation="enveloped query commanded end effector pose message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Commanded End Effector Pose message">
                    <argument value=" 'ReportCommandedEndEffectorPose' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryToolOffset" value="msg" interpretation="enveloped query tool offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Tool Offset message">
                    <argument value=" 'ReportToolOffset' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
            </state>
          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <state name="StateB" initial_state="Standby">
              <state name="Ready">
                <exit>
                  <action name="stopMotion" interpretation="Stop motion of the manipulator." />
                </exit>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="ExecuteList" value="msg" interpretation="enveloped execute list message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData) &amp;&amp; listManager.elementExists(msg) &amp;&amp; motionProfileExists()"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND
                      True if the Element UID specified in the message that triggered the transition exists in the list AND
                      True if a motion profile has already been received." />
                  <simple />
                  <action name="executeTargetList"
                    interpretation="Begin sequential execution of the target list starting at the specified element.">
                    <argument value="msg" />
                  </action>
                </transition>
              </state>
              <default_state>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryActiveElement" value="msg" interpretation="enveloped query Active element message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Active Element message">
                    <argument value=" 'ReportActiveElement' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedEndEffectorPose" value="msg" interpretation="enveloped query commanded end effector pose message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Commanded End Effector Pose message">
                    <argument value=" 'ReportCommandedEndEffectorPose' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="QueryToolOffset" value="msg" interpretation="enveloped query tool offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Report Tool Offset message">
                    <argument value=" 'ReportToolOffset' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="SetMotionProfile" value="msg" interpretation="enveloped set motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData)" interpretation="True if the message that triggered the transition is received from the client that is in control of this service." />
                  <simple />
                  <action name="setMotionProfile" interpretation="Set the motion profile parameters for the manipulator.">
                    <argument value="msg" />
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="SetElement" value="msg" interpretation="enveloped set element message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData) &amp;&amp; listManager.isValidElementRequest(msg) &amp;&amp; isElementSupported(msg)"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND
                     True if the resulting list will not be invalid as defined by the List Manager Service description and the receiving entity has sufficient memory to store the element(s) AND 
                     True if the message that triggered the transition contains payload(s) of valid serialized Set End Effector Pose message(s)." />
                  <simple />
                  <action name="setElement" interpretation="Store the given targets(s) in the target list with sequence specified by the previous and next element UIDs.  If this action represents an insert or append into an existing list, the service should modify the NextUID of the previous element and/or the PreviousUID of the next element to reflect the updated sequence">
                    <argument value="msg" />
                  </action>
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Confirm Element Request message">
                    <argument value=" 'ConfirmElementRequest' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="SetElement" value="msg" interpretation="enveloped set element message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData) &amp;&amp; ! listManager.isValidElementRequest(msg)"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND 
                    the resulting list would be invalid as defined by the List Manager Service description or the receiving entity does not have sufficient memory to store the element(s)" />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Reject Element Request message">
                    <argument value=" 'RejectElementRequest' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="SetElement" value="msg" interpretation="enveloped set element message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData) &amp;&amp; ! listManager.isElementSupported(msg)"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND 
                    the message contains payload(s) that are not valid serialized Set End Effector Pose message(s)." />
                  <simple />
                  <action name="listManager.management.accessControl.events.transport.Send" interpretation="Send a Reject Element Request message">
                    <argument value=" 'RejectElementRequest' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="listManager.management.accessControl.events.transport.Receive">
                  <parameter type="SetToolOffset" value="msg" interpretation="enveloped set Tool Offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="listManager.management.accessControl.isControllingClient(transportData)"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service." />
                  <simple />
                  <action name="setToolOffset" interpretation="Set the location of the tool tip as measured in the end effector coordinate system">
                    <argument value="msg" />
                  </action>
                </transition>
              </default_state>
            </state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
