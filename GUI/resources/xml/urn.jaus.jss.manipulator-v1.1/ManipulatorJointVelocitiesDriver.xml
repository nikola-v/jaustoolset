<?xml version="1.1" encoding="UTF-8"?> <?oxygen RNGSchema="../../schema/JSIDL/jsidl.rnc" type="compact"?>
<service_def name="ManipulatorJointVelocitiesDriver" id="urn:jaus:jss:manipulator:ManipulatorJointVelocitiesDriver"
  version="1.1" xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1" >
  <description xml:space="preserve">
  	The function of the Joint Velocities Driver is to perform closed-loop joint velocity control.  The input is the desired instantaneous 
    desired joint velocities.  The \u201CSet Motion Profile\u201D message is used to set maximum velocity and acceleration rates for each of the 
    variable joint parameters.  All motions utilize the motion profile data that was most recently sent.  Default settings are not assumed 
    so that upon initialization this message must be sent before the first \u201CSet End Effector Pose\u201D message is sent.  It is assumed that the 
    manipulator begins motion immediately after receiving the \u201CSet Joint Velocities\u201D message.
  </description>
  <assumptions>
    Messages may be delayed, lost, or reordered.
  </assumptions>
  <references>
    <inherits_from name="management" id="urn:jaus:jss:core:Management" version="1.1" />
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet" version="1.1" />
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="SetJointVelocities" declared_type_ref="manipulator.commandClass.SetJointVelocities" />
      <declared_message_def name="QueryCommandedJointVelocities" declared_type_ref="manipulator.queryClass.QueryCommandedJointVelocities" />
    </input_set>
    <output_set>
      <declared_message_def name="ReportCommandedJointVelocities" declared_type_ref="manipulator.informClass.ReportCommandedJointVelocities" />
    </output_set>
  </message_set>
  <internal_events_set />
  <protocol_behavior is_stateless="false">
    <start state_machine_name="management.accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled" />
    <state_machine name="management.accessControl.events.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">
          <state name="NotControlled" interpretation="redefine state in order to extend">
            
              <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedJointVelocities" value="msg" interpretation="enveloped query commanded joint velocities message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded joint velocities message">
                    <argument value=" 'ReportCommandedJointVelocities' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
  
          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <state name="Available" initial_state="Standby">
              <state name="Ready">
                <exit>
                  <action name="stopMotion" interpretation="Stop motion of the manipulator." />
                </exit>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetJointVelocities" value="msg" interpretation="enveloped set joint velocities message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData) &amp;&amp; motionProfileExists()"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND
                      True if a motion profile has already been received" />
                  <simple />
                  <action name="setJointVelocities" interpretation="Set the desired velocities for the individual joints of the manipulator">
                    <argument value="msg" />
                  </action>
                </transition>
              </state>
            </state>
            <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedJointVelocities" value="msg" interpretation="enveloped query commanded joint velocities message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded joint velocities message">
                    <argument value=" 'ReportCommandedJointVelocities' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
