<?xml version="1.1" encoding="UTF-8"?> <?oxygen RNGSchema="../../schema/JSIDL/jsidl.rnc" type="compact"?>
<service_def name="ManipulatorJointPositionDriver" id="urn:jaus:jss:manipulator:ManipulatorJointPositionDriver"
  version="1.1" xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1" >
  <description xml:space="preserve">
  	The function of the Joint Positions Driver is to perform closed-loop joint position control.  A single target is provided via the 
    Set Joint Positions message.  The target remains unchanged until a new Set Joint Positions message is received.  The \u201CSet Motion Profile\u201D 
    message is used to set maximum velocity and acceleration rates for each of the variable joint parameters.  All motions utilize the 
    motion profile data that was most recently sent.  Default settings are not assumed so that upon initialization this message must be 
    sent before the first \u201CSet Joint Positions\u201D message is sent.
  </description>
  <assumptions>
    Messages may be delayed, lost, or reordered.
  </assumptions>
  <references>
    <inherits_from name="management" id="urn:jaus:jss:core:Management" version="1.1" />
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet" version="1.1" />
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="QueryManipulatorSpecifications" declared_type_ref="manipulator.queryClass.QueryManipulatorSpecifications" />
      <declared_message_def name="QueryCommandedJointPositions" declared_type_ref="manipulator.queryClass.QueryCommandedJointPositions" />
      <declared_message_def name="QueryMotionProfile" declared_type_ref="manipulator.queryClass.QueryMotionProfile" />
      <declared_message_def name="SetJointPositions" declared_type_ref="manipulator.commandClass.SetJointPositions" />
      <declared_message_def name="SetMotionProfile" declared_type_ref="manipulator.commandClass.SetMotionProfile" />
    </input_set>
    <output_set>
      <declared_message_def name="ReportManipulatorSpecifications" declared_type_ref="manipulator.informClass.ReportManipulatorSpecifications" />
      <declared_message_def name="ReportCommandedJointPositions" declared_type_ref="manipulator.informClass.ReportCommandedJointPositions" />
      <declared_message_def name="ReportMotionProfile" declared_type_ref="manipulator.informClass.ReportMotionProfile" />
    </output_set>
  </message_set>
  <internal_events_set />
  <protocol_behavior is_stateless="false">
    <start state_machine_name="management.accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled" />
    <state_machine name="management.accessControl.events.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">
          <state name="NotControlled" interpretation="redefine state in order to extend">
            
              <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedJointPositions" value="msg" interpretation="enveloped query commanded Joint Positions message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded Joint Positions message">
                    <argument value=" 'ReportCommandedJointPositions' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
           
          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <state name="Available" initial_state="Standby">
              <state name="Ready">
                <exit>
                  <action name="stopMotion" interpretation="Stop motion of the manipulator." />
                </exit>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetJointPositions" value="msg" interpretation="enveloped set joint efforts message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData) &amp;&amp; motionProfileExists()"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND
                    a motion profile has already been received." />
                  <simple />
                  <action name="setJointEfforts"
                    interpretation="Set the joint motion efforts for the manipulator.  The manipulator joints move accordingly">
                    <argument value="msg" />
                  </action>
                </transition>
              </state>
            </state>
            <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedJointPositions" value="msg" interpretation="enveloped query commanded Joint Positions message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded Joint Positions message">
                    <argument value=" 'ReportCommandedJointPositions' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData)" interpretation="True if the message that triggered the transition is received from the client that is in control of this service." />
                  <simple />
                  <action name="setMotionProfile" interpretation="Set the motion profile parameters for the manipulator.">
                    <argument value="msg" />
                  </action>
                </transition>
              </default_state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
