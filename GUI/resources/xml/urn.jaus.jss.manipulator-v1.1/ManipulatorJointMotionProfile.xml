<?xml version="1.1" encoding="UTF-8"?> <?oxygen RNGSchema="../../schema/JSIDL/jsidl.rnc" type="compact"?>
<service_def name="ManipulatorJointMotionProfile"
  id="urn:jaus:jss:manipulator:ManipulatorJointMotionProfile" version="1.1"
  xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1">
  <description xml:space="preserve">
    The function of the Joint Motion Profile Service is to allow for configuration of 
    the motion profile for all services co-located on this component.  The Set Motion 
    Profile message is used to set maximum velocity and acceleration rates for each of 
    the joint parameters.  All motions utilize the motion profile data that was most 
    recently sent. 
  </description>
  <assumptions> Messages may be delayed, lost, or reordered. </assumptions>
  <references>
    <inherits_from name="accessControl" id="urn:jaus:jss:core:AccessControl" version="1.1"
    />
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet"
      version="1.1"/>
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="QueryMotionProfile"
        declared_type_ref="manipulator.queryClass.QueryMotionProfile"/>
      <declared_message_def name="SetMotionProfile"
        declared_type_ref="manipulator.commandClass.SetMotionProfile"/>
    </input_set>
    <output_set>
      <declared_message_def name="ReportMotionProfile"
        declared_type_ref="manipulator.informClass.ReportMotionProfile"/>
    </output_set>
  </message_set>
  <internal_events_set/>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="accessControl.events.transport.ReceiveFSM"
      state_name="Receiving.Ready.NotControlled"/>
    <state_machine name="accessControl.events.transport.ReceiveFSM"
      interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready"
        interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled"
          interpretation="redefine state in order to extend">
          <state name="NotControlled" interpretation="redefine state in order to extend">
            <default_state>
              <transition name="accessControl.events.transport.Receive">
                <parameter type="QueryMotionProfile" value="msg"
                  interpretation="enveloped query motion profile message"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"
                  interpretation="transport data"/>
                <guard condition="motionProfileExists()"
                  interpretation="True if a motion profile has already been received."/>
                <simple/>
                <action name="accessControl.events.transport.Send"
                  interpretation="Send a Report Motion Profile message">
                  <argument value=" 'ReportMotionProfile' "/>
                  <argument value="transportData"/>
                </action>
              </transition>
            </default_state>
          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <default_state>
              <transition name="accessControl.events.transport.Receive">
                <parameter type="QueryMotionProfile" value="msg"
                  interpretation="enveloped query motion profile message"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"
                  interpretation="transport data"/>
                <guard condition="motionProfileExists()"
                  interpretation="True if a motion profile has already been received."/>
                <simple/>
                <action name="accessControl.events.transport.Send"
                  interpretation="Send a Report Motion Profile message">
                  <argument value=" 'ReportMotionProfile' "/>
                  <argument value="transportData"/>
                </action>
              </transition>
              <transition name="accessControl.events.transport.Receive">
                <parameter type="SetMotionProfile" value="msg"
                  interpretation="enveloped query motion profile message"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"
                  interpretation="transport data"/>
                <guard condition="accessControl.isControllingClient(transportData)"
                  interpretation="True if the message that triggered the transition is 
                  received from the client that is in control of this service."/>
                <simple/>
                <action name="setMotionProfile"
                  interpretation="Set the motion profile parameters for the manipulator.">
                  <argument value="msg"/>
                </action>
              </transition>
            </default_state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
