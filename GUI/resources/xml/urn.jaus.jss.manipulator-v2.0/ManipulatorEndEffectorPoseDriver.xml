<?xml version="1.1" encoding="UTF-8"?> <?oxygen RNGSchema="../../schema/JSIDL/jsidl.rnc" type="compact"?>
<service_def name="ManipulatorEndEffectorPoseDriver"
  id="urn:jaus:jss:manipulator:ManipulatorEndEffectorPoseDriver" version="2.0"
  xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1">
  <description xml:space="preserve">
    The function of the End Effector Pose Driver is to perform closed-loop position and 
    orientation control of the tool tip.  The input is the desired position and 
    orientation of the end effector pose specified in the manipulator base coordinate 
    system. It is assumed that the manipulator begins motion immediately after receiving 
    the “Set End Effector Pose” message. To ensure backward compatibility with 1.0 
    implementations of this service, it is recommended that this service be co-located 
    on the same component as a Manipulator Specification Service, a Manipulator Tool Offset 
    Service, and a Manipulator Joint Motion Profile Service.
  </description>
  <assumptions> Messages may be delayed, lost, or reordered. </assumptions>
  <references>
    <inherits_from name="management" id="urn:jaus:jss:core:Management" version="1.1"/>
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet"
      version="2.0"/>
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="SetEndEffectorPose"
        declared_type_ref="manipulator.commandClass.SetEndEffectorPose"/>
      <declared_message_def name="QueryCommandedEndEffectorPose"
        declared_type_ref="manipulator.queryClass.QueryCommandedEndEffectorPose"/>
    </input_set>
    <output_set>
      <declared_message_def name="ReportCommandedEndEffectorPose"
        declared_type_ref="manipulator.informClass.ReportCommandedEndEffectorPose"/>
    </output_set>
  </message_set>
  <internal_events_set/>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="management.accessControl.events.transport.ReceiveFSM"
      state_name="Receiving.Ready.NotControlled"/>
    <state_machine name="management.accessControl.events.transport.ReceiveFSM"
      interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready"
        interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled"
          interpretation="redefine state in order to extend">
          <state name="NotControlled" interpretation="redefine state in order to extend">

            <default_state>
              <transition name="management.accessControl.events.transport.Receive">
                <parameter type="QueryCommandedEndEffectorPose" value="msg"
                  interpretation="enveloped query commanded End Effector Pose message"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"
                  interpretation="transport data"/>
                <simple/>
                <action name="management.accessControl.events.transport.Send"
                  interpretation="Send a Report Commanded End Effector Pose message">
                  <argument value=" 'ReportCommandedEndEffectorPose' "/>
                  <argument value="transportData"/>
                </action>
              </transition>
            </default_state>

          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <state name="Available" initial_state="Standby">
              <state name="Ready">
                <exit>
                  <action name="stopMotion"
                    interpretation="Stop motion of the manipulator."/>
                </exit>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetEndEffectorPose" value="msg"
                    interpretation="enveloped set end effector pose message"/>
                  <parameter type="Receive.Body.ReceiveRec" value="transportData"
                    interpretation="transport data"/>
                  <guard
                    condition="management.accessControl.isControllingClient(transportData) 
                    &amp;&amp; motionProfileExists()"
                    interpretation="True if the message that triggered the transition 
                    is received from the client that is in control of this service AND 
                    True if a motion profile has already been received"/>
                  <simple/>
                  <action name="setEndEffectorPose"
                    interpretation="Set the desired position and orientation for the 
                    manipulator end-effector">
                    <argument value="msg"/>
                  </action>
                </transition>
              </state>
            </state>
            <default_state>
              <transition name="management.accessControl.events.transport.Receive">
                <parameter type="QueryCommandedEndEffectorPose" value="msg"
                  interpretation="enveloped query commanded End Effector Pose message"/>
                <parameter type="Receive.Body.ReceiveRec" value="transportData"
                  interpretation="transport data"/>
                <simple/>
                <action name="management.accessControl.events.transport.Send"
                  interpretation="Send a Report Commanded End Effector Pose message">
                  <argument value=" 'ReportCommandedEndEffectorPose' "/>
                  <argument value="transportData"/>
                </action>
              </transition>
            </default_state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
