<?xml version="1.0" encoding="UTF-8"?> <?oxygen RNGSchema="../jsidl/jaus_service_interface_definition_language.rnc" type="compact"?>
<service_def name="ManipulatorEndEffectorPoseDriver" id="urn:jaus:jss:manipulator:ManipulatorEndEffectorPoseDriver"
  version="1.0" xmlns="urn:jaus:jsidl:1.0" xmlns:ns1="urn:jaus:jsidl:1.1">
  <description xml:space="preserve">
  	The function of the End Effector Pose Driver is to perform closed-loop position and orientation control of the tool tip.  
    The input is the desired position and orientation of the end-effector pose specified in the manipulator base coordinate 
    system.  The \u201CSet Motion Profile\u201D message is used to set maximum velocity and acceleration rates for each of the variable 
    joint parameters.  All motions utilize the motion profile data that was most recently sent.  Default settings are not 
    assumed so that upon initialization this message must be sent before the first \u201CSet End Effector Pose\u201D message is sent.  
    It is assumed that the manipulator begins motion immediately after receiving the \u201CSet End Effector Pose\u201D message.
  </description>
  <assumptions>
    Messages may be delayed, lost, or reordered.
  </assumptions>
  <references>
    <inherits_from name="management" id="urn:jaus:jss:core:Management" version="1.0" />
  </references>
  <declared_type_set name="types">
    <declared_type_set_ref name="manipulator" id="urn:jaus:jss:manipulator:MessageSet" version="1.0" />
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="QueryManipulatorSpecifications" declared_type_ref="manipulator.queryClass.QueryManipulatorSpecifications" />
      <declared_message_def name="QueryToolOffset" declared_type_ref="manipulator.queryClass.QueryToolOffset" />
      <declared_message_def name="SetToolOffset" declared_type_ref="manipulator.commandClass.SetToolOffset" />
      <declared_message_def name="SetEndEffectorPose" declared_type_ref="manipulator.commandClass.SetEndEffectorPose" />
      <declared_message_def name="SetMotionProfile" declared_type_ref="manipulator.commandClass.SetMotionProfile" />
      <declared_message_def name="QueryCommandedEndEffectorPose" declared_type_ref="manipulator.queryClass.QueryCommandedEndEffectorPose" />
      <declared_message_def name="QueryMotionProfile" declared_type_ref="manipulator.queryClass.QueryMotionProfile" />
    </input_set>
    <output_set>
      <declared_message_def name="ReportManipulatorSpecifications" declared_type_ref="manipulator.informClass.ReportManipulatorSpecifications" />
      <declared_message_def name="ReportToolOffset" declared_type_ref="manipulator.informClass.ReportToolOffset" />
      <declared_message_def name="ReportCommandedEndEffectorPose" declared_type_ref="manipulator.informClass.ReportCommandedEndEffectorPose" />
      <declared_message_def name="ReportMotionProfile" declared_type_ref="manipulator.informClass.ReportMotionProfile" />
    </output_set>
  </message_set>
  <internal_events_set />
  <protocol_behavior is_stateless="false">
    <start state_machine_name="management.accessControl.events.transport.ReceiveFSM" state_name="Receiving.Ready.NotControlled.StateA" />
    <state_machine name="management.accessControl.events.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to extend">
          <state name="NotControlled" initial_state="StateA" interpretation="redefine state in order to extend">
            <state name="StateA" initial_state="Init">
              <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryToolOffset" value="msg" interpretation="enveloped query tool offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Tool Offset message">
                    <argument value=" 'ReportToolOffset' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedEndEffectorPose" value="msg" interpretation="enveloped query commanded End Effector Pose message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded End Effector Pose message">
                    <argument value=" 'ReportCommandedEndEffectorPose' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
              </default_state>
            </state>
          </state>
          <state name="Controlled" interpretation="redefine state in order to extend">
            <state name="StateB" initial_state="Standby">
              <state name="Ready">
                <exit>
                  <action name="stopMotion" interpretation="Stop motion of the manipulator." />
                </exit>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetEndEffectorPose" value="msg" interpretation="enveloped set end effector pose message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData) &amp;&amp; motionProfileExists()"
                    interpretation="True if the message that triggered the transition is received from the client that is in control of this service AND
                      True if a motion profile has already been received" />
                  <simple />
                  <action name="setEndEffectorPose" interpretation="Set the desired position and orientation for the manipulator end-effector">
                    <argument value="msg" />
                  </action>
                </transition>
              </state>
              <default_state>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryManipulatorSpecifications" value="msg"
                    interpretation="enveloped query manipulator specification message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a report manipulator specs message">
                    <argument value=" 'ReportManipulatorSpecifications' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryToolOffset" value="msg" interpretation="enveloped query tool offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Tool Offset message">
                    <argument value=" 'ReportToolOffset' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryCommandedEndEffectorPose" value="msg" interpretation="enveloped query commanded End Effector Pose message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Commanded End Effector Pose message">
                    <argument value=" 'ReportCommandedEndEffectorPose' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="QueryMotionProfile" value="msg" interpretation="enveloped query motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="motionProfileExists()" interpretation="True if a motion profile has already been received." />
                  <simple />
                  <action name="management.accessControl.events.transport.Send" interpretation="Send a Report Motion Profile message">
                    <argument value=" 'ReportMotionProfile' " />
                    <argument value="transportData"/>
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetMotionProfile" value="msg" interpretation="enveloped set motion profile message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData)" interpretation="True if the message that triggered the transition is received from the client that is in control of this service." />
                  <simple />
                  <action name="setMotionProfile" interpretation="Set the motion profile parameters for the manipulator.">
                    <argument value="msg" />
                  </action>
                </transition>
                <transition name="management.accessControl.events.transport.Receive">
                  <parameter type="SetToolOffset" value="msg" interpretation="enveloped set Tool Offset message" />
                  <parameter type="Receive.Body.ReceiveRec" value="transportData" interpretation="transport data" />
                  <guard condition="management.accessControl.isControllingClient(transportData)" interpretation="True if the message that triggered the transition is received from the client that is in control of this service." />
                  <simple />
                  <action name="setToolOffset" interpretation="Set the location of the tool tip as measured in the end effector coordinate system">
                    <argument value="msg" />
                  </action>
                </transition>
              </default_state>
            </state>
          </state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
