/***********           LICENSE HEADER   *******************************
JAUS Tool Set
Copyright (c)  2010, United States Government
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

       Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

       Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

       Neither the name of the United States Government nor the names of
its contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*********************  END OF LICENSE ***********************************/

/*
 * PathSelectDialog.java
 *
 * Created on Jan 5, 2011, 11:24:01 AM
 */

package org.jts.gui.util;

import java.io.File;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author idurkan
 */
public class PathSelectDialog extends javax.swing.JDialog {

    public static final int FILES_ONLY = 0;
    public static final int DIRECTORIES_ONLY = 1;
    public static final int FILES_AND_DIRECTORIES = 2;

    /**
     * list of titles to use for browse dialog, indexed on the above FILES_ONLY, etc. constants.
     */
    private static final String[] browseDialogConfirmStrings = {
        "Select File",
        "Select Directory",
        "Select"
    };

    /**
     * list of names for the thing being selected, indexed on FILES_ONLY, etc.
     */
    private static final String[] pathEntityNames = {
        "file", 
        "directory",
        "file or directory"
    };

    private File selectedPath;
    private File defaultPath;
    private boolean isSave = false;
    private int fileSelectionMode = FILES_ONLY;

    /** Creates new form PathSelectDialog */
    public PathSelectDialog(java.awt.Frame parent, boolean modal, File initialPath,
            String newTitleText, String newInstructionText, String acceptButtonText) {
        
        super(parent, modal); 
        initComponents();

        this.setTitle(newTitleText);
        instrucsLabel.setText(newInstructionText);
        acceptButton.setText(acceptButtonText);

        defaultPath = initialPath.getAbsoluteFile();
        pathText.setText(initialPath.getAbsolutePath());

        // window behavior setup
        this.getRootPane().setDefaultButton(acceptButton);
        this.setLocationRelativeTo(this.getParent());
    }

    public void setFileSelectionMode(int selectionMode) {
        if ((selectionMode == FILES_ONLY) || (selectionMode == DIRECTORIES_ONLY)
                || (selectionMode == FILES_AND_DIRECTORIES)) {
	   fileSelectionMode = selectionMode;
        } else {
	   throw new IllegalArgumentException("Incorrect mode for file selection: " + selectionMode);
        }
    }

    /**
     * Set the path select dialog to work in 'save mode', or 'open mode'.  In open mode, the user
     * must specify a path to a file or directory that already exists in the filesystem.  In save mode,
     * the user may specify a path to a file or directory that does not already exist.  However, the
     * path to the file/directory's parent directory *must* exist.  
     * @param doSaveMode
     */
    public void setSaveMode(boolean doSaveMode) {
        isSave = doSaveMode;
    }

    private boolean pathSelected = false;
    public boolean userSelectedPath() {
        return pathSelected;
    }

    public File getSelectedPath() {
        return selectedPath.getAbsoluteFile();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        instrucsLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        pathText.setText("Dummy");
        pathText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pathTextFocusGained(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        defaultButton.setText("Default");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        instrucsLabel.setText("Dummy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instrucsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathText, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrucsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultButton)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 6, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(acceptButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Show a browse dialog and set the path text field with user's selection as appropriate
     * @param evt
     */
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        File pathInText = new File(pathText.getText());
        File browseStartDir = null;

        if (pathInText.exists()) {
            browseStartDir = pathInText;
        }

        File chosenPath = browseForPath(browseStartDir);

        if (chosenPath != null) {
            pathText.setText(chosenPath.getAbsolutePath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        pathText.setText(defaultPath.getAbsolutePath());
    }//GEN-LAST:event_defaultButtonActionPerformed

    /**
     * Shows a browse dialog starting at path given by browseStartDir and returns the
     * path the user selects as a File.
     * @param browseStartDir Starting directory for the browsing dialog.
     * @return
     */
    private File browseForPath(File browseStartDir) {
        JFileChooser dirChooser = new JFileChooser(browseStartDir);
        dirChooser.setFileSelectionMode(fileSelectionMode);

        int dialogResult = dirChooser.showDialog(this, browseDialogConfirmStrings[fileSelectionMode]);

        boolean approval = false;
        switch (dialogResult) {
            case JFileChooser.APPROVE_OPTION:
                approval = true;
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
            default:
                throw new RuntimeException("Unexpected result from browse dialog.");
        }

        if (approval) {
            return dirChooser.getSelectedFile();
        } else {
            return null;
        }
    }

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // try to turn text in field into a valid File
        File pathInText = new File(pathText.getText());

        // only absolute paths are allowed
        if (!pathInText.isAbsolute()) {
            JOptionPane.showMessageDialog(this, "The selected path is not absolute.  Specify an absolute path.",
                    "Invalid Path", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isSave) {
            // open mode: ensure the specified path exists, if it doesn't show an error
            // to the user and refuse to close.
            if (pathInText.exists()) {
                boolean pathAcceptable = false;

                switch (fileSelectionMode) {
                    case FILES_ONLY:
                        pathAcceptable = pathInText.isFile();
                        break;
                    case DIRECTORIES_ONLY:
                        pathAcceptable = pathInText.isDirectory();
                        break;
                    case FILES_AND_DIRECTORIES:
                        // don't want symlinks, devices etc.
                        pathAcceptable =
                                pathInText.isDirectory() || pathInText.isFile();
                        break;
                    default:
                        throw new RuntimeException("invalid file selection mode when attempting"
                                + "to accept user selection!");
                }

                if (pathAcceptable) {
                    pathSelected = true;
                    selectedPath = pathInText.getAbsoluteFile();

                    this.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(this, "The selected path is not a " +
                            pathEntityNames[fileSelectionMode] + ".  Please "
                            + "select an existing " + pathEntityNames[fileSelectionMode] + ".",
                            "Invalid Path", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "The selected path does not exist.  Please "
                            + "select an existing " + pathEntityNames[fileSelectionMode] + ".",
                            "Object does not exist", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // save mode: ensure the parent directory of the specified path exists.  if it doesn't,
            // show an error to the user and refuse to close the dialog.
            boolean pathAcceptable = false;

            // does the path's parent directory exist (and is it actually a directory?)
            if (pathInText.getParentFile() != null && !pathInText.getParentFile().isDirectory()) {
                JOptionPane.showMessageDialog(this, "The path to the specified " + pathEntityNames[fileSelectionMode]
                        + " does not exist.  Please create the parent directories before saving there.",
                        "Select Valid Path", JOptionPane.ERROR_MESSAGE);

                return;
            }

            // if the selected path already exists (so the user is overwriting), is it the
            // desired type of entity?
            if (pathInText.exists()) {
                switch (fileSelectionMode) {
                    case FILES_ONLY:
                        pathAcceptable = pathInText.isFile();
                        break;
                    case DIRECTORIES_ONLY:
                        pathAcceptable = pathInText.isDirectory();
                        break;
                    case FILES_AND_DIRECTORIES:
                        pathAcceptable = true;
                        break;
                    default:
                        throw new RuntimeException("invalid file selection mode when attempting"
                                    + "to accept user selection!");
                }
            } else {
                pathAcceptable = true;
            }

            if (pathAcceptable) {
                pathSelected = true;
                selectedPath = pathInText.getAbsoluteFile();
                this.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Select a path to a "
                        + pathEntityNames[fileSelectionMode] + ".", "Select Valid Path", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        pathSelected = false;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void pathTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pathTextFocusGained
        pathText.selectAll();
    }//GEN-LAST:event_pathTextFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton defaultButton;
    private javax.swing.JLabel instrucsLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField pathText;
    // End of variables declaration//GEN-END:variables

}
