/***********           LICENSE HEADER   *******************************
JAUS Tool Set
Copyright (c)  2011, United States Government
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

       Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

       Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

       Neither the name of the United States Government nor the names of
its contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*********************  END OF LICENSE ***********************************/

/*
 * DocgenStatusDialog.java
 *
 * Created on Jan 26, 2011, 2:34:08 PM
 */

package org.jts.gui.docGenerator;

import javax.swing.JDialog;
import org.jts.gui.util.GUISupport;

/**
 * Dialog for showing progress/status during documentation generation
 * @author idurkan
 */
public class DocgenStatusDialog extends JDialog implements DocgenStatusMonitor {

    /** 
     * Creates a new DocgenStatusDialog.  The dialog will be non-modal when shown.
     */
    public DocgenStatusDialog(java.awt.Frame parent, final String initialStatus) {
        super(parent, false);
        initComponents();

        this.closeButton.setEnabled(false);
        this.statusTextLabel.setText(initialStatus);

        // other dialog setup
        this.getRootPane().setDefaultButton(closeButton);
        this.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);

        // make Swing center the dialog on the parent window while keeping the dialog on one monitor.
        this.setLocationRelativeTo(this.getParent());
    }

    public void setCloseButtonText(final String buttonText) {
        this.closeButton.setText(buttonText);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        outerTextLabel = new javax.swing.JLabel();
        statusTextLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Status");
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        outerTextLabel.setText("Document Generation Status:");

        statusTextLabel.setText("Status Text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(statusTextLabel))
                    .addComponent(outerTextLabel))
                .addContainerGap(139, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(178, Short.MAX_VALUE)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outerTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel outerTextLabel;
    private javax.swing.JLabel statusTextLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Shows the given status message in the status label.
     * @param message The message to show in the status label.
     */
    public void updateStatus(final String message) {
        try {
            GUISupport.runOnEDT(new Runnable() {

                public void run() {
                    statusTextLabel.setText(message);
                }
            });

        } catch (Exception ex) {
            throw new RuntimeException("Error when altering info dialog after import completed.", ex);
        }
    }

    /**
     * Shows exception message in the status label, and shows the message in the outer label,
     * and enables the close button.
     * @param message The message to show in the outer label.
     * @param causingEx The exception causing the failure; message is shown in the status label.
     */
    public void postFailure(final String message, final Exception causingEx) {
        try {
            GUISupport.runOnEDT(new Runnable() {

                public void run() {
                    outerTextLabel.setText(message);
                    statusTextLabel.setText(causingEx.getMessage());
                    closeButton.setText("Close");
                    closeButton.setEnabled(true);
                }
            });

        } catch (Exception ex) {
            throw new RuntimeException("Error when altering info dialog after import completed.", ex);
        }
        
    }

    /**
     * Shows the given button in the status label and enables the close button.
     * @param message The message to show in the status label.
     */
    public void postSuccess(final String message) {
        try {
            GUISupport.runOnEDT(new Runnable() {

                public void run() {
                    statusTextLabel.setText(message);
                    closeButton.setText("Close");
                    closeButton.setEnabled(true);
                }
            });

        } catch (Exception ex) {
            throw new RuntimeException("Error when altering info dialog after import completed.", ex);
        }
    }

}
