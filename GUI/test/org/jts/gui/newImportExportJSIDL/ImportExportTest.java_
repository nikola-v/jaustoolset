/***********           LICENSE HEADER   *******************************
JAUS Tool Set
Copyright (c)  2010, United States Government
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

       Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

       Redistributions in binary form must reproduce the above copyright 
notice, this list of conditions and the following disclaimer in the 
documentation and/or other materials provided with the distribution.

       Neither the name of the United States Government nor the names of 
its contributors may be used to endorse or promote products derived from 
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
*********************  END OF LICENSE ***********************************/

package org.jts.gui.newImportExportJSIDL;

import org.junit.*;
import org.custommonkey.xmlunit.*;

import org.jts.gui.importJSIDL.Import;
import org.jts.gui.exportJSIDL.Export;

import com.u2d.type.atom.FileEO;
import com.u2d.type.atom.FileWEO;
import java.util.logging.Logger;
import java.util.logging.Level;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.xml.sax.SAXException;

import com.u2d.app.Application;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;


/**
*
* @author Drew
*/
public class ImportExportTest
{
	HashMap<String, String> fileNameServiceDefMap = new HashMap<String, String>();

	String coreDirectory = "resources/xml/urn.jaus.jss.core/";
	String testDirectory = "test/xml";
	String inputDirectory = "test/org/jts/gui/newImportExportJSIDL/inputXML/";
	String outputDirectory = "test/org/jts/gui/newImportExportJSIDL/outputXML/";

	public static void main(String [ ] args)
	{
		ImportExportTest t = new ImportExportTest();
		t.setup();
		t.runTest();
	}

	@Before
	public void setup()
	{
		// seed the database
		seedDatabase();

		// process each file from the directory to find service name and file name then copy to input folder
		processAllFiles( coreDirectory );

		// import all definitions into database
		importAllFiles( coreDirectory );

		// export the definition from the database to the outputXML directory
		// (assume file names will match the service def name)
		exportAllFiles();
	}

	private void seedDatabase()
	{
		Logger.getLogger("org.springframework").setLevel(Level.WARNING);
		ApplicationContext context =
		new ClassPathXmlApplicationContext("applicationContext.xml");
		((Application) context.getBean("application")).seedDatabase();
	}

	private void processAllFiles( String path )
	{
		// read all files in input directory
		File input = new File( path );
		File[] files = input.listFiles();

		for( int i = 0; i < files.length; i++ )
		{
			File file = files[i];
			if( file.isFile() )
			{
				String fileName = file.getName();
				String serviceDefName = "urn:org.jts.test:" + fileName.replace( ".xml", "" );

				// add file name to storage for running the unit tests later
				fileNameServiceDefMap.put( fileName, serviceDefName );
				
				// copy the current file into the input directory where we will compare it
				copyFileToInput( file );
			}
		}
	}
	
	private void copyFileToInput( File original )
	{
		if( original == null )
		{
			return;
		}

		File copyFile = new File( inputDirectory + original.getName() );

		try
		{
			FileReader input = new FileReader( original );
			FileWriter output = new FileWriter( copyFile );
			
			int i;
			
			while( (i = input.read() ) != -1 )
			{
				output.write( i );
			}
			
			input.close();
			output.close();
		}
		catch( IOException e )
		{
			System.out.println( e.toString() );
		}
	}

	private void importAllFiles( String path )
	{
		FileEO inputEO = new FileEO( path );
		Import imp = new Import();
		imp.importServiceDefs( inputEO );
	}

	private void exportAllFiles()
	{
		for( String fileName : fileNameServiceDefMap.keySet() )
		{
			String serviceDefName = fileNameServiceDefMap.get( fileName );

			com.u2d.generated.ServiceDef ret = null;

			ret = org.jts.gui.JAXBtoJmatter.ServiceDef.lookupServiceDef( serviceDefName, "1.0" );

			if( ret == null )
			{
				ret = org.jts.gui.JAXBtoJmatter.ServiceDef.lookupServiceDef( serviceDefName, "1.1" );

				if( ret == null )
				{
					ret = org.jts.gui.JAXBtoJmatter.ServiceDef.lookupServiceDef( serviceDefName, "plus" );

					if(ret == null)
					{
						Assert.fail( "ServiceSet with name: " + serviceDefName + " was not found in the database" );
						return;
					}
				}
			}

			// print out stored file to output directory
			File file = new File( outputDirectory + fileName );

			FileWEO writeFile = new FileWEO();
			writeFile.setValue(file);
			Export.exportServiceDef( ret, writeFile );
		}
	}

	@Test
	public void runTest()
	{		
		// ignores whitespace between elements
		XMLUnit.setIgnoreWhitespace( true );
		
		// ignores comment differences
		XMLUnit.setIgnoreComments( true );
		
		// ignores attribute order( done by default but included for clarity)
		XMLUnit.setIgnoreAttributeOrder( true );

		try
		{
			// we now expect a file with the same name to appear in
			// both the imputXML and outputXML directories 
			for( String fileName : fileNameServiceDefMap.keySet() )
			{
	
				FileReader input = new FileReader( inputDirectory + fileName );
				FileReader output = new FileReader( outputDirectory + fileName );

				try
				{
					Diff compare = new Diff( input, output );
					DetailedDiff d = new DetailedDiff( compare );
					
					int count = 0;
					for( Object obj : d.getAllDifferences() )
					{
						Difference dif = ( Difference ) obj;
						System.out.println( dif.getDescription() );
						count++;
					}

					org.custommonkey.xmlunit.XMLAssert.assertXMLIdentical( "Problem found in file: " + fileName, compare, true );
				}
				catch( SAXException e )
				{
					System.out.println( e.toString() );
				}
			}
		}
		catch( Exception e )
		{
			System.out.println( e.toString() );
		}
			
	}

}
