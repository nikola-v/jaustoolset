<?xml version="1.0" encoding="UTF-8"?>
<ns1:service_set xmlns:ns1="urn:jaus:jsidl:plus" name="ManagementClientSet" id="urn:university_of_florida:jaus_services:ManagementClientSet" version="0.1" xmlns="urn:jaus:jsidl:plus">
   <description xml:space="preserve" xmlns="urn:jaus:jsidl:1.0">The set of services that make up the management service</description>
  <service_def id="urn:jaus:jss:core:Transport"
     name="Transport" version="1.0" xmlns="urn:jaus:jsidl:1.0">
    <description xml:space="preserve">
      The transport service acts as an interface to the JAUS transport layer. It models an abstract bi-directional communication channel (input queue and output queue) whose primary function is to provide the capability of sending messages to a single destination endpoint or broadcasting messages to all endpoints in the system, and to receive a message from any source endpoint. It also provides the capability to prioritize the delivery of sent messages. 
      This service establishes a communication endpoint whose address is defined by a triple {SubsystemID, NodeID, ComponentID} as specified by the Send and Receive internal events. Other services that need to utilize the communication channel provided by the transport service must inherit from the transport service. 
    </description>
    <assumptions> Messages may be delayed, lost or reordered. </assumptions>
    <message_set>
      <input_set/>
      <output_set/>
    </message_set>
    <internal_events_set>
      <event_def name="Send">
        <description xml:space="preserve">
          The Send event is used by a derived service to hand over the payload data that it needs to send to a specified destination endpoint via the transport layer. Upon receipt, this service prepares the message for delivery (marshals the message) as specified by the transport layer specification and attempts to deliver the encapsulated payload data to the destination endpoint.
        </description>
        <header name="Header"/>
        <body name="Body">
          <record name="SendRec" optional="false">
            <presence_vector field_type_unsigned="unsigned byte"/>
            <fixed_field name="DestSubsystemID" field_type="unsigned short integer"
              field_units="one" interpretation="Destination Subsystem ID, where a value of 0xFFFF represents all subsystems" optional="false"/>
            <fixed_field name="DestNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Node ID where a value of 0xFF represents all nodes." optional="false"/>
            <fixed_field name="DestComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID where a value of 0xFF represents all components." optional="false"/>
            <fixed_field name="SrcSubsystemID" field_type="unsigned short integer" field_units="one"
              interpretation="Source Subsystem ID" optional="true"/>
            <fixed_field name="SrcNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Source Node ID" optional="true"/>
            <fixed_field name="SrcComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID" optional="false"/>
            <fixed_field name="Priority" field_type="unsigned byte" field_units="one" optional="true"
              interpretation="Priority level of this message. If not specified, the normal priority
              level is used.">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="3"
                  upper_limit_type="inclusive" interpretation="priority range"/>
                <value_enum enum_index="0" enum_const="LOW"/>
                <value_enum enum_index="1" enum_const="NORMAL"/>
                <value_enum enum_index="2" enum_const="HIGH"/>
                <value_enum enum_index="3" enum_const="SAFETY"/>
              </value_set>
            </fixed_field>
            <variable_length_field name="MessagePayload" field_format="JAUS MESSAGE"
              optional="false" interpretation="Message payload.">
              <count_field field_type_unsigned="unsigned long integer" min_count="2"/>
            </variable_length_field>
          </record>
        </body>
        <footer name="Footer"/>
      </event_def>
      <event_def name="BroadcastLocal">
        <description xml:space="preserve">
          The Broadcast Local event is the same as the Send event except that this service sends the payload to all endpoints within the subsystem.
        </description>
        <header name="Header"/>
        <body name="Body">
          <record name="SendRec" optional="false">
            <presence_vector field_type_unsigned="unsigned byte"/>
            <fixed_field name="DestSubsystemID" field_type="unsigned short integer"
              field_units="one" interpretation="Destination Subsystem ID, where a value of 0xFFFF represents all subsystems" optional="false"/>
            <fixed_field name="DestNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Node ID where a value of 0xFF represents all nodes." optional="false"/>
            <fixed_field name="DestComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID where a value of 0xFF represents all components." optional="false"/>
            <fixed_field name="SrcSubsystemID" field_type="unsigned short integer" field_units="one"
              interpretation="Source Subsystem ID" optional="true"/>
            <fixed_field name="SrcNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Source Node ID" optional="true"/>
            <fixed_field name="SrcComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID" optional="false"/>
            <fixed_field name="Priority" field_type="unsigned byte" field_units="one" optional="true"
              interpretation="Priority level of this message. If not specified, the normal priority
              level is used.">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="3"
                  upper_limit_type="inclusive" interpretation="priority range"/>
                <value_enum enum_index="0" enum_const="LOW"/>
                <value_enum enum_index="1" enum_const="NORMAL"/>
                <value_enum enum_index="2" enum_const="HIGH"/>
                <value_enum enum_index="3" enum_const="SAFETY"/>
              </value_set>
            </fixed_field>
            <variable_length_field name="MessagePayload" field_format="JAUS MESSAGE"
              optional="false" interpretation="Message payload.">
              <count_field field_type_unsigned="unsigned long integer" min_count="2"/>
            </variable_length_field>
          </record>
        </body>
        <footer name="Footer"/>
      </event_def>
      <event_def name="BroadcastGlobal">
        <description xml:space="preserve">
          The Broadcast Global event is the same as the Send event except that this service sends the payload to all endpoints on all subsystems.
        </description>
        <header name="Header"/>
        <body name="Body">
          <record name="SendRec" optional="false">
            <presence_vector field_type_unsigned="unsigned byte"/>
            <fixed_field name="DestSubsystemID" field_type="unsigned short integer"
              field_units="one" interpretation="Destination Subsystem ID, where a value of 0xFFFF represents all subsystems" optional="false"/>
            <fixed_field name="DestNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Node ID where a value of 0xFF represents all nodes." optional="false"/>
            <fixed_field name="DestComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID where a value of 0xFF represents all components." optional="false"/>
            <fixed_field name="SrcSubsystemID" field_type="unsigned short integer" field_units="one"
              interpretation="Source Subsystem ID" optional="true"/>
            <fixed_field name="SrcNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Source Node ID" optional="true"/>
            <fixed_field name="SrcComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID" optional="false"/>
            <fixed_field name="Priority" field_type="unsigned byte" field_units="one" optional="true"
              interpretation="Priority level of this message. If not specified, the normal priority
              level is used.">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="3"
                  upper_limit_type="inclusive" interpretation="priority range"/>
                <value_enum enum_index="0" enum_const="LOW"/>
                <value_enum enum_index="1" enum_const="NORMAL"/>
                <value_enum enum_index="2" enum_const="HIGH"/>
                <value_enum enum_index="3" enum_const="SAFETY"/>
              </value_set>
            </fixed_field>
            <variable_length_field name="MessagePayload" field_format="JAUS MESSAGE"
              optional="false" interpretation="Message payload.">
              <count_field field_type_unsigned="unsigned long integer" min_count="2"/>
            </variable_length_field>
          </record>
        </body>
        <footer name="Footer"/>
      </event_def>
      <event_def name="Receive">
        <description xml:space="preserve">
          The Receive event is used by derived services to hand over the data that was sent by another service to an endpoint established by this service.
        </description>
        <header name="Header"/>
        <body name="Body">
          <record name="ReceiveRec" optional="false" interpretation="transport data">
            <fixed_field name="SrcSubsystemID" field_type="unsigned short integer" field_units="one"
              interpretation="Source Subsystem ID" optional="false"/>
            <fixed_field name="SrcNodeID" field_type="unsigned byte" field_units="one"
              interpretation="Source Node ID" optional="false"/>
            <fixed_field name="SrcComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Destination Component ID" optional="false"/>
            <variable_length_field name="MessagePayload" field_format="JAUS MESSAGE"
              optional="false" interpretation="message payload">
              <count_field field_type_unsigned="unsigned long integer" min_count="2"/>
            </variable_length_field>
          </record>
        </body>
        <footer name="Footer"/>
      </event_def>
    </internal_events_set>
    <protocol_behavior>
      <start state_machine_name="ReceiveFSM" state_name="Receiving"/>
      <start state_machine_name="SendFSM" state_name="Sending"/>
      <state_machine name="ReceiveFSM">
        <state name="Receiving">
          <transition name="Receive">
            <simple/>
          </transition>
        </state>
      </state_machine>
      <state_machine name="SendFSM">
        <state name="Sending">
          <transition name="Send">
            <parameter type="Send" value="msg"/>
            <simple/>
            <action name="Enqueue" interpretation="Convert the destination address into an unsigned
              integer such that the ComponentID maps to the least significant byte, NodeID to the next
              least significant byte and SubsystemID maps onto the remaining two bytes of the integer.
              Package the message as specified by the transport layer specification and send it to its
              destination as per the specified priority.">
              <argument value="msg"/>
            </action>
          </transition>
          <transition name="BroadcastLocal">
            <parameter type="BroadcastLocal" value="msg"/>
            <simple/>
            <action name="BroadcastLocalEnqueue" interpretation="Package the message as specified by the transport layer specification and send it to all endpoints in the local subsystem.">
              <argument value="msg"/>
            </action>
          </transition>
          <transition name="BroadcastGlobal">
            <parameter type="BroadcastGlobal" value="msg"/>
            <simple/>
            <action name="BroadcastGlobalEnqueue" interpretation="Package the message as specified by the transport layer specification and send it to all endpoints in on all subsystems.">
              <argument value="msg"/>
            </action>
          </transition>
        </state>
      </state_machine>
    </protocol_behavior>
  </service_def>
   <service_def name="EventsClient" id="urn:jaus:jss:core:EventsClient" version="1.0" xmlns="urn:jaus:jsidl:1.0">
    <description>Client to the events service.</description>
    <assumptions>Messages may be delayed, lost or reordered.</assumptions>
    <references>
      <inherits_from name="transport" id="urn:jaus:jss:core:Transport" version="1.0"/>
    </references>
    <message_set>
      <input_set>
        <message_def name="ConfirmEventRequest" is_command="false" message_id="01F3">
          <description xml:space="preserve"> 
            The Confirm Event message is used to confirm an Event has been created/updated/or cancelled.  Field 1 represents the Request ID from the Create, Update, or Cancel message that initiated this message.  The Request ID’s scope is local to the requesting client only.  Field 2, Event ID, is a globally unique ID that is established for the event. Field 3 is used to specify the closest rate that the service can provide if it cannot match the requested rate.
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="ConfirmEventRequestRec" optional="false">
              <fixed_field name="RequestID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="ID of the event maintenance request (Create, Update, or Cancel)"/>
              <fixed_field name="EventID" field_type="unsigned byte" field_units="one" interpretation="The
                identifier of the specific event " optional="false"/>
              <fixed_field name="ConfirmedPeriodicRate" field_type="unsigned short integer"
                field_units="hertz" optional="false" interpretation="Requested rate or closest to
                requested rate">
                <scale_range integer_function="round" real_lower_limit="0" real_upper_limit="1092"/>
              </fixed_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="RejectEventRequest" is_command="false" message_id="01F4">
          <description xml:space="preserve"> 
            The Reject Event Request message is used to reject an Event creation, update or cancellation. Field 2 represents the Request ID from the Create, Update, or Cancel message that initiated this message. The Request ID’s scope is local to the requesting client only. Field 4, Event ID, is a globally unique ID that is established for the event. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="RejectEventRequestRec" optional="false">
              <presence_vector field_type_unsigned="unsigned byte"/>
              <fixed_field name="RequestID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="ID of the event maintenance request (create, update, or cancel)"/>
              <fixed_field name="ResponseCode" field_type="unsigned byte" field_units="one"
                optional="true">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="1" enum_const="periodic events not supported"/>
                  <value_enum enum_index="2" enum_const="change based events not supported"/>
                  <value_enum enum_index="3" enum_const="connection refused"/>
                  <value_enum enum_index="4" enum_const="invalid event setup"/>
                  <value_enum enum_index="5" enum_const="message not supported"/>
                  <value_enum enum_index="6" enum_const="error, invalid event ID for update event
                    request"/>
                </value_set>
              </fixed_field>
              <fixed_length_string name="ErrorMessage" string_length="80" optional="true"
                interpretation="String for additional information"/>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="ReportEvents" message_id="41F0" is_command="false">
          <description xml:space="preserve">
            This message is used to report the active event requests that match the requirements provided in the QueryEvents message. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <list name="EventList" optional="false" interpretation="List of reported events">
              <count_field min_count="0" max_count="255" field_type_unsigned="unsigned byte"/>
              <record name="ReportEventRec" optional="false">
                <fixed_field name="EventType" field_type="unsigned byte" field_units="one"
                  optional="false" interpretation="Type of event">
                  <value_set offset_to_lower_limit="false">
                    <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                    <value_enum enum_index="1" enum_const="Every change"/>
                  </value_set>
                </fixed_field>
                <fixed_field name="EventID" field_type="unsigned byte" field_units="one" optional="false"
                  interpretation="Unique identifier of event"/>
                <variable_length_field name="QueryMessage" field_format="JAUS MESSAGE" optional="false"
                  interpretation="The JAUS Query message to be used by the receiving component to
                  generate the Report message(s)">
                  <count_field min_count="2" field_type_unsigned="unsigned integer"/>
                </variable_length_field>
              </record>
            </list>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="Event" message_id="41F1" is_command="false">
          <description xml:space="preserve"> 
            The Event message is sent when event is triggered. It includes the Event ID and a
            sequence number to allow the client to keep track of event processing. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="EventRec" optional="false">
              <fixed_field name="EventID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Unique identifier of the enclosed event"/>
              <fixed_field name="SequenceNumber" field_type="unsigned byte" field_units="one"
                optional="false" interpretation="Sequential count of the number of times this event has
                been issued"/>
              <variable_length_field name="ReportMessage" field_format="JAUS MESSAGE" optional="false"
                interpretation="The JAUS Report message including the message header">
                <count_field min_count="2" field_type_unsigned="unsigned integer"/>
              </variable_length_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
      </input_set>
      <output_set>
        <message_def name="CreateEvent" message_id="01F0" is_command="true">
          <description xml:space="preserve">
            This message is used to set up an event.   Field 1 is a local request ID that the event provider returns in the Confirm or Reject message.  Field 2 is the Event Type, which allows the requester  to specify the type of event – Periodic specifies that the event is a service connection request and should not be queued, in which case field 3 (Requested periodic rate) must be set to a non-zero value.  Event type of Every Change specifies that the corresponding Report message should be sent every time the data associated with that message changes.  
            Field 4 contains the size of the Query message that is to specify the contents of the Report.  Field 5 contains the Query message (including its two byte header).      
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="CreateEventRec" optional="false">
              <fixed_field name="RequestID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Local request ID for use in confirm event"/>
              <fixed_field name="EventType" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Type of event">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                  <value_enum enum_index="1" enum_const="Every change"/>
                </value_set>
              </fixed_field>
              <fixed_field name="RequestedPeriodicRate" field_type="unsigned short integer"
                field_units="hertz" optional="false" interpretation="Must be specified for periodic event,
                and set to 0 for every change ">
                <scale_range integer_function="round" real_lower_limit="0" real_upper_limit="1092"/>
              </fixed_field>
              <variable_length_field name="QueryMessage" field_format="JAUS MESSAGE" optional="false"
                interpretation="The JAUS Query message to be used by the receiving           component to
                generate the report message(s)">
                <count_field min_count="2" field_type_unsigned="unsigned integer"/>
              </variable_length_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="UpdateEvent" is_command="true" message_id="01F1">
          <description xml:space="preserve">
            The Update Event message allows the requester to request a rate or change.  The format is the same as the Create Event, only with the addition of Event ID field to specify the event that needs updating.
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="UpdateEventRec" optional="false">
              <fixed_field name="RequestID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Local request ID for use in confirm event"/>
              <fixed_field name="EventType" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Type of event">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                  <value_enum enum_index="1" enum_const="Every change"/>
                </value_set>
              </fixed_field>
              <fixed_field name="RequestedPeriodicRate" field_type="unsigned short integer"
                field_units="hertz" optional="false" interpretation="Must be specified for periodic event,
                and set to 0 for every change ">
                <scale_range integer_function="round" real_lower_limit="0" real_upper_limit="1092"/>
              </fixed_field>
              <fixed_field name="EventID" field_type="unsigned byte" field_units="one" optional="false"
                interpretation="Unique identifier of existing event to update"/>
              <variable_length_field name="QueryMessage" field_format="JAUS MESSAGE" optional="false"
                interpretation="The JAUS Query message to be used by the receiving           component to
                generate the report message(s)">
                <count_field min_count="2" field_type_unsigned="unsigned integer"/>
              </variable_length_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="CancelEvent" is_command="true" message_id="01F2">
          <description xml:space="preserve"> 
            The Cancel Event message is used by the requester to cancel and/or request deletion of the specified event. </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="CancelEventRec" optional="false">
              <fixed_field name="RequestID" field_type="unsigned byte" field_units="one"
                interpretation="Local           request id for use in confirm/reject message"
                optional="false"/>
              <fixed_field name="EventID" field_type="unsigned byte" field_units="one"
                interpretation="unique id           of the event to be removed" optional="false"/>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="QueryEvents" message_id="21F0" is_command="false">
          <description xml:space="preserve"> 
            The Query Events message is used to request detail on events. Queries can be made by message ID, event type or Event ID. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <variant name="QueryEventsVar" optional="false">
              <vtag_field field_type_unsigned="unsigned byte" min_count="0" max_count="3"/>
              <record name="MessageIDRec" optional="false">
                <fixed_field name="MessageCode" field_type="unsigned short integer" field_units="one"
                  optional="false" interpretation="Query Message ID of the Event message that the
                  receiving component is inquiring about."/>
              </record>
              <record name="EventTypeRec" optional="false">
                <fixed_field name="EventType" field_type="unsigned byte" field_units="one"
                  optional="false" interpretation="Type of event">
                  <value_set offset_to_lower_limit="false">
                    <value_enum enum_index="0" enum_const="Periodic (SC)"/>
                    <value_enum enum_index="1" enum_const="Every change"/>
                  </value_set>
                </fixed_field>
              </record>
              <record name="EventIDRec" optional="false">
                <fixed_field name="EventID" field_type="unsigned byte" field_units="one" optional="false"
                  interpretation="Event ID returned by Confirm Event for details on specific event."/>
              </record>
              <record name="AllEventsRec" optional="false">
                <fixed_field name="AllEvents" field_type="unsigned byte" field_units="one"
                  optional="false" interpretation="All events should be reported.">
                  <value_set offset_to_lower_limit="false">
                    <value_range lower_limit="0" lower_limit_type="inclusive" upper_limit="0"
                      upper_limit_type="inclusive"/>
                  </value_set>
                </fixed_field>
              </record>
            </variant>
          </body>
          <footer name="Footer"/>
        </message_def>
      </output_set>
    </message_set>
    <internal_events_set/>
    <protocol_behavior is_stateless="false">
      <!-- alter protocol behavior -->
      <start state_machine_name="transport.ReceiveFSM" state_name="Receiving.Ready"/>
      <state_machine name="transport.ReceiveFSM" interpretation="extending ReceiveFSM of base service (transport)">
        <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to extend">
          <state name="Ready">
          </state>
        </state>
      </state_machine>
    </protocol_behavior>
  </service_def>
   <service_def name="AccessControlClient" id="urn:jaus:jss:core:AccessControlClient" version="1.0" xmlns="urn:jaus:jsidl:1.0">
  <description xml:space="preserve">
    Client to access control service.
  </description>
  <assumptions>Messages may be delayed, lost or reordered.</assumptions>
  <references>
    <inherits_from name="eventsClient" id="urn:jaus:jss:core:EventsClient" version="1.0"/>
  </references>
  <message_set>
    <input_set>
      <message_def name="ReportControl" message_id="400D" is_command="false">
        <description xml:space="preserve">
          This message is used to report the current state of control of this service.  If the serivce is in the Controlled state, this message reports the ID of the controlling component. The ID fields shall be set to zero (0) if this service is in the NotControlled state..
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="ReportControlRec" optional="false">
            <fixed_field name="SubsystemID" field_type="unsigned short integer"
              field_units="one" interpretation="Subsystem ID" optional="false"/>
            <fixed_field name="NodeID" field_type="unsigned byte" field_units="one"
              interpretation="Node ID" optional="false"/>
            <fixed_field name="ComponentID" field_type="unsigned byte" field_units="one"
              interpretation="Component ID" optional="false"/>
            <fixed_field name="AuthorityCode" field_type="unsigned byte" field_units="one" optional="false">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit_type="inclusive" lower_limit="0" upper_limit="255"
                  upper_limit_type="inclusive"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="RejectControl" message_id="0010" is_command="false">
        <description xml:space="preserve">
          The Reject Control message is used to notify a component that control has been released (response code = 0), or a request to release control could not be processed (response code = 1). 
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="RejectControlRec" optional="false">
            <fixed_field name="ResponseCode" field_type="unsigned byte" field_units="one"
              optional="false">
              <value_set offset_to_lower_limit="false">
                <value_enum enum_index="0" enum_const="CONTROL_RELEASED"/>
                <value_enum enum_index="1" enum_const="NOT_AVAILABLE"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="ConfirmControl" message_id="000F" is_command="false">
        <description xml:space="preserve"> 
          The Confirm Control message is used to notify a component that it accepts control from that component (or not).  When control has been granted, response code of 0, the component under control will only execute messages from the controlling component until control is released or interrupted.  When the requesting component has lower authority than the current controlling entity, the response will be 2.  For components not supporting interruptible control, or if the component is engaged in other operations that would prevent this service from performing its actions to grant control, the response code value of 1 can be used.
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="ConfirmControlRec" optional="false">
            <fixed_field name="ResponseCode" field_type="unsigned byte" field_units="one"
              optional="false">
              <value_set offset_to_lower_limit="false">
                <value_enum enum_index="0" enum_const="CONTROL_ACCEPTED"/>
                <value_enum enum_index="1" enum_const="NOT_AVAILABLE"/>
                <value_enum enum_index="2" enum_const="INSUFFICIENT_AUTHORITY"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="ReportAuthority" message_id="4001" is_command="false">
        <description xml:space="preserve">
          This message is used to report the current command authority. 
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="ReportAuthorityRec" optional="false">
            <fixed_field name="AuthorityCode" field_type="unsigned byte" field_units="one" optional="false">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit_type="inclusive" lower_limit="0" upper_limit="255"
                  upper_limit_type="inclusive"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="ReportTimeout" message_id="4003" is_command="false">
        <description xml:space="preserve"> 
          This message is used to report the timeout period of this message. 
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="ReportTimoutRec" optional="false">
            <fixed_field name="Timeout" field_type="unsigned byte" field_units="second" optional="false">
              <value_set offset_to_lower_limit="false">
                <value_enum enum_index="0" enum_const="TIMEOUT_FEATURE _DISABLED"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
    </input_set>
    <output_set>
      <message_def name="RequestControl" message_id="000D" is_command="true">
        <description xml:space="preserve">
          This message is used to request interruptible control of the receiving component.  Once control is established, the receiving component shall only execute commands from the sending component.  The authority code parameter is to be set equal to that of the sending component.  The receiving component must always accept the control of the highest authority component that is requesting uninterruptible control.  Commands from all other components are ignored unless from a component with higher authority. 
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="RequestControlRec" optional="false">
            <fixed_field name="AuthorityCode" field_type="unsigned byte" field_units="one" optional="false">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit_type="inclusive" lower_limit="0" upper_limit="255"
                  upper_limit_type="inclusive"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="ReleaseControl" message_id="000E" is_command="true">
        <description xml:space="preserve">
          This message is used to relinquish uninterruptible control of the receiving component.  
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body"/>
        <footer name="Footer"/>
      </message_def>
      <message_def name="QueryControl" message_id="200D" is_command="false">
        <description xml:space="preserve">
          This message is used by clients to query the current control state of this service.
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body"/>
        <footer name="Footer"/>
      </message_def>
      <message_def name="QueryAuthority" message_id="2001" is_command="false">
        <description xml:space="preserve">
          This message is used by clients to query the current value of the authority code of this service. 
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body"/>
        <footer name="Footer"/>
      </message_def>
      <message_def name="SetAuthority" message_id="0001" is_command="true">
        <description xml:space="preserve">
          This message shall set the command authority of the receiving component.  The authority bits range in value from 0 to 255 with 255 being the highest.
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body">
          <record name="authorityRec" optional="false">
            <fixed_field name="AuthorityCode" field_type="unsigned byte" field_units="one" optional="false">
              <value_set offset_to_lower_limit="false">
                <value_range lower_limit_type="inclusive" lower_limit="0" upper_limit="255"
                  upper_limit_type="inclusive"/>
              </value_set>
            </fixed_field>
          </record>
        </body>
        <footer name="Footer"/>
      </message_def>
      <message_def name="QueryTimeout" message_id="2003" is_command="false">
        <description xml:space="preserve">
          This message is used by clients of this service to query the timeout period of this service.
        </description>
        <header name="JAUSApplicationLayerHeader">
          <record name="HeaderRec" optional="false">
            <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
              optional="false" interpretation="A two byte field to hold the message ID of a message"/>
          </record>
        </header>
        <body name="Body"/>
        <footer name="Footer"/>
      </message_def>
    </output_set>
  </message_set>
  <internal_events_set>
    <event_def name="Timeout">
      <description> Occurs when access is not re-acquired periodically </description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
  </internal_events_set>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="eventsClient.transport.ReceiveFSM"
      state_name="Receiving.Ready.NotControlled"/>
    <state_machine name="eventsClient.transport.ReceiveFSM" interpretation="extending ReceiveFSM of base
      service (transport)">
      <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to
        extend">
        <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to
          extend">
          <state name="NotControlled">
          </state>
          <state name="Controlled">
          </state>
          <default_state>
          </default_state>
        </state>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
   <service_def name="ManagementClient" id="urn:jaus:jss:core:ManagementClient" version="1.0" xmlns="urn:jaus:jsidl:1.0">
    <description>Client to management service</description>
    <assumptions>Messages may be delayed, lost or reordered.</assumptions>
    <references>
      <inherits_from name="accessControlClient" id="urn:jaus:jss:core:AccessControlClient" version="1.0"/>
    </references>
    <message_set>
      <input_set>
        <message_def name="ReportStatus" message_id="4002" is_command="false">
          <description xml:space="preserve"> 
            This message is used to report the current status of the sender of the message. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="ReportStatusRec" optional="false">
              <fixed_field name="Status" field_type="unsigned byte" field_units="one" optional="false">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="0" enum_const="INITIALIZE"/>
                  <value_enum enum_index="1" enum_const="READY"/>
                  <value_enum enum_index="2" enum_const="STANDBY"/>
                  <value_enum enum_index="3" enum_const="SHUTDOWN"/>
                  <value_enum enum_index="4" enum_const="FAILURE"/>
                  <value_enum enum_index="5" enum_const="EMERGENCY"/>
                </value_set>
              </fixed_field>
              <fixed_field name="Reserved" field_type="unsigned integer" field_units="one"
                optional="false" interpretation="This field is reserved for compatibility with previous
                versions of the Standard."/>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
      </input_set>
      <output_set>
        <message_def name="Shutdown" message_id="0002" is_command="true">
          <description xml:space="preserve"> 
            This message is used to cause the receiving component to free all of the resources allocated to its process by the system and then to shutdown. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body"/>
          <footer name="Footer"/>
        </message_def>
        <message_def name="Standby" message_id="0003" is_command="true">
          <description xml:space="preserve"> 
            This message is used to transition the receiving component to the standby state. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body"/>
          <footer name="Footer"/>
        </message_def>
        <message_def name="Resume" message_id="0004" is_command="true">
          <description xml:space="preserve"> 
            This message is used to transition the receiving component to the ready state. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body"/>
          <footer name="Footer"/>
        </message_def>
        <message_def name="Reset" message_id="0005" is_command="true">
          <description xml:space="preserve"> 
            This message is used to cause the receiving component to reinitialize. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body"/>
          <footer name="Footer"/>
        </message_def>
        <message_def name="SetEmergency" message_id="0006" is_command="true">
          <description xml:space="preserve"> 
            This message is used to alert the component to a safety critical situation. The component that sends the emergency command shall set the message priority to the safety critical priority range as defined by the Transport. Receive of the emergency command shall result in the component transitioning into the emergency state.
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="SetEmergencyRec" optional="false">
              <fixed_field name="EmergencyCode" field_type="unsigned short integer" field_units="one"
                optional="false">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="1" enum_const="STOP"/>
                </value_set>
              </fixed_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="ClearEmergency" message_id="0007" is_command="true">
          <description xml:space="preserve"> 
            This message shall notify the receiving component that the current emergency condition is to be reset and that the component shall transition back to the Ready or Standby state, provided that all emergency conditions have been cleared.
            JAUS currently defines only one emergency condition, the “Stop” condition.  Future versions of this document could define other emergency conditions. 
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body">
            <record name="ClearEmergencyRec" optional="false">
              <fixed_field name="EmergencyCode" field_type="unsigned short integer" field_units="one"
                optional="false">
                <value_set offset_to_lower_limit="false">
                  <value_enum enum_index="1" enum_const="STOP"/>
                </value_set>
              </fixed_field>
            </record>
          </body>
          <footer name="Footer"/>
        </message_def>
        <message_def name="QueryStatus" message_id="2002" is_command="false">
          <description xml:space="preserve">
            This message is used by clients of this service to query the state of this service.
          </description>
          <header name="JAUSApplicationLayerHeader">
            <record name="HeaderRec" optional="false">
              <fixed_field name="MessageID" field_type="unsigned short integer" field_units="one"
                optional="false" interpretation="A two byte field to hold the message ID of a message"/>
            </record>
          </header>
          <body name="Body"/>
          <footer name="Footer"/>
        </message_def>
      </output_set>
    </message_set>
    <internal_events_set>
      <event_def name="Initialized">
        <description>An internally generated event that marks the completion of the initialization
          cycle.</description>
        <header name="Header"/>
        <body name="Body"/>
        <footer name="Footer"/>
      </event_def>
    </internal_events_set>
    <protocol_behavior>
      <start state_machine_name="accessControlClient.eventsClient.transport.ReceiveFSM"
        state_name="Receiving.Ready.NotControlled.StateA.Init"/>
      <state_machine name="accessControlClient.eventsClient.transport.ReceiveFSM" interpretation="extending
        ReceiveFSM of base       service (transport)">
        <state name="Receiving" initial_state="Ready" interpretation="redefine state in order to
          extend">
          <state name="Ready" initial_state="NotControlled" interpretation="redefine state in order to
            extend">
            <state name="NotControlled" initial_state="StateA">
              <state name="StateA" initial_state="Init">
                <state name="Init">
                  <entry>
                    <action name="initialize" interpretation="Re-initialize the component's state
                      machines."/>
                  </entry>
                  <transition name="Initialized">
                    <simple>
                      <end_state state="Receiving.Ready.NotControlled.StateA.Standby"/>
                    </simple>
                  </transition>
                </state>
                <state name="Standby">
                  <!-- step 1 -->
                  <entry>
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'CreateEvent'"/>
                      <argument value="'QueryStatus'" interpretation="event for the query status message"/>
                      <argument value="'everyChange'" interpretation="event type must be 'every change'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 1...'"></argument>
                    </action>
                  </entry>
                  <!-- step 2 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="ConfirmEventRequest" value="msg"/>
                    <simple/>
                    <action name="storeEventInfo" interpretation="store the even't request id and event id">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 2...'"></argument>
                    </action>
                    <!-- step 3 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'accessControlClient.RequestControl'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 3...'"></argument>
                    </action>
                  </transition>
                  <!-- step 4 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="ConfirmControl" value="msg"/>
                    <guard condition="isControlAccepted( msg )"/>
                    <simple>
                      <end_state state="Receiving.Ready.Controlled.StateB.Standby"/>
                    </simple>
                    <action name="print">
                      <argument value="'completed step 4...'"></argument>
                    </action>
                  </transition>
                  <!-- step 5 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Standby')"/>
                    <simple/>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 5...'"></argument>
                    </action>
                  </transition>
                  <!-- step 20 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateA.Standby')"/>
                    <simple/>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 20...'"></argument>
                    </action>
                    <!-- step 21 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'Shutdown'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 21...'"></argument>
                    </action>
                  </transition>    
                  <!-- step 22 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateA.Shutdown')"/>
                    <simple>
                      <end_state state="Receiving.Ready.NotControlled.StateA.Shutdown"/>
                    </simple>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 22...'"></argument>
                    </action>
                  </transition>
                </state>
                <state name="Failure"/>
                <state name="Shutdown">
                  <entry>
                    <!-- step 23 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'CancelEvent'" interpretation="Send a cancel event for the stored event id and request id"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 23...'"></argument>
                    </action>
                  </entry>
                  <!-- step 24 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="ConfirmEventRequest" value="msg"/>
                    <guard condition="isEventCancelled( msg )"/>
                    <simple/>
                    <action name="print">
                      <argument value="'completed step 24...'"/>
                    </action>
                  </transition> 
                </state>
                <state name="Emergency">
                </state>
                <default_state>
                </default_state>
              </state>
            </state>
            <state name="Controlled" initial_state="StateB">
              <state name="StateB" initial_state="Standby">
                <state name="Standby">
                  <entry>
                    <!-- step 6 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'Resume'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 6...'"></argument>
                    </action>
                  </entry>
                  <!-- step 5 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Standby')"/>
                    <simple/>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 5...'"></argument>
                    </action>
                  </transition>
                  <!-- step 7 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Ready')"/>
                    <simple>
                      <end_state state="Receiving.Ready.Controlled.StateB.Ready"/>
                    </simple>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 7...'"></argument>
                    </action>
                    <!-- step 8 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'accessControlClient.RequestControl'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 8...'"></argument>
                    </action>
                  </transition>
                  <!-- step 11 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Emergency')"/>
                    <simple>
                      <end_state state="Receiving.Ready.Controlled.StateB.Emergency"/>
                    </simple>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 11...'"></argument>
                    </action>
                  </transition>
                </state>
                <state name="Ready">
                  <!-- step 9 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="ConfirmControl" value="msg"/>
                    <guard condition="isControlAccepted( msg )"/>
                    <simple/>
                    <action name="print">
                      <argument value="'Request Control while in ready state resulted in a correct response'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 9...'"></argument>
                    </action>
                    <!-- step 10 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'SetEmergency'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 10...'"></argument>
                    </action>
                  </transition>
                  <!-- step 19 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="RejectControl" value="msg"/>
                    <simple>
                      <end_state state="Receiving.Ready.NotControlled.StateA.Standby"/>
                    </simple>
                    <action name="print">
                      <argument value="'completed step 19...'"></argument>
                    </action>
                  </transition>
                  <!-- step 20 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateA.Standby')"/>
                    <simple/>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 20...'"></argument>
                    </action>
                    <!-- step 21 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'Shutdown'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 21...'"></argument>
                    </action>
                  </transition>
                </state>
                <state name="Emergency">
                    <entry>
                      <!-- step 12 -->
                      <action name="accessControlClient.eventsClient.transport.Send">
                        <argument value="'accessControlClient.RequestControl'"/>
                      </action>
                      <action name="print">
                        <argument value="'completed step 12...'"></argument>
                      </action>
                    </entry>
                  <!-- step 11 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Emergency')"/>
                    <simple>
                      <end_state state="Receiving.Ready.Controlled.StateB.Emergency"/>
                    </simple>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 11...'"></argument>
                    </action>
                  </transition>
                  <!-- step 13 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="ConfirmControl" value="msg"/>
                    <guard condition="! isControlAccepted( msg )"/>
                    <simple/>
                    <action name="print">
                      <argument value="'Request Control while in emergency state resulted in a correct response'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 13...'"></argument>
                    </action>
                    <!-- step 14 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'SetEmergency'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 14...'"></argument>
                    </action>
                  <!-- step 15 -->
                  <action name="accessControlClient.eventsClient.transport.Send">
                    <argument value="'ClearEmergency'"/>
                  </action>
                    <action name="print">
                      <argument value="'completed step 15...'"></argument>
                    </action>
                  <!-- step 16 -->
                  <action name="accessControlClient.eventsClient.transport.Send">
                    <argument value="'ClearEmergency'"/>
                  </action>
                    <action name="print">
                      <argument value="'completed step 16...'"></argument>
                    </action>
                  </transition>
                  <!-- step 17 -->
                  <transition name="accessControlClient.eventsClient.transport.Receive">
                    <parameter type="Event" value="msg"/>
                    <guard condition="isReportStatus( msg ) &amp;&amp; isServerState( msg, 'StateB.Ready')"/>
                    <simple>
                      <end_state state="Receiving.Ready.Controlled.StateB.Ready"/>
                    </simple>
                    <action name="printServerState" interpretation="print state reported in the report status message">
                      <argument value="msg"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 17...'"></argument>
                    </action>
                    <!-- step 18 -->
                    <action name="accessControlClient.eventsClient.transport.Send">
                      <argument value="'accessControlClient.ReleaseControl'"/>
                    </action>
                    <action name="print">
                      <argument value="'completed step 18...'"></argument>
                    </action>
                  </transition>                 
                </state>
                <default_state>
                </default_state>
              </state>
            </state>
          </state>
        </state>
      </state_machine>
    </protocol_behavior>
  </service_def>
</ns1:service_set>
