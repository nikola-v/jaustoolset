<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns1:service_set xmlns:ns1="urn:jaus:jsidl:plus" xmlns:version_1_1="urn:jaus:jsidl:1.1" xmlns:plus="urn:jaus:jsidl:plus" version="1.0" id="urn:core" name="Core" xmlns="urn:jaus:jsidl:1.0">
    <description></description>
    <service_def version="1.0" id="urn:jaus:jss:core:Transport" name="Transport">
        <description xml:space="preserve">The transport service acts as an interface to the JAUS transport layer. It models an abstract bi-directional communication channel (input queue and output queue) whose primary function is to provide the capability of sending messages to a single destination endpoint or broadcasting messages to all endpoints in the system, and to receive a message from any source endpoint. It also provides the capability to prioritize the delivery of sent messages. This service establishes a communication endpoint whose address is defined by a triple {SubsystemID, NodeID, ComponentID} as specified by the Send and Receive internal events. Other services that need to utilize the communication channel provided by the transport service must inherit from the transport service.</description>
        <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
        <references/>
        <message_set>
            <input_set/>
            <output_set/>
        </message_set>
        <internal_events_set>
            <event_def name="Send">
                <description xml:space="preserve">The Send event is used by a derived service to hand over the payload data that it needs to send to a specified destination endpoint via the transport layer. Upon receipt, this service prepares the message for delivery (marshals the message) as specified by the transport layer specification and attempts to deliver the encapsulated payload data to the destination endpoint.</description>
                <header name="Header"/>
                <body name="Body">
                    <record optional="false" name="SendRec">
                        <presence_vector field_type_unsigned="unsigned byte"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="DestSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="true" name="SrcSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="SrcNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SrcComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="Priority">
                            <value_set offset_to_lower_limit="false">
                                <value_range upper_limit_type="inclusive" upper_limit="3.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                <value_enum enum_const="LOW" enum_index="0"/>
                                <value_enum enum_const="NORMAL" enum_index="1"/>
                                <value_enum enum_const="HIGH" enum_index="2"/>
                                <value_enum enum_const="SAFETY" enum_index="3"/>
                            </value_set>
                        </fixed_field>
                        <variable_length_field field_format="JAUS MESSAGE" optional="false" name="MessagePayload">
                            <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </event_def>
            <event_def name="BroadcastLocal">
                <description xml:space="preserve">The Broadcast Local event is the same as the Send event except that this service sends the payload to all endpoints within the subsystem.</description>
                <header name="Header"/>
                <body name="Body">
                    <record optional="false" name="SendRec">
                        <presence_vector field_type_unsigned="unsigned byte"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="DestSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="true" name="SrcSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="SrcNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SrcComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="Priority">
                            <value_set offset_to_lower_limit="false">
                                <value_range upper_limit_type="inclusive" upper_limit="3.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                <value_enum enum_const="LOW" enum_index="0"/>
                                <value_enum enum_const="NORMAL" enum_index="1"/>
                                <value_enum enum_const="HIGH" enum_index="2"/>
                                <value_enum enum_const="SAFETY" enum_index="3"/>
                            </value_set>
                        </fixed_field>
                        <variable_length_field field_format="JAUS MESSAGE" optional="false" name="MessagePayload">
                            <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </event_def>
            <event_def name="BroadcastGlobal">
                <description xml:space="preserve">The Broadcast Global event is the same as the Send event except that this service sends the payload to all endpoints on all subsystems.</description>
                <header name="Header"/>
                <body name="Body">
                    <record optional="false" name="SendRec">
                        <presence_vector field_type_unsigned="unsigned byte"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="DestSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="DestComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="true" name="SrcSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="SrcNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SrcComponentID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="Priority">
                            <value_set offset_to_lower_limit="false">
                                <value_range upper_limit_type="inclusive" upper_limit="3.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                <value_enum enum_const="LOW" enum_index="0"/>
                                <value_enum enum_const="NORMAL" enum_index="1"/>
                                <value_enum enum_const="HIGH" enum_index="2"/>
                                <value_enum enum_const="SAFETY" enum_index="3"/>
                            </value_set>
                        </fixed_field>
                        <variable_length_field field_format="JAUS MESSAGE" optional="false" name="MessagePayload">
                            <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </event_def>
            <event_def name="Receive">
                <description xml:space="preserve">The Receive event is used by derived services to hand over the data that was sent by another service to an endpoint established by this service.</description>
                <header name="Header"/>
                <body name="Body">
                    <record optional="false" name="ReceiveRec">
                        <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="SrcSubsystemID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SrcNodeID"/>
                        <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SrcComponentID"/>
                        <variable_length_field field_format="JAUS MESSAGE" optional="false" name="MessagePayload">
                            <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                        </variable_length_field>
                    </record>
                </body>
                <footer name="Footer"/>
            </event_def>
        </internal_events_set>
        <protocol_behavior>
            <start state_name="Receiving" state_machine_name="Transport.ReceiveFSM"/>
            <start state_name="Sending" state_machine_name="Transport.SendFSM"/>
            <state_machine name="Transport.ReceiveFSM">
                <state name="Receiving">
                    <transition name="Receive">
                        <simple/>
                    </transition>
                </state>
            </state_machine>
            <state_machine name="Transport.SendFSM">
                <state name="Sending">
                    <transition name="Send">
                        <parameter value="msg" type="Send"/>
                        <simple/>
                        <action interpretation="Convert the destination address into an unsigned integer such that the ComponentID maps to the least significant byte, NodeID to the next least significant byte and SubsystemID maps onto the remaining two bytes of the integer." name="Enqueue">
                            <argument value="msg"/>
                        </action>
                    </transition>
                    <transition name="BroadcastLocal">
                        <parameter value="msg" type="BroadcastLocal"/>
                        <simple/>
                        <action interpretation="Package the message as specified by the transport layer specification and send it to all endpoints in the local subsystem." name="BroadcastLocalEnqueue">
                            <argument value="msg"/>
                        </action>
                    </transition>
                    <transition name="BroadcastGlobal">
                        <parameter value="msg" type="BroadcastGlobal"/>
                        <simple/>
                        <action interpretation="Package the message as specified by the transport layer specification and send it to all endpoints in on all subsystems." name="BroadcastGlobalEnqueue">
                            <argument value="msg"/>
                        </action>
                    </transition>
                </state>
            </state_machine>
        </protocol_behavior>
    </service_def>
    <service_def version="1.0" id="urn:jaus:jss:core:Events" name="Events">
        <description xml:space="preserve">This service is used to set up event notifications. Since this service does not contain any messages and data on which events can be setup, it is useful only when derived by other services that contain messages and data on which events can be defined.</description>
        <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
        <references>
            <inherits_from version="1.0" id="urn:jaus:jss:core:Transport" name="Transport"/>
        </references>
        <message_set>
            <input_set>
                <message_def is_command="true" message_id="01F0" name="CreateEvent">
                    <description xml:space="preserve">This message is used to set up an event. Field 1 is a local request ID that the event provider returns in the Confirm or Reject message.  Field 2 is the Event Type, which allows the requester  to specify the type of event, where Periodic specifies that the event is a service connection request and should not be queued, in which case field 3 (Requested periodic rate) must be set to a non-zero value.  Event type of Every Change specifies that the corresponding Report message should be sent every time the data associated with that message changes. Field 4 contains the size of the Query message that is to specify the contents of the Report.  Field 5 contains the Query message (including its two byte header).</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="CreateEventRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="RequestID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventType">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="Periodic (SC)" enum_index="0"/>
                                    <value_enum enum_const="Every change" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field field_units="hertz" field_type="unsigned short integer" optional="false" name="RequestedPeriodicRate">
                                <scale_range integer_function="round" real_upper_limit="1,092.00" real_lower_limit="0.00"/>
                            </fixed_field>
                            <variable_length_field field_format="JAUS MESSAGE" optional="false" name="QueryMessage">
                                <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                            </variable_length_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="01F1" name="UpdateEvent">
                    <description xml:space="preserve">The Update Event message allows the requester to request a rate or change.  The format is the same as the Create Event, only with the addition of Event ID field to specify the event that needs updating.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="UpdateEventRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="RequestID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventType">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="Periodic (SC)" enum_index="0"/>
                                    <value_enum enum_const="Every change" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field field_units="hertz" field_type="unsigned short integer" optional="false" name="RequestedPeriodicRate">
                                <scale_range integer_function="round" real_upper_limit="1,092.00" real_lower_limit="0.00"/>
                            </fixed_field>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                            <variable_length_field field_format="JAUS MESSAGE" optional="false" name="QueryMessage">
                                <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                            </variable_length_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="01F2" name="CancelEvent">
                    <description xml:space="preserve">The Cancel Event message is used by the requester to cancel and/or request deletion of the specified event.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="CancelEventRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="RequestID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="21F0" name="QueryEvents">
                    <description xml:space="preserve">The Query Events message is used to request detail on events. Queries can be made by message ID, event type or Event ID.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <variant optional="false" name="QueryEventsVar">
                            <vtag_field field_type_unsigned="unsigned byte" max_count="4" min_count="0"/>
                            <record optional="false" name="MessageIDRec">
                                <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageCode"/>
                            </record>
                            <record optional="false" name="EventTypeRec">
                                <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventType">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_const="Periodic (SC)" enum_index="0"/>
                                        <value_enum enum_const="Every change" enum_index="1"/>
                                    </value_set>
                                </fixed_field>
                            </record>
                            <record optional="false" name="EventIDRec">
                                <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                            </record>
                            <record optional="false" name="AllEventsRec">
                                <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="AllEvents">
                                    <value_set offset_to_lower_limit="false">
                                        <value_range upper_limit_type="inclusive" upper_limit="0.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                    </value_set>
                                </fixed_field>
                            </record>
                        </variant>
                    </body>
                    <footer name="Footer"/>
                </message_def>
            </input_set>
            <output_set>
                <message_def is_command="false" message_id="01F3" name="ConfirmEventRequest">
                    <description xml:space="preserve">The Confirm Event message is used to confirm an Event has been created, updated, or cancelled.  Field 1 represents the Request ID from the Create, Update, or Cancel message that initiated this message.  The Request ID's scope is local to the requesting client only.  Field 2, Event ID, is a globally unique ID that is established for the event. Field 3 is used to specify the closest rate that the service can provide if it cannot match the requested rate.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ConfirmEventRequestRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="RequestID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                            <fixed_field field_units="hertz" field_type="unsigned short integer" optional="false" name="ConfirmedPeriodicRate">
                                <scale_range integer_function="round" real_upper_limit="1,092.00" real_lower_limit="0.00"/>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="01F4" name="RejectEventRequest">
                    <description xml:space="preserve">The Reject Event Request message is used to reject an Event creation, update or cancellation. Field 2 represents the Request ID from the Create, Update, or Cancel message that initiated this message. The Request ID's scope is local to the requesting client only. Field 4, Event ID, is a globally unique ID that is established for the event.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="RejectEventRequestRec">
                            <presence_vector field_type_unsigned="unsigned byte"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="RequestID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="true" name="ResponseCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="periodic events not supported" enum_index="1"/>
                                    <value_enum enum_const="change based events not supported" enum_index="2"/>
                                    <value_enum enum_const="connection refused" enum_index="3"/>
                                    <value_enum enum_const="invalid event setup" enum_index="4"/>
                                    <value_enum enum_const="message not supported" enum_index="5"/>
                                    <value_enum enum_const="error, invalid event ID for update event               request" enum_index="6"/>
                                </value_set>
                            </fixed_field>
                            <fixed_length_string optional="true" string_length="80" name="ErrorMessage"/>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="41F0" name="ReportEvents">
                    <description xml:space="preserve">This message is used to report the active event requests that match the requirements provided in the QueryEvents message.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <list optional="false" name="EventList">
                            <count_field field_type_unsigned="unsigned byte" max_count="255" min_count="0"/>
                            <record optional="false" name="ReportEventRec">
                                <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventType">
                                    <value_set offset_to_lower_limit="false">
                                        <value_enum enum_const="Periodic (SC)" enum_index="0"/>
                                        <value_enum enum_const="Every change" enum_index="1"/>
                                    </value_set>
                                </fixed_field>
                                <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                                <variable_length_field field_format="JAUS MESSAGE" optional="false" name="QueryMessage">
                                    <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                                </variable_length_field>
                            </record>
                        </list>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="41F1" name="Event">
                    <description xml:space="preserve">The Event message is sent when event is triggered. It includes the Event ID and a sequence number to allow the client to keep track of event processing.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="EventRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="EventID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="SequenceNumber"/>
                            <variable_length_field field_format="JAUS MESSAGE" optional="false" name="ReportMessage">
                                <count_field field_type_unsigned="unsigned integer" max_count="2147483647" min_count="2"/>
                            </variable_length_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
            </output_set>
        </message_set>
        <internal_events_set>
            <event_def name="EventOccurred">
                <description xml:space="preserve">Received when an event occurs.</description>
                <header name="Header"/>
                <body name="Body"/>
                <footer name="Footer"/>
            </event_def>
            <event_def name="EventError">
                <description xml:space="preserve">Received when an event error occurs.</description>
                <header name="Header"/>
                <body name="Body"/>
                <footer name="Footer"/>
            </event_def>
        </internal_events_set>
        <protocol_behavior is_stateless="false">
            <start state_name="Receiving.Ready" state_machine_name="Events.Transport.ReceiveFSM"/>
            <start state_name="Sending" state_machine_name="Events.Transport.SendFSM"/>
            <state_machine name="Events.Transport.ReceiveFSM">
                <state initial_state="Ready" name="Receiving">
                    <entry/>
                    <exit/>
                    <state name="Ready">
                        <transition name="transport.Receive">
                            <parameter value="msg" type="QueryEvents"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <version_1_1:internal/>
                            <action interpretation="Send Report Events message to the               component that sent the query" name="transport.Send">
                                <argument value=" 'ReportEvents' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="CreateEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard interpretation="True if parameters are supported and the event does not already exist." condition="isSupported(msg) &amp;&amp; ! eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="create the event" name="createEvent">
                                <argument value="msg"/>
                            </action>
                            <action interpretation="Send Confirm Event Request               message" name="transport.Send">
                                <argument value=" 'ConfirmEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="CreateEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard interpretation="True if parameters are supported and the event already exists." condition="isSupported(msg) &amp;&amp; eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="update the event" name="updateEvent">
                                <argument value="msg"/>
                            </action>
                            <action interpretation="Send Confirm Event Request               message" name="transport.Send">
                                <argument value=" 'ConfirmEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="CreateEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard interpretation="True if parameters are not               supported." condition="! isSupported(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="Send Reject Event Request message" name="transport.Send">
                                <argument value=" 'RejectEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="UpdateEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard interpretation="True if parameters are supported and if the specified event exists" condition="isSupported(msg) &amp;&amp; eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="update the event" name="updateEvent">
                                <argument value="msg"/>
                            </action>
                            <action interpretation="Send Confirm Event Request               message" name="transport.Send">
                                <argument value=" 'ConfirmEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="UpdateEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard condition="! isSupported(msg) || ! eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="Send Reject Event Request message" name="transport.Send">
                                <argument value=" 'RejectEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="CancelEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard condition="! eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="Send Reject Event Request message" name="transport.Send">
                                <argument value=" 'RejectEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="transport.Receive">
                            <parameter value="msg" type="CancelEvent"/>
                            <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                            <guard condition="eventExists(msg)"/>
                            <version_1_1:internal/>
                            <action interpretation="cancel the event" name="cancelEvent">
                                <argument value="msg"/>
                            </action>
                            <action interpretation="Send Confirm Event Request               message" name="transport.Send">
                                <argument value=" 'ConfirmEventRequest' "/>
                                <argument value="msg"/>
                                <argument value="transportData"/>
                            </action>
                        </transition>
                        <transition name="EventOccurred">
                            <guard condition="eventExists()"/>
                            <version_1_1:internal/>
                            <action interpretation="send an event notification" name="sendEvent"/>
                        </transition>
                        <transition name="EventError">
                            <guard condition="eventExists()"/>
                            <version_1_1:internal/>
                            <action interpretation="Send Reject Event Request message" name="sendRejectEventRequest"/>
                        </transition>
                    </state>
                    <plus:mxCell vertex="1" value="Receiving;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="17">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="24">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="17" source="24" parent="16" id="25">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.ReceiveFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="16">
                    <plus:mxGeometry height="400.0" width="850.0" y="0.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
            <state_machine name="Events.Transport.SendFSM">
                <state name="Sending">
                    <entry/>
                    <exit/>
                    <plus:mxCell vertex="1" value="Sending;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="20">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="26">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="20" source="26" parent="19" id="27">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.SendFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="19">
                    <plus:mxGeometry height="400.0" width="850.0" y="400.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
        </protocol_behavior>
    </service_def>
    <service_def version="1.0" id="urn:jaus:jss:core:AccessControl" name="AccessControl">
        <description xml:space="preserve">The Access Control service offers a basic interface for acquiring preemptable exclusive control to one or more related services that utilize this function. Once the exclusive control is established, the related services shall only execute commands originating from the controlling component. The authority code parameter of this service is used for preemption and is to be set equal to that of its controlling client. This service always grants control to the highest authority client that is requesting exclusive control. Commands from all other clients are ignored unless from a client with higher authority. This service maintains two values, a default value and a current value of a field called authority code. The default value is the value that the service is pre-configured with. Access is provided to clients based on the value of their authority code in comparison to the current value of this service.</description>
        <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
        <references>
            <inherits_from version="1.0" id="urn:jaus:jss:core:Events" name="Events"/>
        </references>
        <message_set>
            <input_set>
                <message_def is_command="true" message_id="000D" name="RequestControl">
                    <description xml:space="preserve">This message is used to request interruptible control of the receiving component.  Once control is established, the receiving component shall only execute commands from the sending component.  The authority code parameter is to be set equal to that of the sending component.  The receiving component must always accept the control of the highest authority component that is requesting uninterruptible control.  Commands from all other components are ignored unless from a component with higher authority.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="RequestControlRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="AuthorityCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_range upper_limit_type="inclusive" upper_limit="255.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="000E" name="ReleaseControl">
                    <description xml:space="preserve">This message is used to relinquish uninterruptible control of the receiving component.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="200D" name="QueryControl">
                    <description xml:space="preserve">This message is used by clients to query the current control state of this service.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="2001" name="QueryAuthority">
                    <description xml:space="preserve">This message is used by clients to query the current value of the authority code of this service.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0001" name="SetAuthority">
                    <description xml:space="preserve">This message shall set the command authority of the receiving component.  The authority bits range in value from 0 to 255 with 255 being the highest.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="authorityRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="AuthorityCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_range upper_limit_type="inclusive" upper_limit="255.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="2003" name="QueryTimeout">
                    <description xml:space="preserve">This message is used by clients of this service to query the timeout period of this service.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
            </input_set>
            <output_set>
                <message_def is_command="false" message_id="400D" name="ReportControl">
                    <description xml:space="preserve">This message is used to report the current state of control of this service.  If the serivce is in the Controlled state, this message reports the ID of the controlling component. The ID fields shall be set to zero (0) if this service is in the NotControlled state..</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ReportControlRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="SubsystemID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="NodeID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="ComponentID"/>
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="AuthorityCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_range upper_limit_type="inclusive" upper_limit="255.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="0010" name="RejectControl">
                    <description xml:space="preserve">The Reject Control message is used to notify a component that control has been released (response code = 0), or a request to release control could not be processed (response code = 1).</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="RejectControlRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="ResponseCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="CONTROL_RELEASED" enum_index="0"/>
                                    <value_enum enum_const="NOT_AVAILABLE" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="000F" name="ConfirmControl">
                    <description xml:space="preserve">The Confirm Control message is used to notify a component that it accepts control from that component (or not).  When control has been granted, response code of 0, the component under control will only execute messages from the controlling component until control is released or interrupted.  When the requesting component has lower authority than the current controlling entity, the response will be 2.  For components not supporting interruptible control, or if the component is engaged in other operations that would prevent this service from performing its actions to grant control, the response code value of 1 can be used.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ConfirmControlRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="ResponseCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="CONTROL_RELEASED" enum_index="0"/>
                                    <value_enum enum_const="NOT_AVAILABLE" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="4001" name="ReportAuthority">
                    <description xml:space="preserve">This message is used to report the current command authority.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ReportAuthorityRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="AuthorityCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_range upper_limit_type="inclusive" upper_limit="255.00" lower_limit_type="inclusive" lower_limit="0.00"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="4003" name="ReportTimeout">
                    <description xml:space="preserve">This message is used to report the timeout period of this message.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ReportTimoutRec">
                            <fixed_field field_units="second" field_type="unsigned byte" optional="false" name="Timeout">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="TIMEOUT_FEATURE _DISABLED" enum_index="0"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
            </output_set>
        </message_set>
        <internal_events_set>
            <event_def name="Timeout">
                <description xml:space="preserve">Occurs when access is not re-acquired periodically</description>
                <header name="Header"/>
                <body name="Body"/>
                <footer name="Footer"/>
            </event_def>
        </internal_events_set>
        <protocol_behavior is_stateless="false">
            <start state_name="Receiving.Ready.NotControlled" state_machine_name="AccessControl.Events.Transport.ReceiveFSM"/>
            <start state_name="Sending" state_machine_name="AccessControl.Events.Transport.SendFSM"/>
            <state_machine name="AccessControl.Events.Transport.ReceiveFSM">
                <state initial_state="Ready" name="Receiving">
                    <entry/>
                    <exit/>
                    <state initial_state="NotControlled" name="Ready">
                        <entry/>
                        <exit/>
                        <state name="NotControlled">
                            <entry interpretation="Set the services current authority value to the default               authority value">
                                <action name="init"/>
                            </entry>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions." condition="! isControlAvailable()"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a confirm component control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'NOT_AVAILABLE' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the base                 authority                 code of this service is greater than the authority code of the client                 service that triggered the corresponding transition and if this service or services                 related to this service are not engaged in other operations that would prevent this                 service from performing its actions" condition="! isDefaultAuthorityGreater(msg) &amp;&amp;                 isControlAvailable()"/>
                                <simple>
                                    <end_state state="Receiving.Ready.Controlled"/>
                                </simple>
                                <action interpretation="Store the address of the client that                 sent the message that caused this action to be executed" name="StoreAddress">
                                    <argument value="transportData"/>
                                </action>
                                <action interpretation="Set the current authority value of this                 service to the specified authority" name="SetAuthority">
                                    <argument value="msg"/>
                                </action>
                                <action interpretation="Reset the timer" name="ResetTimer"/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'CONTROL_ACCEPTED' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the                 default authority code of this service is greater than the authority code of the                 client service that triggered the corresponding transition" condition="isDefaultAuthorityGreater(msg)"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'INSUFFICIENT_AUTHORITY' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped release                 control message" value="msg" type="ReleaseControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Reject Control message to the client requesting release" name="events.transport.Send">
                                    <argument value=" 'RejectControl' "/>
                                    <argument value=" 'transportData' "/>
                                    <argument value=" 'CONTROL_RELEASED' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped query control                 message" value="msg" type="QueryControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Report Control message                 with the                 specified control value" name="events.transport.Send">
                                    <argument value=" 'ReportControl' "/>
                                    <argument value=" 'transportData' "/>
                                </action>
                            </transition>
                        </state>
                        <state name="Controlled">
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions." condition="! isControlAvailable()"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'NOT_AVAILABLE' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped set authority                 message" value="msg" type="SetAuthority"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the value of the                 authority                  code received from the client is less than or equal to                 the current authority value                  of this service, , but greater than or                 equal to the receiving components default authority,                 and if the                 message that triggered the transition is received from the                  client                 that is in control of this service" condition="isAuthorityValid(msg) &amp;&amp; isControllingClient(msg)                 &amp;&amp; isControlAvailable()"/>
                                <version_1_1:internal/>
                                <action interpretation="Set the current authority value of this                 service to the specified authority" name="SetAuthority">
                                    <argument value="msg"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the current authority value of                 this service is less than the authority code of the client service that triggered                 the corresponding transition, and if the message that triggered the transition is                 not received from the client that is in control of this service" condition="isCurrentAuthorityLess(msg) &amp;&amp; !                 isControllingClient(msg)"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Reject Control message to                 current                 controlling client" name="events.transport.Send">
                                    <argument interpretation="Send a Reject Control message with the specified response code to the client that currently has control." value=" 'RejectControlToController' "/>
                                    <argument value=" 'CONTROL_RELEASED' "/>
                                </action>
                                <action interpretation="Store the address of the client that                 sent                   the message that caused this action to be executed" name="StoreAddress">
                                    <argument value="msg"/>
                                </action>
                                <action interpretation="Set the current authority value of this                 service to the specified authority" name="SetAuthority">
                                    <argument value="msg"/>
                                </action>
                                <action interpretation="Reset the timer" name="ResetTimer"/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'CONTROL_ACCEPTED' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the current authority value of                 this service is not less than the authority code of the client service that                 triggered the corresponding transition, and if the message that triggered                 the transition is received from the client that is in control of this service" condition="! isCurrentAuthorityLess(msg) &amp;&amp; !                 isControllingClient(msg)"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'INSUFFICIENT_AUTHORITY' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="RequestControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the default authority code of                 this service is not greater than the authority code of the client service that                 triggered the corresponding transition, and if the message that triggered the                 transition is received from the client that is in control of this service" condition="! isDefaultAuthorityGreater(msg) &amp;&amp;                 isControllingClient(msg)"/>
                                <version_1_1:internal/>
                                <action interpretation="Reset the timer" name="ResetTimer"/>
                                <action interpretation="Set the current authority value of this                 service to the specified authority" name="SetAuthority"/>
                                <action interpretation="Send a confirm control                 message with the specified response code to requesting client" name="events.transport.Send">
                                    <argument value=" 'ConfirmControl' "/>
                                    <argument value=" 'CONTROL_ACCEPTED' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped query control                 message" value="msg" type="QueryControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Report Control message                 with the                 specified control value" name="events.transport.Send">
                                    <argument value=" 'ReportControl' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped request                 control message" value="msg" type="ReleaseControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if this service or                 services related to this service are engaged in other operations that would                 prevent this service from performing its actions." condition="! isControlAvailable()"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a reject control                 message                 with the specified response code to the client requesting release" name="events.transport.Send">
                                    <argument value=" 'RejectControl' "/>
                                    <argument value=" 'NOT_AVAILABLE' "/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped release                 control message" value="msg" type="ReleaseControl"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the message that                 triggered the transition is                 received from the client that is in control of this                 service, and if                 this service or services related to this service are not engaged in other                 operations that would prevent this service from performing its actions" condition="isControllingClient(msg) &amp;&amp; isControlAvailable()"/>
                                <simple>
                                    <end_state state="Receiving.Ready.NotControlled"/>
                                </simple>
                                <action interpretation="Send a Reject Control message with the specified response code to the client requesting release" name="events.transport.Send">
                                    <argument value=" 'RejectControl' "/>
                                    <argument value="transportData"/>
                                    <argument value=" 'CONTROL_RELEASED' "/>
                                </action>
                            </transition>
                            <transition name="transport.Receive">
                                <parameter value="msg" type="RequestControl"/>
                                <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                                <guard interpretation="True if the default authority code of this                 service is greater than the authority code of the client service that triggered the                 corresponding transition, and if the message that triggered the transition is                 received from the client that is in control of this service" condition="isDefaultAuthorityGreater(msg) &amp;&amp;                 isControllingClient(msg)"/>
                                <simple>
                                    <end_state state="Receiving.Ready.NotControlled"/>
                                </simple>
                                <action interpretation="Send a Reject Control message" name="transport.Send">
                                    <argument interpretation="Send a Reject Control message with the specified response code to the client that currently has control" value=" 'RejectControl' "/>
                                    <argument value=" 'CONTROL_RELEASED'"/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="Timeout">
                                <guard interpretation="True if this service or                 services related to this service are not engaged in other operations that would                 prevent this service from performing its actions." condition="isControlAvailable()"/>
                                <simple>
                                    <end_state state="Receiving.Ready.NotControlled"/>
                                </simple>
                                <action interpretation="Send a Reject Control message to                 controlling client" name="events.transport.Send">
                                    <argument interpretation="Send a Reject Control message with the specified response code to the client that currently has control" value=" 'RejectControlToController' "/>
                                    <argument value=" 'CONTROL_RELEASED' "/>
                                </action>
                            </transition>
                        </state>
                        <default_state>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped query                 authority message" value="msg" type="QueryAuthority"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Report Authority message                 to                 querying client" name="events.transport.Send">
                                    <argument value=" 'ReportAuthority' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                            <transition name="events.transport.Receive">
                                <parameter interpretation="enveloped query                 timeout message" value="msg" type="QueryTimeout"/>
                                <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                <version_1_1:internal/>
                                <action interpretation="Send a Report Timeout message to                 querying client" name="events.transport.Send">
                                    <argument value=" 'ReportTimeout' "/>
                                    <argument value="transportData"/>
                                </action>
                            </transition>
                        </default_state>
                        <plus:mxCell vertex="1" value="Ready;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="17" id="28">
                            <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <plus:mxCell vertex="1" value="Receiving;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="17">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="24">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="17" source="24" parent="16" id="25">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.ReceiveFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="16">
                    <plus:mxGeometry height="400.0" width="850.0" y="0.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
            <state_machine name="AccessControl.Events.Transport.SendFSM">
                <state name="Sending">
                    <entry/>
                    <exit/>
                    <plus:mxCell vertex="1" value="Sending;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="20">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="26">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="20" source="26" parent="19" id="27">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.SendFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="19">
                    <plus:mxGeometry height="400.0" width="850.0" y="400.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
        </protocol_behavior>
    </service_def>
    <service_def version="1.0" id="urn:jaus:jss:core:Management" name="Management">
        <description xml:space="preserve">The Management Service provides a state machine for component life-cycle management to help clients understand how the component will react to commands and queries.</description>
        <assumptions xml:space="preserve">Messages may be delayed, lost or reordered.</assumptions>
        <references>
            <inherits_from version="1.0" id="urn:jaus:jss:core:AccessControl" name="AccessControl"/>
        </references>
        <message_set>
            <input_set>
                <message_def is_command="true" message_id="0002" name="Shutdown">
                    <description xml:space="preserve">This message is used to cause the receiving component to free all of the resources allocated to its process by the system and then to shutdown.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0003" name="Standby">
                    <description xml:space="preserve">This message is used to transition the receiving component to the standby state.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0004" name="Resume">
                    <description xml:space="preserve">This message is used to transition the receiving component to the ready state.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0005" name="Reset">
                    <description xml:space="preserve">This message is used to cause the receiving component to reinitialize.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0006" name="SetEmergency">
                    <description xml:space="preserve">This message is used to alert the component to a safety critical situation. The component that sends the emergency command shall set the message priority to the safety critical priority range as defined by the Transport. Receive of the emergency command shall result in the component transitioning into the emergency state.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="SetEmergencyRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="EmergencyCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="STOP" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="true" message_id="0007" name="ClearEmergency">
                    <description xml:space="preserve">This message shall notify the receiving component that the current emergency condition is to be reset and that the component shall transition back to the Ready or Standby state, provided that all emergency conditions have been cleared. JAUS currently defines only one emergency condition, the "Stop" condition.  Future versions of this document could define other emergency conditions.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ClearEmergencyRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="EmergencyCode">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="STOP" enum_index="1"/>
                                </value_set>
                            </fixed_field>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
                <message_def is_command="false" message_id="2002" name="QueryStatus">
                    <description xml:space="preserve">This message is used by clients of this service to query the state of this service.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body"/>
                    <footer name="Footer"/>
                </message_def>
            </input_set>
            <output_set>
                <message_def is_command="false" message_id="4002" name="ReportStatus">
                    <description xml:space="preserve">This message is used to report the current status of the sender of the message.</description>
                    <header name="JAUSApplicationLayerHeader">
                        <record optional="false" name="HeaderRec">
                            <fixed_field field_units="one" field_type="unsigned short integer" optional="false" name="MessageID"/>
                        </record>
                    </header>
                    <body name="Body">
                        <record optional="false" name="ReportStatusRec">
                            <fixed_field field_units="one" field_type="unsigned byte" optional="false" name="Status">
                                <value_set offset_to_lower_limit="false">
                                    <value_enum enum_const="INITIALIZE" enum_index="0"/>
                                    <value_enum enum_const="READY" enum_index="1"/>
                                    <value_enum enum_const="STANDBY" enum_index="2"/>
                                    <value_enum enum_const="SHUTDOWN" enum_index="3"/>
                                    <value_enum enum_const="FAILURE" enum_index="4"/>
                                    <value_enum enum_const="EMERGENCY" enum_index="5"/>
                                </value_set>
                            </fixed_field>
                            <fixed_field field_units="one" field_type="unsigned integer" optional="false" name="Reserved"/>
                        </record>
                    </body>
                    <footer name="Footer"/>
                </message_def>
            </output_set>
        </message_set>
        <internal_events_set>
            <event_def name="Initialized">
                <description xml:space="preserve">An internally generated event that marks the completion of the initialization cycle.</description>
                <header name="Header"/>
                <body name="Body"/>
                <footer name="Footer"/>
            </event_def>
            <event_def name="Failure">
                <description xml:space="preserve">An internally generated event that marks forces the component to a failure state.</description>
                <header name="Header"/>
                <body name="Body"/>
                <footer name="Footer"/>
            </event_def>
        </internal_events_set>
        <protocol_behavior>
            <start state_name="Receiving.Ready.NotControlled.StateA.Init" state_machine_name="Management.AccessControl.Events.Transport.ReceiveFSM"/>
            <start state_name="Sending" state_machine_name="Management.AccessControl.Events.Transport.SendFSM"/>
            <state_machine name="Management.AccessControl.Events.Transport.ReceiveFSM">
                <state initial_state="Ready" name="Receiving">
                    <entry/>
                    <exit/>
                    <state initial_state="NotControlled" name="Ready">
                        <entry/>
                        <exit/>
                        <state initial_state="StateA" name="NotControlled">
                            <entry interpretation="Set the services current authority value to the default               authority value">
                                <action name="init"/>
                            </entry>
                            <exit/>
                            <state name="Standby"/>
                            <state initial_state="Init" name="StateA">
                                <state name="Init">
                                    <entry>
                                        <action interpretation="Re-initialize the component's state                     machines." name="initialize"/>
                                    </entry>
                                    <transition name="Initialized">
                                        <simple>
                                            <end_state state="Receiving.Ready.NotControlled.Standby"/>
                                        </simple>
                                    </transition>
                                </state>
                                <state name="Failure"/>
                                <state name="Shutdown"/>
                                <state name="Emergency">
                                    <transition interpretation="If                   multiple emergency conditions exist, then all conditions that have been set must                   be specifically cleared before the component can transition out of the emergency                   state." name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped clear                     emergency                     message" value="msg" type="ClearEmergency"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if the sender                     of                     the message that triggered the transition is in the list                     of clients that have set an                     emergency condition." condition="isIDStored( transportData )"/>
                                        <pop/>
                                        <action interpretation="Remove the sender of the message that                     caused                     this action from the list of clients that have an                     emergency condition." name="DeleteID">
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped                     set authority message" value="msg" type="SetAuthority"/>
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.Timeout">
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="Failure">
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped shutdown message" value="msg" type="Shutdown"/>
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped reset message" value="msg" type="Reset"/>
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped request                     control message" value="msg" type="RequestControl"/>
                                        <version_1_1:internal/>
                                        <action interpretation="Send a confirm                     component control                     message with the specified response code" name="accessControl.events.transport.Send">
                                            <argument value=" 'ConfirmControl' "/>
                                            <argument value=" 'NOT_AVAILABLE' "/>
                                        </action>
                                    </transition>
                                </state>
                                <default_state>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped query status                     message" value="msg" type="QueryStatus"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <version_1_1:internal/>
                                        <action interpretation="Send a Report                     Status message with the                     current status" name="accessControl.events.transport.Send">
                                            <argument value=" 'ReportStatus' "/>
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped set emergency                     message" value="msg" type="SetEmergency"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <push>
                                            <end_state state="Receiving.Ready.NotControlled.StateA.Emergency"/>
                                        </push>
                                        <action interpretation="Add the sender of the message that caused                     this                     action to the list of clients that have an emergency                     condition." name="StoreID">
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="Failure">
                                        <simple>
                                            <end_state state="Receiving.Ready.NotControlled.StateA.Failure"/>
                                        </simple>
                                    </transition>
                                </default_state>
                            </state>
                            <plus:mxCell vertex="1" value="NotControlled;entry: init(  );" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="28" id="41">
                                <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                            </plus:mxCell>
                        </state>
                        <state initial_state="StateB" name="Controlled">
                            <entry/>
                            <exit/>
                            <state initial_state="Standby" name="StateB">
                                <state name="Standby">
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped resume message" value="msg" type="Resume"/>
                                        <parameter interpretation="enveloped                     resume                     message" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if                     the                     message that triggered the transition is received from                     the client that is in control                     of this service" condition="isControllingClient( transportData )"/>
                                        <simple>
                                            <end_state state="Receiving.Ready.Controlled.StateB.Ready"/>
                                        </simple>
                                    </transition>
                                </state>
                                <state name="Ready">
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped standby message" value="msg" type="Standby"/>
                                        <parameter interpretation="enveloped                     resume                     message" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if                     the                     message that triggered the transition is received from                     the client that is in control                     of this service" condition="isControllingClient( transportData )"/>
                                        <simple>
                                            <end_state state="Receiving.Ready.Controlled.StateB.Standby"/>
                                        </simple>
                                    </transition>
                                </state>
                                <state name="Emergency">
                                    <transition interpretation="If                   multiple emergency conditions exist, then all conditions that have been set must                   be specifically cleared before the component can transition out of the emergency                   state." name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped clear                     emergency                     message" value="msg" type="ClearEmergency"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if the sender                     of                     the message that triggered the transition is in the list                     of clients that have set an                     emergency condition." condition="isIDStored( transportData )"/>
                                        <pop/>
                                        <action interpretation="Remove the sender of the message that                     caused                     this action from the list of clients that have an                     emergency                     condition." name="DeleteID">
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped request                     control message" value="msg" type="RequestControl"/>
                                        <version_1_1:internal/>
                                        <action interpretation="Send a confirm component control                     message with the specified response code" name="transport.Send">
                                            <argument value=" 'ConfirmControl' "/>
                                            <argument value=" 'NOT_AVAILABLE' "/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped request                     control message" value="msg" type="ReleaseControl"/>
                                        <version_1_1:internal/>
                                        <action interpretation="Send a reject control                     message with the specified response code" name="transport.Send">
                                            <argument value=" 'RejectControl' "/>
                                            <argument value=" 'NOT_AVAILABLE' "/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped                     set authority message" value="msg" type="SetAuthority"/>
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.Timeout">
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="Failure">
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped shutdown message" value="msg" type="Shutdown"/>
                                        <version_1_1:internal/>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped reset message" value="msg" type="Reset"/>
                                        <version_1_1:internal/>
                                    </transition>
                                </state>
                                <default_state>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped query status                     message" value="msg" type="QueryStatus"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <version_1_1:internal/>
                                        <action interpretation="Send a Report Status message with                     the                     current status" name="transport.Send">
                                            <argument value=" 'ReportStatus' "/>
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped set emergency                     message" value="msg" type="SetEmergency"/>
                                        <parameter interpretation="transport data" value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <push>
                                            <end_state state="Receiving.Ready.Controlled.StateB.Emergency"/>
                                        </push>
                                        <action interpretation="Add the sender of the message that caused                     this                     action to the list of clients that have an emergency                     condition." name="StoreID">
                                            <argument value="transportData"/>
                                        </action>
                                    </transition>
                                    <transition name="Failure">
                                        <simple>
                                            <end_state state="Receiving.Ready.NotControlled.StateA.Failure"/>
                                        </simple>
                                        <action interpretation="Send a Reject Control message to the                     client that is currently controlling this service." name="transport.Send">
                                            <argument value=" 'RejectControl' "/>
                                            <argument value=" 'CONTROL_RELEASED' "/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped reset message" value="msg" type="Reset"/>
                                        <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if                     the                     message that triggered the transition is received from                     the client that is in control                     of this service" condition="isControllingClient(  transportData )"/>
                                        <simple>
                                            <end_state state="Receiving.Ready.NotControlled.StateA.Init"/>
                                        </simple>
                                        <action interpretation="Send a Reject Control message to the                     client that is currently controlling this service." name="transport.Send">
                                            <argument value=" 'RejectControl' "/>
                                            <argument value="transportData"/>
                                            <argument value=" 'CONTROL_RELEASED' "/>
                                        </action>
                                    </transition>
                                    <transition name="accessControl.events.transport.Receive">
                                        <parameter interpretation="enveloped shutdown message" value="msg" type="Shutdown"/>
                                        <parameter value="transportData" type="Receive.Body.ReceiveRec"/>
                                        <guard interpretation="True if                     the                     message that triggered the transition is received from                     the client that is in control                     of this service" condition="isControllingClient(  transportData )"/>
                                        <simple>
                                            <end_state state="Receiving.Ready.NotControlled.StateA.Shutdown"/>
                                        </simple>
                                        <action interpretation="Send a Reject Control message to the                     client that is currently controlling this service." name="transport.Send">
                                            <argument value=" 'RejectControl' "/>
                                            <argument value="transportData"/>
                                            <argument value=" 'CONTROL_RELEASED' "/>
                                        </action>
                                    </transition>
                                </default_state>
                            </state>
                            <plus:mxCell vertex="1" value="Controlled;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="28" id="42">
                                <plus:mxGeometry height="80.0" width="80.0" y="60.0" x="30.0" as="geometry"/>
                            </plus:mxCell>
                        </state>
                        <default_state>
                            <plus:mxCell vertex="1" value="default_state" style="defaultState;;strokeColor=#BC1212;fontColor=#BC1212" parent="28" id="43">
                                <plus:mxGeometry height="80.0" width="80.0" y="0.0" x="100.0" as="geometry"/>
                            </plus:mxCell>
                        </default_state>
                        <plus:mxCell vertex="1" value="Ready;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="17" id="28">
                            <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <plus:mxCell vertex="1" value="Receiving;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="17">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="16" id="24">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="17" source="24" parent="16" id="25">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.ReceiveFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="16">
                    <plus:mxGeometry height="400.0" width="850.0" y="0.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
            <state_machine name="Management.AccessControl.Events.Transport.SendFSM">
                <state name="Sending">
                    <entry/>
                    <exit/>
                    <plus:mxCell vertex="1" value="Sending;" style="state;;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="20">
                        <plus:mxGeometry height="80.0" width="80.0" y="30.0" x="30.0" as="geometry"/>
                    </plus:mxCell>
                </state>
                <pseudo_start_state>
                    <state>
                        <plus:mxCell vertex="1" value="" style="pseudoStartState;;fillColor=#BC1212;strokeColor=#BC1212;fontColor=#BC1212" parent="19" id="26">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </state>
                    <transition>
                        <plus:mxCell edge="1" value="" style="simpleTransition;;strokeColor=#BC1212;fontColor=#BC1212" target="20" source="26" parent="19" id="27">
                            <plus:mxGeometry height="20.0" width="20.0" y="-10.0" x="-10.0" as="geometry"/>
                        </plus:mxCell>
                    </transition>
                </pseudo_start_state>
                <plus:mxCell vertex="1" value="name = Events.Transport.SendFSM; isStateless = false;" style="finiteStateMachine;;strokeColor=#BC1212;fontColor=#BC1212" parent="1" id="19">
                    <plus:mxGeometry height="400.0" width="850.0" y="400.0" x="0.0" as="geometry"/>
                </plus:mxCell>
            </state_machine>
        </protocol_behavior>
    </service_def>
</ns1:service_set>
