<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../jsidl11/jaus_service_interface_definition_language.rnc" type="compact"?>
<service_def xmlns="urn:jaus:jsidl:1.0" name="Events" id="urn:sae:as4:jss:core:Events"
  version="1.0">
  <description>This service is used to set up event notifications. Since this service does not
    contain any messages and data on which events can be setup, it is useful only when derived by
    other services that contain messages and data on which events can be defined.</description>
  <assumptions>Messages may be delayed, lost or reordered.</assumptions>
  <references>
    <client_of name="transport" id="urn:sae:as4:jss:core:Transport" version="0.1"/>
  </references>
  <declared_type_set name="Types">
    <declared_type_set_ref name="core" id="urn:sae:as4:jss:core:MessageSet" version="0.1"/>
  </declared_type_set>
  <message_set>
    <input_set>
      <declared_message_def name="CreateEvent" declared_type_ref="core.CommandClass.CreateEvent"/>
      <declared_message_def name="UpdateEvent" declared_type_ref="core.CommandClass.UpdateEvent"/>
      <declared_message_def name="CancelEvent" declared_type_ref="core.CommandClass.CancelEvent"/>
      <declared_message_def name="QueryEvents" declared_type_ref="core.QueryClass.QueryEvents"/>
    </input_set>
    <output_set>
      <declared_message_def name="ConfirmEvent" declared_type_ref="core.CommandClass.ConfirmEvent"/>
      <declared_message_def name="RejectEvent" declared_type_ref="core.CommandClass.RejectEvent"/>
      <declared_message_def name="ReportEvents" declared_type_ref="core.InformClass.ReportEvents"/>
      <declared_message_def name="Event" declared_type_ref="core.InformClass.Event"/>
    </output_set>
  </message_set>
  <internal_events_set>
    <event_def name="EventOccured">
      <description> Received when an event occurs. </description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
    <event_def name="EventError">
      <description> Received when an event error occurs. </description>
      <header name="Header"/>
      <body name="Body"/>
      <footer name="Footer"/>
    </event_def>
  </internal_events_set>
  <protocol_behavior is_stateless="false">
    <start state_machine_name="Events" state_name="Ready"/>
    <state_machine name="Events">
      <state name="Ready">
        <transition name="transport.Receive">
          <parameter type="QueryEvents" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <simple/>
          <action name="transport.Send" interpretation="Send Report Events message to the
            component that sent the query">
            <argument value=" 'ReportEvents' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="CreateEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="! isSupported(msg)" interpretation="True if parameters are not
            supported."/>
          <simple/>
          <action name="transport.Send" interpretation="Send Reject Event Request message">
            <argument value=" 'RejectEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="CreateEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="isSupported(msg)" interpretation="True if parameters are supported."/>
          <simple/>
          <action name="createEvent" interpretation="create the event">
            <argument value="msg"/>
          </action>
          <action name="transport.Send" interpretation="Send Confirm Event Request
            message">
            <argument value=" 'ConfirmEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="UpdateEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="eventExists(msg) &amp;&amp; isSupported(msg)"
            interpretation="True if parameters are supported and if the specified event exists"/>
          <simple/>
          <action name="transport.Send" interpretation="Send Confirm Event Request
            message">
            <argument value=" 'ConfirmEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="UpdateEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="! eventExists(msg) || ! isSupported(msg)"/>
          <simple/>
          <action name="transport.Send" interpretation="Send Reject Event Request message">
            <argument value=" 'RejectEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="CancelEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="! eventExists(msg)"/>
          <simple/>
          <action name="transport.Send" interpretation="Send Reject Event Request message">
            <argument value=" 'RejectEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
        <transition name="transport.Receive">
          <parameter type="CancelEvent" value="msg"/>
          <parameter type="ReceiveRec" value="transportData"/>
          <guard condition="eventExists(msg)"/>
          <simple/>
          <action name="transport.Send" interpretation="Send Confirm Event Request
            message">
            <argument value=" 'ConfirmEventRequest' "/>
            <argument value="msg"/>
            <argument value="transportData"/>
          </action>
        </transition>
      </state>
    </state_machine>
  </protocol_behavior>
</service_def>
