/***********           LICENSE HEADER   *******************************JAUS Tool SetCopyright (c)  2010, United States GovernmentAll rights reserved.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.Neither the name of the United States Government nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *********************  END OF LICENSE ***********************************/package src.urn_DeVivo_jaus_services_LoopbackDef_1_0;import junit.textui.TestRunner;import junit.framework.TestCase;public class Loopback2_utst extends TestCase {    class TestFlagsClass {        public byte LastState;        public byte[] StateHistory = new byte[255];    }    class LoopbackStateMachnImpl extends LoopbackDef_LoopbackStateMachn {        LoopbackStateMachnImpl() {            TFC = new TestFlagsClass();        }        /// Action Methods        public void EnteredReadyStateAction() {            TFC.StateHistory[TFC.LastState++] = 1;        }        public void ExitedReadyStateAction() {            TFC.StateHistory[TFC.LastState++] = 2;        }        public void FromReadyToReadyInternalAction() {            TFC.StateHistory[TFC.LastState++] = 3;        }        public void FromReadyToReadySimpleAction() {            TFC.StateHistory[TFC.LastState++] = 4;        }        public void FromStandbyToReadyAction() {            TFC.StateHistory[TFC.LastState++] = 5;        }        /// Guard Methods        TestFlagsClass TFC;    }    private LoopbackStateMachnImpl fsm;    public Loopback2_utst(String name) {        super(name);    }    @Override    protected void setUp() {        // Create the FSM and call the entry action manually        fsm = new LoopbackStateMachnImpl();        fsm.TFC.LastState = 0;        int i;        for (i = 0; i < 255; i++) {            fsm.TFC.StateHistory[i] = (byte) 255;        }        fsm.context.FromStandbyToReadyMsgTransition();        fsm.context.FromReadyToReadySimpleMsgTransition();        fsm.context.FromReadyToReadyInternalMsgTransition();        fsm.context.FromReadyToReadySimpleMsgTransition();        fsm.context.FromReadyToReadyInternalMsgTransition();    }    public void testProtocol() {        int i;        System.out.println("");        System.out.print("Test message: ");        System.out.println(String.format("fsm.fsm.TFC.LastState, %d\n", fsm.TFC.LastState));        for (i = 0; i < fsm.TFC.LastState + 2; i++) {            System.out.println(String.format("fsm.TFC.StateHistory[%d], %d\n", i, fsm.TFC.StateHistory[i]));        }        assertEquals((byte) 5, fsm.TFC.StateHistory[0]);        assertEquals((byte) 1, fsm.TFC.StateHistory[1]);        assertEquals((byte) 2, fsm.TFC.StateHistory[2]);        assertEquals((byte) 4, fsm.TFC.StateHistory[3]);        assertEquals((byte) 1, fsm.TFC.StateHistory[4]);        assertEquals((byte) 3, fsm.TFC.StateHistory[5]);        assertEquals((byte) 2, fsm.TFC.StateHistory[6]);        assertEquals((byte) 4, fsm.TFC.StateHistory[7]);        assertEquals((byte) 1, fsm.TFC.StateHistory[8]);        assertEquals((byte) 3, fsm.TFC.StateHistory[9]);    }    public static void main(String[] args) {        System.out.println("Executing suite JTSLoopbackDefMessageTest 2");        TestRunner.run(Loopback2_utst.class);        System.out.println("Completed suite JTSLoopbackDefMessageTest 2");        System.out.println("------------------------------------------------");    }}