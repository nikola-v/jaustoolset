/***********           LICENSE HEADER   *******************************JAUS Tool SetCopyright (c)  2010, United States GovernmentAll rights reserved.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.Neither the name of the United States Government nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *********************  END OF LICENSE ***********************************/import java.nio.ByteBuffer;import src.urn_org_jts_test_Optional1_1_0.Messages.MsgIn;import junit.textui.TestRunner;import junit.framework.TestCase;public class Optional1_utst extends TestCase {    private long getUnsignedInt(ByteBuffer buff, int offset) {        return (long) (buff.getInt(offset) & 0xFFFFFFFFL);    }    private int getUnsignedShort(ByteBuffer buff, int offset) {        return (int) (buff.getShort(offset) & 0xFFFF);    }    private short getUnsignedByte(ByteBuffer buff, int offset) {        return (short) (buff.get(offset) & 0xFF);    }    // assert if the contents of two byte buffers are equal, given first offset into buff one and length following    // that offset.  comparison is against contents of buff2 from offset zero to offset length-1.    public void assertBufferSliceEqual(ByteBuffer data1, ByteBuffer data2, int first, int length) {        for (int i = 0; i < length; ++i) {            assertEquals(data2.get(i), data1.get(first + i));        }    }    public void assertBuffersEqual(ByteBuffer data1, ByteBuffer data2, int length) {        for (int i = 0; i < length; ++i) {            assertEquals(data2.get(i), data1.get(i));        }    }    public Optional1_utst(String name) {        super(name);    }    public void testSetGetOperations() {        ByteBuffer data = ByteBuffer.allocate(10);        for (byte i = 0; i <= 9; ++i) {            data.put(i, i);        }        System.out.println("");        System.out.print("[executing test (testSetGetOperations)(TP_3.3.5.1)]: ");	  // Test initial state	  MsgIn msgIn1 = new MsgIn();	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 0 );	  assertEquals( msgIn1.getBody().getSequence().getRecord1().getPresenceVector() , 0 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord1().setField1((byte)1);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 1 );	  assertEquals( msgIn1.getBody().getSequence().getRecord1().getPresenceVector() , 1 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord2().getVariableLengthField1().set((long)10, data);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 3 );	  assertEquals( msgIn1.getBody().getSequence().getRecord2().getPresenceVector() , 2 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  for (int i=0; i<10; i++)		msgIn1.getBody().getSequence().getRecord3().getArray1().setElement1(i, data.array()[i]);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 7 );	  assertEquals( msgIn1.getBody().getSequence().getRecord3().getPresenceVector() , 4 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 15 );	  assertEquals( msgIn1.getBody().getSequence().getRecord4().getPresenceVector() , 8 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord5().setFixedLengthString1("Hello World!");	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 31 );	  assertEquals( msgIn1.getBody().getSequence().getRecord5().getPresenceVector() , 16 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord6().getVariableField1().setIndex((short)0);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 63 );	  assertEquals( msgIn1.getBody().getSequence().getRecord6().getPresenceVector() , 32 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord7().setVariableLengthString1("I'm Gumby, Dammit!");	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 127 );	  assertEquals( msgIn1.getBody().getSequence().getRecord7().getPresenceVector() , 64 );	  // Set the first entry in the first optional record, then ensure all the PVs got set correctly	  msgIn1.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, (long)10, data);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 255 );	  assertEquals( msgIn1.getBody().getSequence().getRecord8().getPresenceVector() , 128 );	  // Add an element to the optional list	  MsgIn.Body.Sequence.List.Record rec1 = new MsgIn.Body.Sequence.List.Record();	  msgIn1.getBody().getSequence().getList().addElement( rec1 );	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 511 );	  assertEquals( msgIn1.getBody().getSequence().getList().getElement(0).getPresenceVector() , 0 );	  	  // Nested sequences...	  msgIn1.getBody().getSequence().getSubsequence().getRecord().getVariableField1().setIndex((short)0);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 1023 );	  assertEquals( msgIn1.getBody().getSequence().getSubsequence().getPresenceVector() , 1 );	  assertEquals( msgIn1.getBody().getSequence().getSubsequence().getRecord().getPresenceVector() , 32 );	  // Variants	  msgIn1.getBody().getSequence().getVariant().setFieldValue((short)1);	  assertEquals( msgIn1.getBody().getSequence().getPresenceVector() , 2047 );	  assertEquals( msgIn1.getBody().getSequence().getVariant().getRecord().getPresenceVector() , 0 );    }    public void testEncodeToSpec() {        System.out.println("");        System.out.print("[executing test (testEncodeToSpec)]");        // buffer for encoding        ByteBuffer buff = ByteBuffer.allocate(10000);        // *** first test message: activate only Record1, activate all fields inside of record1.        ByteBuffer data1 = ByteBuffer.allocate(10);        ByteBuffer data2 = ByteBuffer.allocate(5);        for (int i = 0; i < 10; ++i) {            data1.put(i, (byte)(10+i));        }        for (int i = 0; i < 5; ++i) {            data2.put(i, (byte)(20+i));        }        MsgIn msg1 = new MsgIn();        msg1.getHeader().getHeaderRec().setMessageID(999);        msg1.getBody().getSequence().getRecord1().setField1((byte)77);        msg1.getBody().getSequence().getRecord1().getVariableLengthField1().set(10, data1);        msg1.getBody().getSequence().getRecord1().getArray1().setElement1(1, (byte)10);        msg1.getBody().getSequence().getRecord1().getArray1().setElement1(3, (byte)20);        msg1.getBody().getSequence().getRecord1().getArray1().setElement1(5, (byte)30);        msg1.getBody().getSequence().getRecord1().getArray1().setElement1(7, (byte)40);        msg1.getBody().getSequence().getRecord1().getArray1().setElement1(9, (byte)50);        msg1.getBody().getSequence().getRecord1().getBitField1().setSubfield1((short)1);        msg1.getBody().getSequence().getRecord1().setFixedLengthString1("ABCDE");        msg1.getBody().getSequence().getRecord1().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg1.getBody().getSequence().getRecord1().setVariableLengthString1("hello world");        msg1.getBody().getSequence().getRecord1().getVariableFormatField1().set((short)0, 5, data2);        msg1.encode(buff, 0);        // offset 0:    ushort w/ message ID        assertEquals(999, getUnsignedShort(buff, 0));        // offset 2:    ushort w/ Sequence's presence vector - should be 1 indicating only first        // record is present        assertEquals(1, getUnsignedShort(buff, 2));        // offset 4: unsigned byte w/ Record1's presence vector, 8 bits all on, 255        assertEquals(255, getUnsignedByte(buff, 4));        // offset 5:    signed byte, Field1 fixed field        assertEquals(77, buff.get(5));        // offset 6:    uint, variableLengthField1 count field...        assertEquals(10, getUnsignedByte(buff, 6));        // offset 10-19: 10-byte variableLengthField1.        assertBufferSliceEqual(buff, data1, 10, 10);        // offset 20: Array1[0]        assertEquals(0, buff.get(20));        // offset 21: Array1[1]        assertEquals(10, buff.get(21));        // offset 22: Array1[2]        assertEquals(0, buff.get(22));        // offset 23: Array1[3]        assertEquals(20, buff.get(23));        // offset 25: Array1[5]        assertEquals(30, buff.get(25));        // offset 27: Array1[7]        assertEquals(40, buff.get(27));        // offset 29: Array1[9]        assertEquals(50, buff.get(29));        // offset 30: BitField1, single unsigned byte        assertEquals(1, getUnsignedByte(buff, 30));        // offset 31: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(65, getUnsignedByte(buff, 31));        // offset 32: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(66, getUnsignedByte(buff, 32));        // offset 33: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(67, getUnsignedByte(buff, 33));        // offset 34: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(68, getUnsignedByte(buff, 34));        // offset 35: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(69, getUnsignedByte(buff, 35));        // offset 36: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 36));        // offset 45: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 45));        // offset 46: type/units enum of VariableField1, single byte        assertEquals(1, buff.get(46));        // offset 47: contents of VariableField1        assertEquals(33, buff.get(47));        // offset 48: 2-byte unsigned short, count field for VariableLengthString1        assertEquals(11, getUnsignedShort(buff, 48));        // offset 50-60: 11 characters of VariableLengthString1 "hello world"        assertEquals(104, getUnsignedByte(buff, 50));        assertEquals(101, getUnsignedByte(buff, 51));        assertEquals(108, getUnsignedByte(buff, 52));        assertEquals(108, getUnsignedByte(buff, 53));        assertEquals(111, getUnsignedByte(buff, 54));        assertEquals(32, getUnsignedByte(buff, 55));        assertEquals(119, getUnsignedByte(buff, 56));        assertEquals(111, getUnsignedByte(buff, 57));        assertEquals(114, getUnsignedByte(buff, 58));        assertEquals(108, getUnsignedByte(buff, 59));        assertEquals(100, getUnsignedByte(buff, 60));        // offset 61: format field of VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 61));        // offset 62: count field of VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 62));        // offset 66-70: 5 byte data of VariableFormatField1        assertBufferSliceEqual(buff, data2, 66, 5);        buff.clear();        // *** 2nd test message, activate Record 2, Record 4, Record 6, Record 8, activate different        // fields within each record.        MsgIn msg2 = new MsgIn();        msg2.getHeader().getHeaderRec().setMessageID(999);        msg2.getBody().getSequence().getRecord2().setField1((byte)77);        msg2.getBody().getSequence().getRecord2().getVariableLengthField1().set(10, data1);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(1, (byte)10);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(3, (byte)20);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(5, (byte)30);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(7, (byte)40);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)50);        msg2.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);        msg2.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        msg2.getBody().getSequence().getRecord6().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg2.getBody().getSequence().getRecord8().setVariableLengthString1("hello world");        msg2.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, 5, data2);        msg2.encode(buff, 0);        // offset 0:   ushort w/ msg ID        assertEquals(999, getUnsignedShort(buff, 0));        // offset 2:   ushort w/ Sequence pv        assertEquals(170, getUnsignedShort(buff, 2));        // offset 4:   ubyte w/ Record2 pv        assertEquals(3, getUnsignedByte(buff, 4));        // offset 5:   byte w/ Record2.Field1        assertEquals(77, buff.get(5));        // offset 6:   uint w/ Record2.VariableLengthField1 count field        assertEquals(10, getUnsignedByte(buff, 6));        // offset 10-19: ubyte data of Record2.VariableLengthField1        assertBufferSliceEqual(buff, data1, 10, 10);        // offset 20:   ubyte w/ Record4 pv        assertEquals(12, getUnsignedByte(buff, 20));        // offset 21:   byte, Record4.Array1[0]        assertEquals(0, buff.get(21));        // offset 22:   byte, Record4.Array1[1]        assertEquals(10, buff.get(22));        // offset 23:   byte, Record4.Array1[2]        assertEquals(0, buff.get(23));        // offset 29:   byte, Record4.Array1[8]        assertEquals(0, buff.get(29));        // offset 30:   byte, Record4.Array1[9]        assertEquals(50, buff.get(30));        // offset 31:   byte, Record4.BitField1        assertEquals(1, getUnsignedByte(buff,31));        // offset 32:   ubyte w/ Record6 pv        assertEquals(48, getUnsignedByte(buff,32));        // offset 33: 15-byte Record6.FixedLengthString1.  first 5 chars: "ABCDE"        assertEquals(65, getUnsignedByte(buff, 33));        // offset 34: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(66, getUnsignedByte(buff, 34));        // offset 35: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(67, getUnsignedByte(buff, 35));        // offset 36: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(68, getUnsignedByte(buff, 36));        // offset 37: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(69, getUnsignedByte(buff, 37));        // offset 38: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 38));        // offset 47: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 47));        // offset 48: type/units enum of VariableField1, single byte        assertEquals(1, buff.get(48));        // offset 49: byte contents of VariableField1        assertEquals(33, buff.get(49));        // offset 50:   ubyte w/ Record8 pv        assertEquals(192, getUnsignedByte(buff, 50));        // offset 51: 2-byte unsigned short, count field for Record8.VariableLengthString1        assertEquals(11, getUnsignedShort(buff, 51));        // offset 53-63: 11 characters of Record8.VariableLengthString1 "hello world"        assertEquals(104, getUnsignedByte(buff, 53));        assertEquals(101, getUnsignedByte(buff, 54));        assertEquals(108, getUnsignedByte(buff, 55));        assertEquals(108, getUnsignedByte(buff, 56));        assertEquals(111, getUnsignedByte(buff, 57));        assertEquals(32, getUnsignedByte(buff, 58));        assertEquals(119, getUnsignedByte(buff, 59));        assertEquals(111, getUnsignedByte(buff, 60));        assertEquals(114, getUnsignedByte(buff, 61));        assertEquals(108, getUnsignedByte(buff, 62));        assertEquals(100, getUnsignedByte(buff, 63));        // offset 64: format field of Record8.VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 64));        // offset 65: count field of Record8.VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 65));        // offset 69-73: 5 byte data of Record8.VariableFormatField1        assertBufferSliceEqual(buff, data2, 69, 5);        buff.clear();        // 3rd msg: activate record 3, List, and Variant, and activate the record        // inside List and Variant, activate all fields inside each record.        MsgIn msg3 = new MsgIn();        msg3.getHeader().getHeaderRec().setMessageID(999);        MsgIn.Body.Sequence.Record3 rec3 = msg3.getBody().getSequence().getRecord3();        rec3.setField1((byte)77);        rec3.getVariableLengthField1().set(10, data1);        rec3.getArray1().setElement1(1, (byte)10);        rec3.getArray1().setElement1(3, (byte)20);        rec3.getArray1().setElement1(5, (byte)30);        rec3.getArray1().setElement1(7, (byte)40);        rec3.getArray1().setElement1(9, (byte)50);        rec3.getBitField1().setSubfield1((short)1);        rec3.setFixedLengthString1("ABCDE");        rec3.getVariableField1().setMeterAsUnsignedByteAt1((short)33);        rec3.setVariableLengthString1("hello world");        rec3.getVariableFormatField1().set((short)0, 5, data2);	    MsgIn.Body.Sequence.List.Record listrec = new MsgIn.Body.Sequence.List.Record();	    msg3.getBody().getSequence().getList().addElement( listrec );        listrec.setField1((byte)77);        listrec.getVariableLengthField1().set(10, data1);        listrec.getArray1().setElement1(1, (byte)60);        listrec.getArray1().setElement1(3, (byte)70);        listrec.getArray1().setElement1(5, (byte)80);        listrec.getArray1().setElement1(7, (byte)90);        listrec.getArray1().setElement1(9, (byte)100);        listrec.getBitField1().setSubfield1((short)1);        listrec.setFixedLengthString1("FGHIJK");        listrec.getVariableField1().setMeterAsUnsignedByteAt1((short)44);        listrec.setVariableLengthString1("aabbccddeeff");        listrec.getVariableFormatField1().set((short)0, 5, data2);        // Variants        msg3.getBody().getSequence().getVariant().setFieldValue((short)1); // option 1: Record        MsgIn.Body.Sequence.Variant.Record varrec = msg3.getBody().getSequence().getVariant().getRecord();        varrec.setField1((byte)99);        varrec.getVariableLengthField1().set(10, data1);        varrec.getArray1().setElement1(1, (byte)110);        varrec.getArray1().setElement1(3, (byte)120);        varrec.getArray1().setElement1(5, (byte)130);        varrec.getArray1().setElement1(7, (byte)140);        varrec.getArray1().setElement1(9, (byte)150);        varrec.getBitField1().setSubfield1((short)1);        varrec.setFixedLengthString1("LMNOPQR");        varrec.getVariableField1().setMeterAsUnsignedByteAt1((short)55);        varrec.setVariableLengthString1("hello world");        varrec.getVariableFormatField1().set((short)0, 5, data2);        msg3.encode(buff, 0);        // offset 0:    ushort w/ message ID        assertEquals(999, getUnsignedShort(buff, 0));        // offset 2:    ushort w/ Sequence's presence vector - 1284 indicates record 3, list, variant present        assertEquals(1284, getUnsignedShort(buff, 2));        // offset 4: unsigned byte w/ Record3's presence vector, 8 bits all on, 255        assertEquals(255, getUnsignedByte(buff, 4));        // offset 5:    signed byte, Record3.Field1 fixed field        assertEquals(77, buff.get(5));        // offset 6:    uint, Record3.variableLengthField1 count field...        assertEquals(10, getUnsignedByte(buff, 6));        // offset 10-19: 10-byte Record3.variableLengthField1.        assertBufferSliceEqual(buff, data1, 10, 10);        // offset 20: Record3.Array1[0]        assertEquals(0, buff.get(20));        // offset 21: Record3.Array1[1]        assertEquals(10, buff.get(21));        // offset 22: Record3.Array1[2]        assertEquals(0, buff.get(22));        // offset 23: Record3.Array1[3]        assertEquals(20, buff.get(23));        // offset 25: Record3.Array1[5]        assertEquals(30, buff.get(25));        // offset 27: Record3.Array1[7]        assertEquals(40, buff.get(27));        // offset 29: Record3.Array1[9]        assertEquals(50, buff.get(29));        // offset 30: Record3.BitField1, single unsigned byte        assertEquals(1, getUnsignedByte(buff, 30));        // offset 31: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(65, getUnsignedByte(buff, 31));        // offset 32: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(66, getUnsignedByte(buff, 32));        // offset 33: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(67, getUnsignedByte(buff, 33));        // offset 34: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(68, getUnsignedByte(buff, 34));        // offset 35: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(69, getUnsignedByte(buff, 35));        // offset 36: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 36));        // offset 45: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 45));        // offset 46: type/units enum of Record3.VariableField1, single byte        assertEquals(1, buff.get(46));        // offset 47: contents of Record3.VariableField1        assertEquals(33, buff.get(47));        // offset 48: 2-byte unsigned short, count field for Record3.VariableLengthString1        assertEquals(11, getUnsignedShort(buff, 48));        // offset 50-60: 11 characters of VariableLengthString1 "hello world"        assertEquals(104, getUnsignedByte(buff, 50));        assertEquals(101, getUnsignedByte(buff, 51));        assertEquals(108, getUnsignedByte(buff, 52));        assertEquals(108, getUnsignedByte(buff, 53));        assertEquals(111, getUnsignedByte(buff, 54));        assertEquals(32, getUnsignedByte(buff, 55));        assertEquals(119, getUnsignedByte(buff, 56));        assertEquals(111, getUnsignedByte(buff, 57));        assertEquals(114, getUnsignedByte(buff, 58));        assertEquals(108, getUnsignedByte(buff, 59));        assertEquals(100, getUnsignedByte(buff, 60));        // offset 61: format field of VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 61));        // offset 62: count field of VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 62));        // offset 66-70: 5 byte data of VariableFormatField1        assertBufferSliceEqual(buff, data2, 66, 5);        // *** list and record inside list ***        // offset 71: ubyte count field for list == 1        assertEquals(1, getUnsignedByte(buff, 71));        // offset 72: ubyte presence vector for List.Record        assertEquals(255, getUnsignedByte(buff, 72));        // offset 73:    signed byte, Record3.Field1 fixed field        assertEquals(77, buff.get(73));        // offset 74:    uint, Record3.variableLengthField1 count field...        assertEquals(10, getUnsignedByte(buff, 74));        // offset 78-87: 10-byte Record3.variableLengthField1.        assertBufferSliceEqual(buff, data1, 78, 10);        // offset 88: Record3.Array1[0]        assertEquals(0, buff.get(88));        // offset 89: Record3.Array1[1]        assertEquals(60, buff.get(89));        // offset 90: Record3.Array1[2]        assertEquals(0, buff.get(90));        // offset 91: Record3.Array1[3]        assertEquals(70, buff.get(91));        // offset 93: Record3.Array1[5]        assertEquals(80, buff.get(93));        // offset 95: Record3.Array1[7]        assertEquals(90, buff.get(95));        // offset 97: Record3.Array1[9]        assertEquals(100, buff.get(97));        // offset 98: Record3.BitField1, single unsigned byte        assertEquals(1, getUnsignedByte(buff, 98));        // offset 99: 15-byte fixed length string.  first 6 chars: "FGHIJK"        assertEquals(70, getUnsignedByte(buff, 99));        // offset 100: 15-byte fixed length string.        assertEquals(71, getUnsignedByte(buff, 100));        // offset 101: 15-byte fixed length string.        assertEquals(72, getUnsignedByte(buff, 101));        // offset 102: 15-byte fixed length string.        assertEquals(73, getUnsignedByte(buff, 102));        // offset 103: 15-byte fixed length string.        assertEquals(74, getUnsignedByte(buff, 103));        // offset 104: 15-byte fixed length string.        assertEquals(75, getUnsignedByte(buff, 104));        // offset 105: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 105));        // offset 113: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 113));        // offset 114: type/units enum of Record3.VariableField1, single byte        assertEquals(1, buff.get(114));        // offset 115: contents of Record3.VariableField1        assertEquals(44, buff.get(115));        // offset 116: 2-byte unsigned short, count field for Record3.VariableLengthString1        assertEquals(12, getUnsignedShort(buff, 116));        // offset 118-129: 12 characters of VariableLengthString1 "aabbccddeeff"        assertEquals(97, getUnsignedByte(buff, 118));        assertEquals(97, getUnsignedByte(buff, 119));        assertEquals(98, getUnsignedByte(buff, 120));        assertEquals(98, getUnsignedByte(buff, 121));        assertEquals(99, getUnsignedByte(buff, 122));        assertEquals(99, getUnsignedByte(buff, 123));        assertEquals(100, getUnsignedByte(buff, 124));        assertEquals(100, getUnsignedByte(buff, 125));        assertEquals(101, getUnsignedByte(buff, 126));        assertEquals(101, getUnsignedByte(buff, 127));        assertEquals(102, getUnsignedByte(buff, 128));        assertEquals(102, getUnsignedByte(buff, 129));        // offset 130: format field of VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 130));        // offset 131: count field of VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 131));        // offset 135-139: 5 byte data of VariableFormatField1        assertBufferSliceEqual(buff, data2, 135, 5);        // *** variant and record inside variant ***        // offset 140: ubyte vtag field for variant        assertEquals(1, getUnsignedByte(buff, 140));        // offset 141: ubyte presence vector for Variant.Record.        assertEquals(255, getUnsignedByte(buff, 141));        // offset 142:    signed byte, Record3.Field1 fixed field        assertEquals(99, buff.get(142));        // offset 143:    uint, Record3.variableLengthField1 count field...        assertEquals(10, getUnsignedByte(buff, 143));        // offset 147-156: 10-byte Record3.variableLengthField1.        assertBufferSliceEqual(buff, data1, 147, 10);        // offset 157: Record3.Array1[0]        assertEquals(0, getUnsignedByte(buff, 157));        // offset 158: Record3.Array1[1]        assertEquals(110, getUnsignedByte(buff, 158));        // offset 159: Record3.Array1[2]        assertEquals(0, getUnsignedByte(buff, 159));        // offset 160: Record3.Array1[3]        assertEquals(120, getUnsignedByte(buff, 160));        // offset 162: Record3.Array1[5]        assertEquals(130, getUnsignedByte(buff, 162));        // offset 164: Record3.Array1[7]        assertEquals(140, getUnsignedByte(buff, 164));        // offset 166: Record3.Array1[9]        assertEquals(150, getUnsignedByte(buff, 166));        // offset 167: Record3.BitField1, single unsigned byte        assertEquals(1, getUnsignedByte(buff, 167));        // offset 168: 15-byte fixed length string.  first 7 chars: "LMNOPQR"        assertEquals(76, getUnsignedByte(buff, 168));        // offset 169: 15-byte fixed length string.        assertEquals(77, getUnsignedByte(buff, 169));        // offset 170: 15-byte fixed length string.        assertEquals(78, getUnsignedByte(buff, 170));        // offset 171: 15-byte fixed length string.        assertEquals(79, getUnsignedByte(buff, 171));        // offset 172: 15-byte fixed length string.        assertEquals(80, getUnsignedByte(buff, 172));        // offset 173: 15-byte fixed length string.        assertEquals(81, getUnsignedByte(buff, 173));        // offset 174: 15-byte fixed length string.        assertEquals(82, getUnsignedByte(buff, 174));        // offset 175: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 175));        // offset 182: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 182));        // offset 183: type/units enum of Record3.VariableField1, single byte        assertEquals(1, buff.get(183));        // offset 184: contents of Record3.VariableField1        assertEquals(55, buff.get(184));        // offset 185: 2-byte unsigned short, count field for Record3.VariableLengthString1        assertEquals(11, getUnsignedShort(buff, 185));        // offset 50-60: 11 characters of VariableLengthString1 "hello world"        assertEquals(104, getUnsignedByte(buff, 187));        assertEquals(101, getUnsignedByte(buff, 188));        assertEquals(108, getUnsignedByte(buff, 189));        assertEquals(108, getUnsignedByte(buff, 190));        assertEquals(111, getUnsignedByte(buff, 191));        assertEquals(32, getUnsignedByte(buff, 192));        assertEquals(119, getUnsignedByte(buff, 193));        assertEquals(111, getUnsignedByte(buff, 194));        assertEquals(114, getUnsignedByte(buff, 195));        assertEquals(108, getUnsignedByte(buff, 196));        assertEquals(100, getUnsignedByte(buff, 197));        // offset 61: format field of VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 198));        // offset 62: count field of VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 199));        // offset 66-70: 5 byte data of VariableFormatField1        assertBufferSliceEqual(buff, data2, 203, 5);        buff.clear();        // 4th msg: activate the subsequence, activate only some fields inside subsequence's record...        MsgIn msg4 = new MsgIn();        msg4.getHeader().getHeaderRec().setMessageID(999);        MsgIn.Body.Sequence.Subsequence.Record sseqRec =            msg4.getBody().getSequence().getSubsequence().getRecord();        sseqRec.setField1((byte)77);        sseqRec.getVariableLengthField1().set(10, data1);        sseqRec.getArray1().setElement1(1, (byte)10);        sseqRec.getArray1().setElement1(3, (byte)20);        sseqRec.getArray1().setElement1(5, (byte)30);        sseqRec.getArray1().setElement1(7, (byte)40);        sseqRec.getArray1().setElement1(9, (byte)50);        sseqRec.getBitField1().setSubfield1((short)1);        sseqRec.setFixedLengthString1("ABCDE");        sseqRec.getVariableField1().setMeterAsUnsignedByteAt1((short)33);        sseqRec.setVariableLengthString1("JTS=PWNT");        sseqRec.getVariableFormatField1().set((short)0, 5, data2);        msg4.encode(buff, 0);        // offset 0:    ushort w/ message ID        assertEquals(999, getUnsignedShort(buff, 0));        // offset 2:    ushort w/ Sequence's presence vector - 512 indicates only Subsequence present        assertEquals(512, getUnsignedShort(buff, 2));        // offset 4:    ubyte w/ Subsequence's presence vector - should be 1 indicating only first        // record is present        assertEquals(1, getUnsignedByte(buff, 4));        // offset 5: ubyte w/ Record's presence vector - 255 indicates all elements present        assertEquals(255, getUnsignedByte(buff, 5));        // offset 6:    signed byte, Field1 fixed field        assertEquals(77, buff.get(6));        // offset 7:    uint, variableLengthField1 count field...        assertEquals(10, getUnsignedByte(buff, 7));        // offset 11-20: 10-byte variableLengthField1.        assertBufferSliceEqual(buff, data1, 11, 10);        // offset 21: Array1[0]        assertEquals(0, buff.get(21));        // offset 22: Array1[1]        assertEquals(10, buff.get(22));        // offset 23: Array1[2]        assertEquals(0, buff.get(23));        // offset 24: Array1[3]        assertEquals(20, buff.get(24));        // offset 26: Array1[5]        assertEquals(30, buff.get(26));        // offset 28: Array1[7]        assertEquals(40, buff.get(28));        // offset 30: Array1[9]        assertEquals(50, buff.get(30));        // offset 31: BitField1, single unsigned byte        assertEquals(1, getUnsignedByte(buff, 31));        // offset 32: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(65, getUnsignedByte(buff, 32));        // offset 33: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(66, getUnsignedByte(buff, 33));        // offset 34: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(67, getUnsignedByte(buff, 34));        // offset 35: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(68, getUnsignedByte(buff, 35));        // offset 36: 15-byte fixed length string.  first 5 chars: "ABCDE"        assertEquals(69, getUnsignedByte(buff, 36));        // offset 37: zeroed part of fixed length string        assertEquals(0, getUnsignedByte(buff, 37));        // offset 46: last zeroed byte of fixed length string        assertEquals(0, getUnsignedByte(buff, 46));        // offset 47: type/units enum of VariableField1, single byte        assertEquals(1, buff.get(47));        // offset 48: contents of VariableField1        assertEquals(33, buff.get(48));        // offset 49: 2-byte unsigned short, count field for VariableLengthString1        assertEquals(8, getUnsignedShort(buff, 49));        // offset 51-61: 11 characters of VariableLengthString1 "hello world"        assertEquals(74, getUnsignedByte(buff, 51));        assertEquals(84, getUnsignedByte(buff, 52));        assertEquals(83, getUnsignedByte(buff, 53));        assertEquals(61, getUnsignedByte(buff, 54));        assertEquals(80, getUnsignedByte(buff, 55));        assertEquals(87, getUnsignedByte(buff, 56));        assertEquals(78, getUnsignedByte(buff, 57));        assertEquals(84, getUnsignedByte(buff, 58));        // offset 59: format field of VariableFormatField1, unsigned byte        assertEquals(0, getUnsignedByte(buff, 59));        // offset 60: count field of VariableFormatField1, unsigned int        assertEquals(5, getUnsignedInt(buff, 60));        // offset 64-69: 5 byte data of VariableFormatField1        assertBufferSliceEqual(buff, data2, 64, 5);        buff.clear();    }    public void testEncodeDecodeOperations() {        System.out.println("");        System.out.print("[executing test (testEncodeDecodeOperations)]");        MsgIn msg1 = new MsgIn();        MsgIn msg2 = new MsgIn();        ByteBuffer data1 = ByteBuffer.allocate(10);        ByteBuffer data2 = ByteBuffer.allocate(5);        for (int i = 0; i < 10; ++i) {            data1.put(i, (byte)(10+i));        }        for (int i = 0; i < 5; ++i) {            data2.put(i, (byte)(20+i));        }        msg1.getHeader().getHeaderRec().setMessageID(999);        MsgIn.Body.Sequence.Record3 rec3_i = msg1.getBody().getSequence().getRecord3();        rec3_i.setField1((byte)77);        rec3_i.getVariableLengthField1().set(10, data1);        rec3_i.getArray1().setElement1(1, (byte)10);        rec3_i.getArray1().setElement1(3, (byte)20);        rec3_i.getArray1().setElement1(5, (byte)30);        rec3_i.getArray1().setElement1(7, (byte)40);        rec3_i.getArray1().setElement1(9, (byte)50);        rec3_i.getBitField1().setSubfield1((short)1);        rec3_i.setFixedLengthString1("ABCDE");        rec3_i.getVariableField1().setMeterAsUnsignedByteAt1((short)33);        rec3_i.setVariableLengthString1("hello world");        rec3_i.getVariableFormatField1().set((short)0, 5, data2);	    MsgIn.Body.Sequence.List.Record listrec_i = new MsgIn.Body.Sequence.List.Record();	    msg1.getBody().getSequence().getList().addElement( listrec_i );        listrec_i.setField1((byte)77);        listrec_i.getVariableLengthField1().set(10, data1);        listrec_i.getArray1().setElement1(1, (byte)60);        listrec_i.getArray1().setElement1(3, (byte)70);        listrec_i.getArray1().setElement1(5, (byte)80);        listrec_i.getArray1().setElement1(7, (byte)90);        listrec_i.getArray1().setElement1(9, (byte)100);        listrec_i.getBitField1().setSubfield1((short)1);        listrec_i.setFixedLengthString1("FGHIJK");        listrec_i.getVariableField1().setMeterAsUnsignedByteAt1((short)44);        listrec_i.setVariableLengthString1("aabbccddeeff");        listrec_i.getVariableFormatField1().set((short)0, 5, data2);        // Variants        msg1.getBody().getSequence().getVariant().setFieldValue((short)1); // option 1: Record        MsgIn.Body.Sequence.Variant.Record varrec_i = msg1.getBody().getSequence().getVariant().getRecord();        varrec_i.setField1((byte)99);        varrec_i.getVariableLengthField1().set(10, data1);        varrec_i.getArray1().setElement1(1, (byte)110);        varrec_i.getArray1().setElement1(3, (byte)120);        varrec_i.getArray1().setElement1(5, (byte)130);        varrec_i.getArray1().setElement1(7, (byte)140);        varrec_i.getArray1().setElement1(9, (byte)150);        varrec_i.getBitField1().setSubfield1((short)1);        varrec_i.setFixedLengthString1("LMNOPQR");        varrec_i.getVariableField1().setMeterAsUnsignedByteAt1((short)55);        varrec_i.setVariableLengthString1("hello world");        varrec_i.getVariableFormatField1().set((short)0, 5, data2);        ByteBuffer buff = ByteBuffer.allocate(1000);        ByteBuffer fieldBuff_i = ByteBuffer.allocate(100);        ByteBuffer fieldBuff_o = ByteBuffer.allocate(100);        msg1.encode(buff, 0);        msg2.decode(buff, 0);        MsgIn.Body.Sequence.Record3 rec3_o = msg2.getBody().getSequence().getRecord3();	    MsgIn.Body.Sequence.List.Record listrec_o = msg2.getBody().getSequence().getList().getElement(0);        MsgIn.Body.Sequence.Variant.Record varrec_o = msg2.getBody().getSequence().getVariant().getRecord();        // *** ensure Record3 was decoded correctly        // compare non bytefield data        assertEquals(rec3_i.getField1(), rec3_o.getField1());        for (int i = 0; i < 10; ++i) {            assertEquals(rec3_i.getArray1().getElement1(i), rec3_o.getArray1().getElement1(i));        }        assertEquals(rec3_i.getBitField1().getSubfield1(), rec3_o.getBitField1().getSubfield1());        assertEquals(rec3_i.getFixedLengthString1(), rec3_o.getFixedLengthString1());        assertEquals(rec3_i.getVariableField1().getMeterAsUnsignedByteAt1(),                rec3_o.getVariableField1().getMeterAsUnsignedByteAt1());        assertEquals(rec3_i.getVariableLengthString1(), rec3_o.getVariableLengthString1());        // compare bytefield data        fieldBuff_i = rec3_i.getVariableLengthField1().getData();        fieldBuff_o = rec3_o.getVariableLengthField1().getData();        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 10);        fieldBuff_i = rec3_i.getVariableFormatField1().getData();        fieldBuff_o = rec3_o.getVariableFormatField1().getData();        assertEquals(rec3_i.getVariableFormatField1().getFormat(),                rec3_o.getVariableFormatField1().getFormat());        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 5);        // *** ensure Record under List was decoded correctly        // compare non-bytefield data        assertEquals(listrec_i.getField1(), listrec_o.getField1());        for (int i = 0; i < 10; ++i) {            assertEquals(listrec_i.getArray1().getElement1(i), listrec_o.getArray1().getElement1(i));        }        assertEquals(listrec_i.getBitField1().getSubfield1(), listrec_o.getBitField1().getSubfield1());        assertEquals(listrec_i.getFixedLengthString1(), listrec_o.getFixedLengthString1());        assertEquals(listrec_i.getVariableField1().getMeterAsUnsignedByteAt1(),                listrec_o.getVariableField1().getMeterAsUnsignedByteAt1());        assertEquals(listrec_i.getVariableLengthString1(), listrec_o.getVariableLengthString1());        // compare bytefield data        fieldBuff_i = listrec_i.getVariableLengthField1().getData();        fieldBuff_o = listrec_o.getVariableLengthField1().getData();        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 10);        fieldBuff_i = listrec_i.getVariableFormatField1().getData();        fieldBuff_o = listrec_o.getVariableFormatField1().getData();        assertEquals(listrec_i.getVariableFormatField1().getFormat(),                listrec_o.getVariableFormatField1().getFormat());        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 5);        // *** ensure Record under Variant was decoded correctly.        // compare non-bytefield data        assertEquals(varrec_i.getField1(), varrec_o.getField1());        for (int i = 0; i < 10; ++i) {            assertEquals(varrec_i.getArray1().getElement1(i), varrec_o.getArray1().getElement1(i));        }        assertEquals(varrec_i.getBitField1().getSubfield1(), varrec_o.getBitField1().getSubfield1());        assertEquals(varrec_i.getFixedLengthString1(), varrec_o.getFixedLengthString1());        assertEquals(varrec_i.getVariableField1().getMeterAsUnsignedByteAt1(),                varrec_o.getVariableField1().getMeterAsUnsignedByteAt1());        assertEquals(varrec_i.getVariableLengthString1(), varrec_o.getVariableLengthString1());        // compare bytefield data        fieldBuff_i = varrec_i.getVariableLengthField1().getData();        fieldBuff_o = varrec_o.getVariableLengthField1().getData();        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 10);        fieldBuff_i = varrec_i.getVariableFormatField1().getData();        fieldBuff_o = varrec_o.getVariableFormatField1().getData();        assertEquals(varrec_i.getVariableFormatField1().getFormat(),                varrec_o.getVariableFormatField1().getFormat());        assertBuffersEqual(fieldBuff_i, fieldBuff_o, 5);    }    public void testEquality() {        System.out.println("");        System.out.print("[executing test (testEquality)]");        MsgIn msg1 = new MsgIn();        ByteBuffer data1 = ByteBuffer.allocate(10);        ByteBuffer data2 = ByteBuffer.allocate(5);        for (int i = 0; i < 10; ++i) {            data1.put(i, (byte)(10+i));        }        for (int i = 0; i < 5; ++i) {            data2.put(i, (byte)(20+i));        }        msg1.getHeader().getHeaderRec().setMessageID(999);        msg1.getBody().getSequence().getRecord2().setField1((byte)77);        msg1.getBody().getSequence().getRecord2().getVariableLengthField1().set(10, data1);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(1, (byte)10);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(3, (byte)20);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(5, (byte)30);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(7, (byte)40);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)50);        msg1.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);        msg1.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        msg1.getBody().getSequence().getRecord6().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg1.getBody().getSequence().getRecord8().setVariableLengthString1("hello world");        msg1.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, 5, data2);        MsgIn msg2 = new MsgIn();        msg2.getHeader().getHeaderRec().setMessageID(999);        msg2.getBody().getSequence().getRecord2().setField1((byte)77);        msg2.getBody().getSequence().getRecord2().getVariableLengthField1().set(10, data1);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(1, (byte)10);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(3, (byte)20);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(5, (byte)30);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(7, (byte)40);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)50);        msg2.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);        msg2.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        msg2.getBody().getSequence().getRecord6().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg2.getBody().getSequence().getRecord8().setVariableLengthString1("hello world");        msg2.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, 5, data2);        assertTrue(msg1.isEqual(msg2));        assertTrue(msg2.isEqual(msg1));        assertTrue(msg1.isEqual(msg1));        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)120);        assertFalse(msg1.isEqual(msg2));        assertFalse(msg2.isEqual(msg1));    }    public void testInequality() {        System.out.println("");        System.out.print("[executing test (testInequality)]");        MsgIn msg1 = new MsgIn();        ByteBuffer data1 = ByteBuffer.allocate(10);        ByteBuffer data2 = ByteBuffer.allocate(5);        for (int i = 0; i < 10; ++i) {            data1.put(i, (byte)(10+i));        }        for (int i = 0; i < 5; ++i) {            data2.put(i, (byte)(20+i));        }        msg1.getHeader().getHeaderRec().setMessageID(999);        msg1.getBody().getSequence().getRecord2().setField1((byte)77);        msg1.getBody().getSequence().getRecord2().getVariableLengthField1().set(10, data1);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(1, (byte)10);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(3, (byte)20);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(5, (byte)30);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(7, (byte)40);        msg1.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)50);        msg1.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);        msg1.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        msg1.getBody().getSequence().getRecord6().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg1.getBody().getSequence().getRecord8().setVariableLengthString1("hello world");        msg1.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, 5, data2);        MsgIn msg2 = new MsgIn();        msg2.getHeader().getHeaderRec().setMessageID(999);        msg2.getBody().getSequence().getRecord2().setField1((byte)77);        msg2.getBody().getSequence().getRecord2().getVariableLengthField1().set(10, data1);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(1, (byte)10);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(3, (byte)20);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(5, (byte)30);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(7, (byte)40);        msg2.getBody().getSequence().getRecord4().getArray1().setElement1(9, (byte)50);        msg2.getBody().getSequence().getRecord4().getBitField1().setSubfield1((short)1);        msg2.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        msg2.getBody().getSequence().getRecord6().getVariableField1().setMeterAsUnsignedByteAt1((short)33);        msg2.getBody().getSequence().getRecord8().setVariableLengthString1("hello world");        msg2.getBody().getSequence().getRecord8().getVariableFormatField1().set((short)0, 5, data2);        // messages are equal now - notEquals should be false        assertFalse(msg1.notEquals(msg2));        assertFalse(msg2.notEquals(msg1));        assertFalse(msg1.notEquals(msg1));        // alter msg2, notEquals should now be true        msg2.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDEFG");        assertTrue(msg1.notEquals(msg2));        assertTrue(msg2.notEquals(msg1));                // Put it back to equals, then change the PV        msg2.getBody().getSequence().getRecord6().setFixedLengthString1("ABCDE");        assertFalse(msg1.notEquals(msg2));        msg2.getBody().getSequence().getRecord1().setField1((byte)0);        assertTrue(msg1.notEquals(msg2));    }    public static void main(String[] args) {        System.out.println("Executing suite JTSOptional1MessageTest");        TestRunner.run(Optional1_utst.class);        System.out.println("Completed suite JTSOptional1MessageTest");        System.out.println("------------------------------------------------");    }};