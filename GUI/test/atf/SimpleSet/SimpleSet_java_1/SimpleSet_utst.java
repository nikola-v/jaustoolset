/***********           LICENSE HEADER   *******************************JAUS Tool SetCopyright (c)  2010, United States GovernmentAll rights reserved.Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.Neither the name of the United States Government nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *********************  END OF LICENSE ***********************************/package src.urn_DeVivo_jaus_services_SimpleDef_1_0;import junit.textui.TestRunner;import junit.framework.TestCase;import statemap.TransitionUndefinedException;public class SimpleSet_utst extends TestCase {    class TestFlagsClass {        public byte LastState;        public byte[] StateHistory = new byte[255];    };    class SimpleStateMachnImpl extends SimpleDef_SimpleStateMachn {        SimpleStateMachnImpl() {            TFC = new TestFlagsClass();        }        /// Action Methods        public void EnteredErrorStateAction() {            TFC.StateHistory[TFC.LastState++] = 5;        }        public void EnteredPausedStateAction() {            TFC.StateHistory[TFC.LastState++] = 6;        }        public void EnteredReadyState2Action() {            TFC.StateHistory[TFC.LastState++] = 8;        }        public void EnteredReadyStateAction() {            TFC.StateHistory[TFC.LastState++] = 7;        }        public void EnteredStandbyStateAction() {        }        public void FromReadyToErrorAction() {            TFC.StateHistory[TFC.LastState++] = 0;        }        public void FromStandbyToReadyAction() {            TFC.StateHistory[TFC.LastState++] = 1;        }        public void PauseAction(String arg0) {            TFC.StateHistory[TFC.LastState++] = 2;        }        public void ReportStateAction() {            TFC.StateHistory[TFC.LastState++] = 3;        }        public void ResumeAction() {            TFC.StateHistory[TFC.LastState++] = 4;        }        /// Guard Methods        public boolean ReadyToErrorGuard() {            TFC.StateHistory[TFC.LastState++] = 9;            return false;        }        public boolean StandbyToReadyGuard() {            TFC.StateHistory[TFC.LastState++] = 10;            return true;        }        // user-variables        public TestFlagsClass TFC;    };    SimpleStateMachnImpl fsm;    public SimpleSet_utst(String name) {        super(name);        // Create the FSM and call the entry action manually        fsm = new SimpleStateMachnImpl();        fsm.EnteredStandbyStateAction();    }    protected void setUp() {        fsm.TFC.LastState = 0;        int i;        for (i = 0; i < 255; i++) {            fsm.TFC.StateHistory[i] = (byte) 255;        }        // Run through the desired transition sequence        try {            fsm.context.ReadyMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.PauseMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.PauseMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.ResumeMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.PauseMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.ResumeMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.ResumeMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.ErrorMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }        try {            fsm.context.QueryStateMessageTransition();        } catch (TransitionUndefinedException e) {            fsm.TFC.StateHistory[fsm.TFC.LastState++] = 12;        }    }    protected void tearDown() {    }    public void testProtocol() {        int i;        System.out.println(String.format("fsm.TFC.LastState, %d\n", fsm.TFC.LastState));        for (i = 0; i < fsm.TFC.LastState + 1; i++) {            System.out.println(String.format("fsm.TFC.StateHistory[%d], %d\n", i, fsm.TFC.StateHistory[i]));        }        assertEquals(10, fsm.TFC.StateHistory[0]);        assertEquals(1, fsm.TFC.StateHistory[1]);        assertEquals(7, fsm.TFC.StateHistory[2]);        assertEquals(2, fsm.TFC.StateHistory[3]);        assertEquals(6, fsm.TFC.StateHistory[4]);        assertEquals(2, fsm.TFC.StateHistory[5]);        assertEquals(6, fsm.TFC.StateHistory[6]);        assertEquals(4, fsm.TFC.StateHistory[7]);        assertEquals(12, fsm.TFC.StateHistory[8]);        assertEquals(2, fsm.TFC.StateHistory[9]);        assertEquals(6, fsm.TFC.StateHistory[10]);        assertEquals(4, fsm.TFC.StateHistory[11]);        assertEquals(12, fsm.TFC.StateHistory[12]);        assertEquals(4, fsm.TFC.StateHistory[13]);        assertEquals(12, fsm.TFC.StateHistory[14]);        assertEquals(9, fsm.TFC.StateHistory[15]);        assertEquals(12, fsm.TFC.StateHistory[16]);        assertEquals(3, fsm.TFC.StateHistory[17]);        assertEquals(8, fsm.TFC.StateHistory[18]);    }    public static void main(String[] args) {        System.out.println("Executing suite JTSSimpleDefMessageTest");        TestRunner.run(SimpleSet_utst.class);        System.out.println("Completed suite JTSSimpleDefMessageTest");        System.out.println("------------------------------------------------");    }}