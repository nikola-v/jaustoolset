/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace JTS {

using System;
using System.Runtime.InteropServices;

public class JausAddress : Address {
  private HandleRef swigCPtr;

  internal JausAddress(IntPtr cPtr, bool cMemoryOwn) : base(JausAddressModulePINVOKE.JausAddressUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(JausAddress obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~JausAddress() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          JausAddressModulePINVOKE.delete_JausAddress(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public JausAddress() : this(JausAddressModulePINVOKE.new_JausAddress__SWIG_0(), true) {
  }

  public JausAddress(ushort subsystemID, byte nodeID, byte componentID) : this(JausAddressModulePINVOKE.new_JausAddress__SWIG_1(subsystemID, nodeID, componentID), true) {
  }

  public JausAddress(uint value) : this(JausAddressModulePINVOKE.new_JausAddress__SWIG_2(value), true) {
  }

  public virtual ushort getSubsystemID() {
    ushort ret = JausAddressModulePINVOKE.JausAddress_getSubsystemID(swigCPtr);
    return ret;
  }

  public virtual int setSubsystemID(ushort value) {
    int ret = JausAddressModulePINVOKE.JausAddress_setSubsystemID(swigCPtr, value);
    return ret;
  }

  public virtual byte getNodeID() {
    byte ret = JausAddressModulePINVOKE.JausAddress_getNodeID(swigCPtr);
    return ret;
  }

  public virtual int setNodeID(byte value) {
    int ret = JausAddressModulePINVOKE.JausAddress_setNodeID(swigCPtr, value);
    return ret;
  }

  public virtual byte getComponentID() {
    byte ret = JausAddressModulePINVOKE.JausAddress_getComponentID(swigCPtr);
    return ret;
  }

  public virtual int setComponentID(byte value) {
    int ret = JausAddressModulePINVOKE.JausAddress_setComponentID(swigCPtr, value);
    return ret;
  }

  public virtual uint get() {
    uint ret = JausAddressModulePINVOKE.JausAddress_get(swigCPtr);
    return ret;
  }

  public virtual bool isLocalSubsystem(ushort sID) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalSubsystem__SWIG_0(swigCPtr, sID);
    return ret;
  }

  public virtual bool isLocalSubsystem(JausAddress address) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalSubsystem__SWIG_1(swigCPtr, JausAddress.getCPtr(address));
    if (JausAddressModulePINVOKE.SWIGPendingException.Pending) throw JausAddressModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isLocalNode(ushort sID, byte nID) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalNode__SWIG_0(swigCPtr, sID, nID);
    return ret;
  }

  public virtual bool isLocalNode(JausAddress address) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalNode__SWIG_1(swigCPtr, JausAddress.getCPtr(address));
    if (JausAddressModulePINVOKE.SWIGPendingException.Pending) throw JausAddressModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isLocalComponent(ushort sID, byte nID, byte cID) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalComponent__SWIG_0(swigCPtr, sID, nID, cID);
    return ret;
  }

  public virtual bool isLocalComponent(JausAddress address) {
    bool ret = JausAddressModulePINVOKE.JausAddress_isLocalComponent__SWIG_1(swigCPtr, JausAddress.getCPtr(address));
    if (JausAddressModulePINVOKE.SWIGPendingException.Pending) throw JausAddressModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
