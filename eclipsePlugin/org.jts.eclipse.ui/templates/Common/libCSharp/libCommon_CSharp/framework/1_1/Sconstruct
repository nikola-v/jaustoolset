# Set-up build location and paths
VariantDir('Build', 'src', duplicate=0)

# Create the build environment, borrowing from parent
import os
Import('env')
libenv=env.Clone()
#libenv = Environment (
#	tools = ['mscs', 'msvs', 'mcs'],
#	toolpath = ['.'],
#	ENV=os.environ,
#	MSVS_IGNORE_IDE_PATHS=1
#	)

sources = Split ("""
	Service.cs
	JausUtils.cs
	EventReceiver.cs
	StateChangeNotification.cs	
	SimpleThread.cs
	StateMachine.cs
	transport/JausRouter.cs
	transport/Address.cs
	transport/AddressModule.cs
	transport/AddressModulePINVOKE.cs
	transport/JausAddress.cs
	transport/JausAddressModule.cs
	transport/JausAddressModulePINVOKE.cs
	transport/JrErrorCode.cs
	transport/JuniorAPI.cs
	transport/JuniorAPIPINVOKE.cs
	transport/OS.cs
	transport/SWIGTYPE_p_int.cs
	transport/SWIGTYPE_p_long.cs
	messages/Message.cs
	internalEvents/Send.cs
	internalEvents/Receive.cs
	internalEvents/Send_1_1.cs
	internalEvents/Receive_1_1.cs
	internalEvents/InternalEvent.cs
	internalEvents/InternalEventHandler.cs
	""")

#r = env.CLIRefs(refpaths, refs)

lib = libenv.CLILibrary('./lib/CSharpCommon', sources)

# Allow programs built after this library to find it without adding it to the refpaths
env.AddToRefPaths(lib)
libenv.Install(env['INSTALL_LIB'], lib)
libenv.Install(env['BINPATH'], lib)