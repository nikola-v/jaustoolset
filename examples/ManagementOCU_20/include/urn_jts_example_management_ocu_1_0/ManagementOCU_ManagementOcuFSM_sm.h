#ifndef _H_MANAGEMENTOCU_MANAGEMENTOCUFSM_SM
#define _H_MANAGEMENTOCU_MANAGEMENTOCUFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ManagementOCU_ManagementOcuFSM.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jts_example_management_ocu_1_0
{
    // Forward declarations.
    class ManagementOCU_ManagementOcuFSM_SM;
    class ManagementOCU_ManagementOcuFSM_SM_WaitForControl;
    class ManagementOCU_ManagementOcuFSM_SM_HandleMenu;
    class ManagementOCU_ManagementOcuFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class ManagementOCU_ManagementOcuFSM_SM_Default;
    class ManagementOCU_ManagementOcuFSMState;
    class ManagementOCU_ManagementOcuFSMContext;
    class ManagementOCU_ManagementOcuFSM;

    class ManagementOCU_ManagementOcuFSMState :
        public statemap::State
    {
    public:

        ManagementOCU_ManagementOcuFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(ManagementOCU_ManagementOcuFSMContext&) {};
        virtual void Exit(ManagementOCU_ManagementOcuFSMContext&) {};

        virtual void ConfirmControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        virtual void ConfirmControlTransition(ManagementOCU_ManagementOcuFSMContext& context, ConfirmControl msg);
        virtual void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_HandleMenuTransition(ManagementOCU_ManagementOcuFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_WaitForControlTransition(ManagementOCU_ManagementOcuFSMContext& context, JTS::InternalEvent* ie);
        virtual void MenuItemEnteredTransition(ManagementOCU_ManagementOcuFSMContext& context);
        virtual void MenuItemEnteredTransition(ManagementOCU_ManagementOcuFSMContext& context, MenuItemEntered msg);
        virtual void RejectControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        virtual void RejectControlTransition(ManagementOCU_ManagementOcuFSMContext& context, RejectControl msg);
        virtual void ReportControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        virtual void ReportStatusTransition(ManagementOCU_ManagementOcuFSMContext& context);
        virtual void ReportStatusTransition(ManagementOCU_ManagementOcuFSMContext& context, ReportStatus msg);

    protected:

        virtual void Default(ManagementOCU_ManagementOcuFSMContext& context);
    };

    class ManagementOCU_ManagementOcuFSM_SM
    {
    public:

        static ManagementOCU_ManagementOcuFSM_SM_WaitForControl WaitForControl;
        static ManagementOCU_ManagementOcuFSM_SM_HandleMenu HandleMenu;
        static ManagementOCU_ManagementOcuFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class ManagementOCU_ManagementOcuFSM_SM_Default :
        public ManagementOCU_ManagementOcuFSMState
    {
    public:

        ManagementOCU_ManagementOcuFSM_SM_Default(const char *name, int stateId)
        : ManagementOCU_ManagementOcuFSMState(name, stateId)
        {};

    };

    class ManagementOCU_ManagementOcuFSM_SM_WaitForControl :
        public ManagementOCU_ManagementOcuFSM_SM_Default
    {
    public:
        ManagementOCU_ManagementOcuFSM_SM_WaitForControl(const char *name, int stateId)
        : ManagementOCU_ManagementOcuFSM_SM_Default(name, stateId)
        {};

        void ConfirmControlTransition(ManagementOCU_ManagementOcuFSMContext& context, ConfirmControl msg);
        void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_HandleMenuTransition(ManagementOCU_ManagementOcuFSMContext& context, JTS::InternalEvent* ie);
        void MenuItemEnteredTransition(ManagementOCU_ManagementOcuFSMContext& context, MenuItemEntered msg);
    };

    class ManagementOCU_ManagementOcuFSM_SM_HandleMenu :
        public ManagementOCU_ManagementOcuFSM_SM_Default
    {
    public:
        ManagementOCU_ManagementOcuFSM_SM_HandleMenu(const char *name, int stateId)
        : ManagementOCU_ManagementOcuFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_WaitForControlTransition(ManagementOCU_ManagementOcuFSMContext& context, JTS::InternalEvent* ie);
        void MenuItemEnteredTransition(ManagementOCU_ManagementOcuFSMContext& context, MenuItemEntered msg);
        void RejectControlTransition(ManagementOCU_ManagementOcuFSMContext& context, RejectControl msg);
        void ReportStatusTransition(ManagementOCU_ManagementOcuFSMContext& context, ReportStatus msg);
    };

    class ManagementOCU_ManagementOcuFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public ManagementOCU_ManagementOcuFSM_SM_Default
    {
    public:
        ManagementOCU_ManagementOcuFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : ManagementOCU_ManagementOcuFSM_SM_Default(name, stateId)
        {};

        void ConfirmControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        void MenuItemEnteredTransition(ManagementOCU_ManagementOcuFSMContext& context);
        void RejectControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        void ReportControlTransition(ManagementOCU_ManagementOcuFSMContext& context);
        void ReportStatusTransition(ManagementOCU_ManagementOcuFSMContext& context);
    };

    class ManagementOCU_ManagementOcuFSMContext :
        public statemap::FSMContext
    {
    public:

        ManagementOCU_ManagementOcuFSMContext(ManagementOCU_ManagementOcuFSM& owner)
        : FSMContext(ManagementOCU_ManagementOcuFSM_SM::WaitForControl),
          _owner(owner)
        {};

        ManagementOCU_ManagementOcuFSMContext(ManagementOCU_ManagementOcuFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        ManagementOCU_ManagementOcuFSM& getOwner() const
        {
            return (_owner);
        };

        ManagementOCU_ManagementOcuFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<ManagementOCU_ManagementOcuFSMState&>(*_state));
        };

        void ConfirmControlTransition()
        {
            setTransition("ConfirmControlTransition");
            (getState()).ConfirmControlTransition(*this);
            setTransition(NULL);
        };

        void ConfirmControlTransition(ConfirmControl msg)
        {
            setTransition("ConfirmControlTransition");
            (getState()).ConfirmControlTransition(*this, msg);
            setTransition(NULL);
        };

        void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_HandleMenuTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_ManagementOCU_ManagementOcuFSM_HandleMenuTransition");
            (getState()).InternalStateChange_To_ManagementOCU_ManagementOcuFSM_HandleMenuTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_ManagementOCU_ManagementOcuFSM_WaitForControlTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_ManagementOCU_ManagementOcuFSM_WaitForControlTransition");
            (getState()).InternalStateChange_To_ManagementOCU_ManagementOcuFSM_WaitForControlTransition(*this, ie);
            setTransition(NULL);
        };

        void MenuItemEnteredTransition()
        {
            setTransition("MenuItemEnteredTransition");
            (getState()).MenuItemEnteredTransition(*this);
            setTransition(NULL);
        };

        void MenuItemEnteredTransition(MenuItemEntered msg)
        {
            setTransition("MenuItemEnteredTransition");
            (getState()).MenuItemEnteredTransition(*this, msg);
            setTransition(NULL);
        };

        void RejectControlTransition()
        {
            setTransition("RejectControlTransition");
            (getState()).RejectControlTransition(*this);
            setTransition(NULL);
        };

        void RejectControlTransition(RejectControl msg)
        {
            setTransition("RejectControlTransition");
            (getState()).RejectControlTransition(*this, msg);
            setTransition(NULL);
        };

        void ReportControlTransition()
        {
            setTransition("ReportControlTransition");
            (getState()).ReportControlTransition(*this);
            setTransition(NULL);
        };

        void ReportStatusTransition()
        {
            setTransition("ReportStatusTransition");
            (getState()).ReportStatusTransition(*this);
            setTransition(NULL);
        };

        void ReportStatusTransition(ReportStatus msg)
        {
            setTransition("ReportStatusTransition");
            (getState()).ReportStatusTransition(*this, msg);
            setTransition(NULL);
        };

    private:

        ManagementOCU_ManagementOcuFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_MANAGEMENTOCU_MANAGEMENTOCUFSM_SM
