/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AdditionClientServiceDef_additionClientFSM.sm
 */

#include "urn_jaus_example_addition_client_1_0/Messages/MessageSet.h"
#include "urn_jaus_example_addition_client_1_0/AdditionClientServiceDef_additionClientFSM.h"
#include "include/urn_jaus_example_addition_client_1_0/AdditionClientServiceDef_additionClientFSM_sm.h"

using namespace statemap;

namespace urn_jaus_example_addition_client_1_0
{
    // Static class declarations.
    AdditionClientServiceDef_additionClientFSM_SM_Init AdditionClientServiceDef_additionClientFSM_SM::Init("AdditionClientServiceDef_additionClientFSM_SM::Init", 0);
    AdditionClientServiceDef_additionClientFSM_SM_Ready AdditionClientServiceDef_additionClientFSM_SM::Ready("AdditionClientServiceDef_additionClientFSM_SM::Ready", 1);
    AdditionClientServiceDef_additionClientFSM_SM_Internally_Generated_State_DO_NOT_USE AdditionClientServiceDef_additionClientFSM_SM::Internally_Generated_State_DO_NOT_USE("AdditionClientServiceDef_additionClientFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void AdditionClientServiceDef_additionClientFSMState::InitToReadyEventDefTransition(AdditionClientServiceDef_additionClientFSMContext& context)
    {
        Default(context);
        return;
    }

    void AdditionClientServiceDef_additionClientFSMState::InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_InitTransition(AdditionClientServiceDef_additionClientFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AdditionClientServiceDef_additionClientFSMState::InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_ReadyTransition(AdditionClientServiceDef_additionClientFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AdditionClientServiceDef_additionClientFSMState::ReportAdditionTransition(AdditionClientServiceDef_additionClientFSMContext& context)
    {
        Default(context);
        return;
    }

    void AdditionClientServiceDef_additionClientFSMState::ReportAdditionTransition(AdditionClientServiceDef_additionClientFSMContext& context, ReportAddition msg)
    {
        Default(context);
        return;
    }

    void AdditionClientServiceDef_additionClientFSMState::Default(AdditionClientServiceDef_additionClientFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Init::InitToReadyEventDefTransition(AdditionClientServiceDef_additionClientFSMContext& context)
    {
        AdditionClientServiceDef_additionClientFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM InitToReadyEventDefTransition()"
                << std::endl;
        }

        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.serviceInitializedAction();
            ctxt.processNotifications("Ready");
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Ready);
        }
        catch (...)
        {
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Init::InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_ReadyTransition(AdditionClientServiceDef_additionClientFSMContext& context, JTS::InternalEvent* ie)
    {
        AdditionClientServiceDef_additionClientFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.processNotifications("Ready", ie);
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Ready);
        }
        catch (...)
        {
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Ready::InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_InitTransition(AdditionClientServiceDef_additionClientFSMContext& context, JTS::InternalEvent* ie)
    {
        AdditionClientServiceDef_additionClientFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM InternalStateChange_To_AdditionClientServiceDef_additionClientFSM_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        (context.getState()).Exit(context);
        context.clearState();
        try
        {
            ctxt.serviceStartedAction();
            ctxt.processNotifications("Init", ie);
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Init);
        }
        catch (...)
        {
            context.setState(AdditionClientServiceDef_additionClientFSM_SM::Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Ready::ReportAdditionTransition(AdditionClientServiceDef_additionClientFSMContext& context, ReportAddition msg)
    {
        AdditionClientServiceDef_additionClientFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM ReportAdditionTransition(ReportAddition msg)"
                << std::endl;
        }

        AdditionClientServiceDef_additionClientFSMState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.printAnswerToScreenAction(msg);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Internally_Generated_State_DO_NOT_USE::InitToReadyEventDefTransition(AdditionClientServiceDef_additionClientFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM InitToReadyEventDefTransition()"
                << std::endl;
        }


        return;
    }

    void AdditionClientServiceDef_additionClientFSM_SM_Internally_Generated_State_DO_NOT_USE::ReportAdditionTransition(AdditionClientServiceDef_additionClientFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AdditionClientServiceDef_additionClientFSM_SM ReportAdditionTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
