/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SkidSteerVehicleSim_ReceiveFSM_sm.sm
 */

#include "urn_jts_examples_SkidSteerVehicleSim_1_0/Messages/MessageSet.h"
#include "urn_jts_examples_SkidSteerVehicleSim_1_0/SkidSteerVehicleSim_ReceiveFSM.h"
#include "include/urn_jts_examples_SkidSteerVehicleSim_1_0/SkidSteerVehicleSim_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jts_examples_SkidSteerVehicleSim_1_0
{
    // Static class declarations.
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby", 0);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init", 1);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure", 2);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown", 3);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency", 4);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby", 5);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready", 6);
    SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency("SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency", 7);
    SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 8);

    void SkidSteerVehicleSim_ReceiveFSMState::BroadcastGlobalTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::BroadcastLocalTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::CancelEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ClearEmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::CreateEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::EventErrorTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::EventOccurredTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InitializedTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryAuthorityTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryEventsTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QuerySimulatedPoseTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryStatusTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryTimeoutTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::QueryWrenchEffortTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, SetWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ReleaseControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::RequestControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ResetTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ResumeTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::SendTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::SetAuthorityTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::SetEmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::SetWrenchEffortTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::TimeoutTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::UpdateEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void SkidSteerVehicleSim_ReceiveFSMState::Default(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, SetWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.setWrenchEffortAction(msg);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             SkidSteerVehicleSim_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_SkidSteerVehicleSim_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSimulatedPose", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QuerySimulatedPose msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context, QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)
    {
        SkidSteerVehicleSim_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        SkidSteerVehicleSim_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportWrenchEffort", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryWrenchEffort msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::FailureTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::InitializedTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySimulatedPoseTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySimulatedPoseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySimulatedPoseTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStatusTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryWrenchEffortTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryWrenchEffortTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryWrenchEffortTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResetTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResumeTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetWrenchEffortTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetWrenchEffortTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetWrenchEffortTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ShutdownTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::StandbyTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void SkidSteerVehicleSim_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(SkidSteerVehicleSim_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : SkidSteerVehicleSim_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
