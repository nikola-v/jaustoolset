/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AccessControl_SendFSM.sm
 */

#include "urn_jaus_jss_core_AccessControl_1_1/Messages/MessageSet.h"
#include "urn_jaus_jss_core_AccessControl_1_1/AccessControl_SendFSM.h"
#include "include/urn_jaus_jss_core_AccessControl_1_1/AccessControl_SendFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_core_AccessControl_1_1
{
    // Static class declarations.
    AccessControl_SendFSM_SM_Sending AccessControl_SendFSM_SM::Sending("AccessControl_SendFSM_SM::Sending", 0);
    AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE AccessControl_SendFSM_SM::Internally_Generated_State_DO_NOT_USE("AccessControl_SendFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void AccessControl_SendFSMState::BroadcastGlobalTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::BroadcastLocalTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::CancelEventTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::CommandCompletedTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::CommandExpiredTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::CreateCommandEventTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::CreateEvntTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::EventErrorTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::EventOccurredTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::QueryAuthorityTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::QueryControlTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::QueryEventTimeoutTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::QueryEventsTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::QueryTimeoutTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::ReceiveTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::ReleaseControlTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::RequestControlTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::SendTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::SetAuthorityTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::TimeoutTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::UpdateEventTransition(AccessControl_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_SendFSMState::Default(AccessControl_SendFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CommandCompletedTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM CommandCompletedTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CommandExpiredTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM CommandExpiredTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateCommandEventTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM CreateCommandEventTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEvntTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM CreateEvntTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventTimeoutTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM QueryEventTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM SendTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(AccessControl_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : AccessControl_SendFSM_SM UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
