/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PingClient_PingClientFSM.sm
 */

package src.urn_jts_PingClient_1_0;

import framework.internalEvents.*;
import src.urn_jts_PingClient_1_0.Messages.*;
import java.io.PrintStream;

public class PingClient_PingClientFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public PingClient_PingClientFSMContext(PingClient_PingClientFSM owner)
    {
        super (PingClient_PingClientFSM_SM.Ready);

        _owner = owner;
    }

    public PingClient_PingClientFSMContext(PingClient_PingClientFSM owner, PingClient_PingClientFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void ReportHeartbeatPulseTransition()
    {
        _transition = "ReportHeartbeatPulseTransition";
        getState().ReportHeartbeatPulseTransition(this);
        _transition = "";
        return;
    }

    public PingClient_PingClientFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((PingClient_PingClientFSMState) _state);
    }

    protected PingClient_PingClientFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(PingClient_PingClientFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private PingClient_PingClientFSM _owner;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class PingClient_PingClientFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected PingClient_PingClientFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(PingClient_PingClientFSMContext context) {}
        protected void Exit(PingClient_PingClientFSMContext context) {}

        protected void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext context)
        {
            Default(context);
        }

        protected void Default(PingClient_PingClientFSMContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class PingClient_PingClientFSM_SM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final PingClient_PingClientFSM_SM_Default.PingClient_PingClientFSM_SM_Ready Ready =
            new PingClient_PingClientFSM_SM_Default.PingClient_PingClientFSM_SM_Ready("PingClient_PingClientFSM_SM.Ready", 0);
        public static final PingClient_PingClientFSM_SM_Default.PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE =
            new PingClient_PingClientFSM_SM_Default.PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE("PingClient_PingClientFSM_SM.Internally_Generated_State_DO_NOT_USE", 1);
        private static final PingClient_PingClientFSM_SM_Default Default =
            new PingClient_PingClientFSM_SM_Default("PingClient_PingClientFSM_SM.Default", -1);

    }

    protected static class PingClient_PingClientFSM_SM_Default
        extends PingClient_PingClientFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected PingClient_PingClientFSM_SM_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Inner classse.
    //


        private static final class PingClient_PingClientFSM_SM_Ready
            extends PingClient_PingClientFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private PingClient_PingClientFSM_SM_Ready(String name, int id)
            {
                super (name, id);
            }

            protected void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext context)
            {
                PingClient_PingClientFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : PingClient_PingClientFSM_SM.Ready.ReportHeartbeatPulseTransition()");
                }

                PingClient_PingClientFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.printToScreenAction();
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE
            extends PingClient_PingClientFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE(String name, int id)
            {
                super (name, id);
            }

            protected void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : PingClient_PingClientFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportHeartbeatPulseTransition()");
                }


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
