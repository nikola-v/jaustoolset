/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Management_ReceiveFSM.sm
 */

package src.urn_jaus_jss_core_Management_1_1;

import framework.internalEvents.*;
import src.urn_jaus_jss_core_Management_1_1.InternalEvents.*;
import src.urn_jaus_jss_core_Management_1_1.Messages.*;
import java.io.PrintStream;

public class Management_ReceiveFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public Management_ReceiveFSMContext(Management_ReceiveFSM owner)
    {
        super (Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);

        _owner = owner;
    }

    public Management_ReceiveFSMContext(Management_ReceiveFSM owner, Management_ReceiveFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void BroadcastGlobalTransition()
    {
        _transition = "BroadcastGlobalTransition";
        getState().BroadcastGlobalTransition(this);
        _transition = "";
        return;
    }

    public void BroadcastLocalTransition()
    {
        _transition = "BroadcastLocalTransition";
        getState().BroadcastLocalTransition(this);
        _transition = "";
        return;
    }

    public void CancelEventTransition()
    {
        _transition = "CancelEventTransition";
        getState().CancelEventTransition(this);
        _transition = "";
        return;
    }

    public void ClearEmergencyTransition()
    {
        _transition = "ClearEmergencyTransition";
        getState().ClearEmergencyTransition(this);
        _transition = "";
        return;
    }

    public void CommandCompletedTransition()
    {
        _transition = "CommandCompletedTransition";
        getState().CommandCompletedTransition(this);
        _transition = "";
        return;
    }

    public void CommandExpiredTransition()
    {
        _transition = "CommandExpiredTransition";
        getState().CommandExpiredTransition(this);
        _transition = "";
        return;
    }

    public void CreateCommandEventTransition()
    {
        _transition = "CreateCommandEventTransition";
        getState().CreateCommandEventTransition(this);
        _transition = "";
        return;
    }

    public void CreateEventTransition()
    {
        _transition = "CreateEventTransition";
        getState().CreateEventTransition(this);
        _transition = "";
        return;
    }

    public void EventErrorTransition()
    {
        _transition = "EventErrorTransition";
        getState().EventErrorTransition(this);
        _transition = "";
        return;
    }

    public void EventOccurredTransition()
    {
        _transition = "EventOccurredTransition";
        getState().EventOccurredTransition(this);
        _transition = "";
        return;
    }

    public void FailureTransition()
    {
        _transition = "FailureTransition";
        getState().FailureTransition(this);
        _transition = "";
        return;
    }

    public void InitializedTransition()
    {
        _transition = "InitializedTransition";
        getState().InitializedTransition(this);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition";
        getState().InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(this, ie);
        _transition = "";
        return;
    }

    public void QueryAuthorityTransition()
    {
        _transition = "QueryAuthorityTransition";
        getState().QueryAuthorityTransition(this);
        _transition = "";
        return;
    }

    public void QueryControlTransition()
    {
        _transition = "QueryControlTransition";
        getState().QueryControlTransition(this);
        _transition = "";
        return;
    }

    public void QueryEventTimeoutTransition()
    {
        _transition = "QueryEventTimeoutTransition";
        getState().QueryEventTimeoutTransition(this);
        _transition = "";
        return;
    }

    public void QueryEventsTransition()
    {
        _transition = "QueryEventsTransition";
        getState().QueryEventsTransition(this);
        _transition = "";
        return;
    }

    public void QueryStatusTransition()
    {
        _transition = "QueryStatusTransition";
        getState().QueryStatusTransition(this);
        _transition = "";
        return;
    }

    public void QueryTimeoutTransition()
    {
        _transition = "QueryTimeoutTransition";
        getState().QueryTimeoutTransition(this);
        _transition = "";
        return;
    }

    public void ReceiveTransition()
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Reset msg)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReceiveTransition(SetAuthority msg)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Shutdown msg)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReceiveTransition(ClearEmergency msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Reset msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Resume msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Shutdown msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(Standby msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReleaseControlTransition()
    {
        _transition = "ReleaseControlTransition";
        getState().ReleaseControlTransition(this);
        _transition = "";
        return;
    }

    public void RequestControlTransition()
    {
        _transition = "RequestControlTransition";
        getState().RequestControlTransition(this);
        _transition = "";
        return;
    }

    public void ResetTransition()
    {
        _transition = "ResetTransition";
        getState().ResetTransition(this);
        _transition = "";
        return;
    }

    public void ResumeTransition()
    {
        _transition = "ResumeTransition";
        getState().ResumeTransition(this);
        _transition = "";
        return;
    }

    public void SendTransition()
    {
        _transition = "SendTransition";
        getState().SendTransition(this);
        _transition = "";
        return;
    }

    public void SetAuthorityTransition()
    {
        _transition = "SetAuthorityTransition";
        getState().SetAuthorityTransition(this);
        _transition = "";
        return;
    }

    public void SetEmergencyTransition()
    {
        _transition = "SetEmergencyTransition";
        getState().SetEmergencyTransition(this);
        _transition = "";
        return;
    }

    public void ShutdownTransition()
    {
        _transition = "ShutdownTransition";
        getState().ShutdownTransition(this);
        _transition = "";
        return;
    }

    public void StandbyTransition()
    {
        _transition = "StandbyTransition";
        getState().StandbyTransition(this);
        _transition = "";
        return;
    }

    public void TimeoutTransition()
    {
        _transition = "TimeoutTransition";
        getState().TimeoutTransition(this);
        _transition = "";
        return;
    }

    public void UpdateEventTransition()
    {
        _transition = "UpdateEventTransition";
        getState().UpdateEventTransition(this);
        _transition = "";
        return;
    }

    public Management_ReceiveFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((Management_ReceiveFSMState) _state);
    }

    protected Management_ReceiveFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(Management_ReceiveFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private Management_ReceiveFSM _owner;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class Management_ReceiveFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Management_ReceiveFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(Management_ReceiveFSMContext context) {}
        protected void Exit(Management_ReceiveFSMContext context) {}

        protected void BroadcastGlobalTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void BroadcastLocalTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CancelEventTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ClearEmergencyTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CommandCompletedTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CommandExpiredTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CreateCommandEventTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CreateEventTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void EventErrorTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void EventOccurredTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void FailureTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void InitializedTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void QueryAuthorityTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryControlTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryEventTimeoutTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryEventsTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryStatusTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryTimeoutTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, SetAuthority msg)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, ClearEmergency msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Resume msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(Management_ReceiveFSMContext context, Standby msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReleaseControlTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void RequestControlTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ResetTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ResumeTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void SendTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void SetAuthorityTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void SetEmergencyTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ShutdownTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void StandbyTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void TimeoutTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void UpdateEventTransition(Management_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void Default(Management_ReceiveFSMContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class Management_ReceiveFSM_SM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available_Standby Receiving_Ready_NotControlled_Available_Standby =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available_Standby("Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby", 0);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Init Receiving_Ready_NotControlled_NotAvailable_Init =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Init("Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init", 1);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Failure Receiving_Ready_NotControlled_NotAvailable_Failure =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Failure("Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure", 2);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Shutdown Receiving_Ready_NotControlled_NotAvailable_Shutdown =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Shutdown("Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown", 3);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Emergency Receiving_Ready_NotControlled_NotAvailable_Emergency =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Emergency("Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency", 4);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Standby Receiving_Ready_Controlled_Available_Standby =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Standby("Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby", 5);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Ready Receiving_Ready_Controlled_Available_Ready =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Ready("Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready", 6);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable_Emergency Receiving_Ready_Controlled_NotAvailable_Emergency =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable_Emergency("Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency", 7);
        public static final Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE =
            new Management_ReceiveFSM_SM_Default.Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE("Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE", 8);
        private static final Management_ReceiveFSM_SM_Default Default =
            new Management_ReceiveFSM_SM_Default("Management_ReceiveFSM_SM.Default", -1);

    }

    protected static class Management_ReceiveFSM_SM_Default
        extends Management_ReceiveFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Management_ReceiveFSM_SM_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Inner classse.
    //


        private static final class Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available_Standby
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available_Standby(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                (context.getState()).Entry(context);
            }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Init
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Init(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InitializedTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InitializedTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                (context.getState()).Entry(context);
            }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Failure
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Failure(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Shutdown
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Shutdown(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Emergency
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable_Emergency(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.FailureTransition()");
                }


                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
            }
                finally
            {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
            }
                finally
            {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(Reset msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetAuthority msg)
                {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(SetAuthority msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg)
                {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(Shutdown msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, ClearEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(ClearEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isIDStored( transportData ))
                {

                    (context.getState()).Exit(context);
                context.clearState();
                try
                {
                        ctxt.popWrapper_367bc5868aa53b23a6c5a07701058fbf(msg, transportData);
                        ctxt.processNotifications(context.peakTopStateStack(), null);
                }
                finally
                {
                        context.popState();
                }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportStatus", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
                }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", null);
                    }
                    finally
                    {
                        context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void TimeoutTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency.TimeoutTransition()");
                }


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Standby
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Standby(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                    }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.ReceiveTransition(Reset msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.initializeAction();
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Resume msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.ReceiveTransition(Resume msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby.ReceiveTransition(Shutdown msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Ready
            extends Management_ReceiveFSM_SM_Default
            {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_Controlled_Available_Ready(String name, int id)
            {
                super (name, id);
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.FailureTransition()");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                    }

                    Management_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                    ctxt.SendAction("ReportStatus", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.ReceiveTransition(Reset msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.initializeAction();
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.ReceiveTransition(Shutdown msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Standby msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready.ReceiveTransition(Standby msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", null);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
                }

        private static final class Management_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable_Emergency
            extends Management_ReceiveFSM_SM_Default
                {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable_Emergency(String name, int id)
                    {
                super (name, id);
                    }

            protected void FailureTransition(Management_ReceiveFSMContext context)
                    {

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.FailureTransition()");
                    }


                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
        {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
            }
                finally
            {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Ready", ie);
            }
                finally
            {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Ready);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_Available_StandbyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available_Standby", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_Available_Standby);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_Available_StandbyTransition(InternalEvent ie)");
                }


                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available_Standby", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available_Standby);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                    }
                return;
                }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(Management_ReceiveFSMContext context, InternalEvent ie)
                {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                    {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_EmergencyTransition(InternalEvent ie)");
                    }


                (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Emergency", ie);
                    }
                    finally
                    {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                    }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_FailureTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Failure", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Failure);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_InitTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initializeAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(Management_ReceiveFSMContext context, InternalEvent ie)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailable_ShutdownTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", ie);
                }
                finally
                {
                    context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(Reset msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetAuthority msg)
                {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(SetAuthority msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg)
                {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(Shutdown msg)");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, ClearEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(ClearEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isIDStored( transportData ))
                {

                    (context.getState()).Exit(context);
                context.clearState();
                try
                {
                        ctxt.popWrapper_1014a7ff54cb3a51af2f80235d77d9d1(msg, transportData);
                        ctxt.processNotifications(context.peakTopStateStack(), null);
                }
                finally
                {
                        context.popState();
                }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, QueryStatus msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(QueryStatus msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportStatus", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("RejectControl", "NOT_AVAILABLE", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Reset msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(Reset msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.initializeAction();
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Init", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Init);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, SetEmergency msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(SetEmergency msg, Receive.Body.ReceiveRec transportData)");
                }

                Management_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.StoreIDAction(transportData);
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable_Emergency", null);
                }
                finally
                {
                    context.setState(endState);
                    context.pushState(Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context, Shutdown msg, Receive.Body.ReceiveRec transportData)
            {
                Management_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.ReceiveTransition(Shutdown msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable_Shutdown", null);
                    }
                    finally
                    {
                        context.setState(Management_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable_Shutdown);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void TimeoutTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable_Emergency.TimeoutTransition()");
                }


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE
            extends Management_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(String name, int id)
            {
                super (name, id);
            }

            protected void BroadcastGlobalTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastGlobalTransition()");
                }


                return;
            }

            protected void BroadcastLocalTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastLocalTransition()");
                }


                return;
            }

            protected void CancelEventTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CancelEventTransition()");
                }


                return;
            }

            protected void ClearEmergencyTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ClearEmergencyTransition()");
                }


                return;
            }

            protected void CommandCompletedTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CommandCompletedTransition()");
                }


                return;
            }

            protected void CommandExpiredTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CommandExpiredTransition()");
                }


                return;
            }

            protected void CreateCommandEventTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateCommandEventTransition()");
                }


                return;
            }

            protected void CreateEventTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateEventTransition()");
                }


                return;
            }

            protected void EventErrorTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.EventErrorTransition()");
                }


                return;
            }

            protected void EventOccurredTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.EventOccurredTransition()");
                }


                return;
            }

            protected void FailureTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.FailureTransition()");
                }


                return;
            }

            protected void InitializedTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.InitializedTransition()");
                }


                return;
            }

            protected void QueryAuthorityTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryAuthorityTransition()");
                }


                return;
            }

            protected void QueryControlTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryControlTransition()");
                }


                return;
            }

            protected void QueryEventTimeoutTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventTimeoutTransition()");
                }


                return;
            }

            protected void QueryEventsTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventsTransition()");
                }


                return;
            }

            protected void QueryStatusTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryStatusTransition()");
                }


                return;
            }

            protected void QueryTimeoutTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryTimeoutTransition()");
                }


                return;
            }

            protected void ReceiveTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ReceiveTransition()");
                }


                return;
            }

            protected void ReleaseControlTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ReleaseControlTransition()");
                }


                return;
            }

            protected void RequestControlTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.RequestControlTransition()");
                }


                return;
            }

            protected void ResetTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ResetTransition()");
                }


                return;
            }

            protected void ResumeTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ResumeTransition()");
                }


                return;
            }

            protected void SendTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.SendTransition()");
                }


                return;
            }

            protected void SetAuthorityTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.SetAuthorityTransition()");
                }


                return;
            }

            protected void SetEmergencyTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.SetEmergencyTransition()");
                }


                return;
            }

            protected void ShutdownTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ShutdownTransition()");
                }


                return;
            }

            protected void StandbyTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.StandbyTransition()");
                }


                return;
            }

            protected void TimeoutTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.TimeoutTransition()");
                }


                return;
            }

            protected void UpdateEventTransition(Management_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : Management_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.UpdateEventTransition()");
                }


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
