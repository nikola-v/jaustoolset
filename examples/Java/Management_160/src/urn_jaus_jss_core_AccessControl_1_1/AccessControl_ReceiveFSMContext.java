/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AccessControl_ReceiveFSM.sm
 */

package src.urn_jaus_jss_core_AccessControl_1_1;

import framework.internalEvents.*;
import src.urn_jaus_jss_core_AccessControl_1_1.InternalEvents.*;
import src.urn_jaus_jss_core_AccessControl_1_1.Messages.*;
import java.io.PrintStream;

public class AccessControl_ReceiveFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public AccessControl_ReceiveFSMContext(AccessControl_ReceiveFSM owner)
    {
        super (AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);

        _owner = owner;
    }

    public AccessControl_ReceiveFSMContext(AccessControl_ReceiveFSM owner, AccessControl_ReceiveFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void BroadcastGlobalTransition()
    {
        _transition = "BroadcastGlobalTransition";
        getState().BroadcastGlobalTransition(this);
        _transition = "";
        return;
    }

    public void BroadcastLocalTransition()
    {
        _transition = "BroadcastLocalTransition";
        getState().BroadcastLocalTransition(this);
        _transition = "";
        return;
    }

    public void CancelEventTransition()
    {
        _transition = "CancelEventTransition";
        getState().CancelEventTransition(this);
        _transition = "";
        return;
    }

    public void CommandCompletedTransition()
    {
        _transition = "CommandCompletedTransition";
        getState().CommandCompletedTransition(this);
        _transition = "";
        return;
    }

    public void CommandExpiredTransition()
    {
        _transition = "CommandExpiredTransition";
        getState().CommandExpiredTransition(this);
        _transition = "";
        return;
    }

    public void CreateCommandEventTransition()
    {
        _transition = "CreateCommandEventTransition";
        getState().CreateCommandEventTransition(this);
        _transition = "";
        return;
    }

    public void CreateEventTransition()
    {
        _transition = "CreateEventTransition";
        getState().CreateEventTransition(this);
        _transition = "";
        return;
    }

    public void EventErrorTransition()
    {
        _transition = "EventErrorTransition";
        getState().EventErrorTransition(this);
        _transition = "";
        return;
    }

    public void EventOccurredTransition()
    {
        _transition = "EventOccurredTransition";
        getState().EventOccurredTransition(this);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition";
        getState().InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(this, ie);
        _transition = "";
        return;
    }

    public void QueryAuthorityTransition()
    {
        _transition = "QueryAuthorityTransition";
        getState().QueryAuthorityTransition(this);
        _transition = "";
        return;
    }

    public void QueryControlTransition()
    {
        _transition = "QueryControlTransition";
        getState().QueryControlTransition(this);
        _transition = "";
        return;
    }

    public void QueryEventTimeoutTransition()
    {
        _transition = "QueryEventTimeoutTransition";
        getState().QueryEventTimeoutTransition(this);
        _transition = "";
        return;
    }

    public void QueryEventsTransition()
    {
        _transition = "QueryEventsTransition";
        getState().QueryEventsTransition(this);
        _transition = "";
        return;
    }

    public void QueryTimeoutTransition()
    {
        _transition = "QueryTimeoutTransition";
        getState().QueryTimeoutTransition(this);
        _transition = "";
        return;
    }

    public void ReceiveTransition()
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this);
        _transition = "";
        return;
    }

    public void ReceiveTransition(QueryAuthority msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(QueryControl msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(QueryTimeout msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReceiveTransition(SetAuthority msg, Receive.Body.ReceiveRec transportData)
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this, msg, transportData);
        _transition = "";
        return;
    }

    public void ReleaseControlTransition()
    {
        _transition = "ReleaseControlTransition";
        getState().ReleaseControlTransition(this);
        _transition = "";
        return;
    }

    public void RequestControlTransition()
    {
        _transition = "RequestControlTransition";
        getState().RequestControlTransition(this);
        _transition = "";
        return;
    }

    public void SendTransition()
    {
        _transition = "SendTransition";
        getState().SendTransition(this);
        _transition = "";
        return;
    }

    public void SetAuthorityTransition()
    {
        _transition = "SetAuthorityTransition";
        getState().SetAuthorityTransition(this);
        _transition = "";
        return;
    }

    public void TimeoutTransition()
    {
        _transition = "TimeoutTransition";
        getState().TimeoutTransition(this);
        _transition = "";
        return;
    }

    public void UpdateEventTransition()
    {
        _transition = "UpdateEventTransition";
        getState().UpdateEventTransition(this);
        _transition = "";
        return;
    }

    public AccessControl_ReceiveFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AccessControl_ReceiveFSMState) _state);
    }

    protected AccessControl_ReceiveFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(AccessControl_ReceiveFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AccessControl_ReceiveFSM _owner;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class AccessControl_ReceiveFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AccessControl_ReceiveFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AccessControl_ReceiveFSMContext context) {}
        protected void Exit(AccessControl_ReceiveFSMContext context) {}

        protected void BroadcastGlobalTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void BroadcastLocalTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CancelEventTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CommandCompletedTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CommandExpiredTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CreateCommandEventTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void CreateEventTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void EventErrorTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void EventOccurredTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void QueryAuthorityTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryControlTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryEventTimeoutTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryEventsTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void QueryTimeoutTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryAuthority msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryControl msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryTimeout msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, SetAuthority msg, Receive.Body.ReceiveRec transportData)
        {
            Default(context);
        }

        protected void ReleaseControlTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void RequestControlTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void SendTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void SetAuthorityTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void TimeoutTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void UpdateEventTransition(AccessControl_ReceiveFSMContext context)
        {
            Default(context);
        }

        protected void Default(AccessControl_ReceiveFSMContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class AccessControl_ReceiveFSM_SM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available Receiving_Ready_NotControlled_Available =
            new AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available("AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available", 0);
        public static final AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable Receiving_Ready_NotControlled_NotAvailable =
            new AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable("AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable", 1);
        public static final AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_Available Receiving_Ready_Controlled_Available =
            new AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_Available("AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available", 2);
        public static final AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable Receiving_Ready_Controlled_NotAvailable =
            new AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable("AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable", 3);
        public static final AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE =
            new AccessControl_ReceiveFSM_SM_Default.AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE("AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE", 4);
        private static final AccessControl_ReceiveFSM_SM_Default Default =
            new AccessControl_ReceiveFSM_SM_Default("AccessControl_ReceiveFSM_SM.Default", -1);

    }

    protected static class AccessControl_ReceiveFSM_SM_Default
        extends AccessControl_ReceiveFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AccessControl_ReceiveFSM_SM_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Inner classse.
    //


        private static final class AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available
            extends AccessControl_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_Available(String name, int id)
            {
                super (name, id);
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.ReceiveTransition(QueryAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportAuthority", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.ReceiveTransition(QueryControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportControl", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryTimeout msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.ReceiveTransition(QueryTimeout msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportTimeout", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isDefaultAuthorityGreater(msg))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.SendAction("ConfirmControl", "INSUFFICIENT_AUTHORITY", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else if (! ctxt.isDefaultAuthorityGreater(msg))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.StoreAddressAction(transportData);
                        ctxt.SetAuthorityAction(msg);
                        ctxt.ResetTimerAction();
                        ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                        ctxt.processNotifications("Receiving_Ready_Controlled_Available", null);
                    }
                    finally
                    {
                        context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                        (context.getState()).Entry(context);
                    }
                }                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable
            extends AccessControl_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled_NotAvailable(String name, int id)
            {
                super (name, id);
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.ReceiveTransition(QueryAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportAuthority", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.ReceiveTransition(QueryControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportControl", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryTimeout msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.ReceiveTransition(QueryTimeout msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportTimeout", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_Available
            extends AccessControl_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_Available(String name, int id)
            {
                super (name, id);
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(QueryAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportAuthority", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(QueryControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportControl", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryTimeout msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(QueryTimeout msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportTimeout", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isControllingClient( transportData ))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.initAction();
                        ctxt.processNotifications("Receiving_Ready_NotControlled_Available", null);
                    }
                    finally
                    {
                        context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                        (context.getState()).Entry(context);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isCurrentAuthorityLess(msg) && ! ctxt.isControllingClient( transportData ))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.StoreAddressAction(transportData);
                        ctxt.SetAuthorityAction(msg);
                        ctxt.ResetTimerAction();
                        ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else if (! ctxt.isCurrentAuthorityLess(msg) && ! ctxt.isControllingClient( transportData ))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.SendAction("ConfirmControl", "INSUFFICIENT_AUTHORITY", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else if (! ctxt.isDefaultAuthorityGreater(msg) && ctxt.isControllingClient( transportData ))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.ResetTimerAction();
                        ctxt.SetAuthorityAction(msg);
                        ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else if (ctxt.isDefaultAuthorityGreater(msg) && ctxt.isControllingClient(transportData))
                {

                    (context.getState()).Exit(context);
                    context.clearState();
                    try
                    {
                        ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                        ctxt.initAction();
                        ctxt.processNotifications("Receiving_Ready_NotControlled_Available", null);
                    }
                    finally
                    {
                        context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                        (context.getState()).Entry(context);
                    }
                }                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, SetAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.ReceiveTransition(SetAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isAuthorityValid(msg) && ctxt.isControllingClient( transportData ))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.SetAuthorityAction(msg);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void TimeoutTransition(AccessControl_ReceiveFSMContext context)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available.TimeoutTransition()");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", null);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable
            extends AccessControl_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled_NotAvailable(String name, int id)
            {
                super (name, id);
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_Controlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.processNotifications("Receiving_Ready_Controlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_AvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_Available", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_Available);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(AccessControl_ReceiveFSMContext context, InternalEvent ie)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlled_NotAvailableTransition(InternalEvent ie)");
                }


                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.initAction();
                    ctxt.processNotifications("Receiving_Ready_NotControlled_NotAvailable", ie);
                }
                finally
                {
                    context.setState(AccessControl_ReceiveFSM_SM.Receiving_Ready_NotControlled_NotAvailable);
                    (context.getState()).Entry(context);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(QueryAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportAuthority", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(QueryControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportControl", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, QueryTimeout msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(QueryTimeout msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ReportTimeout", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, ReleaseControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(ReleaseControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("RejectControl", "NOT_AVAILABLE", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, RequestControl msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(RequestControl msg, Receive.Body.ReceiveRec transportData)");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context, SetAuthority msg, Receive.Body.ReceiveRec transportData)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.ReceiveTransition(SetAuthority msg, Receive.Body.ReceiveRec transportData)");
                }

                if (ctxt.isAuthorityValid(msg) && ctxt.isControllingClient( transportData ))
                {
                    AccessControl_ReceiveFSMState endState = context.getState();

                    context.clearState();
                    try
                    {
                        ctxt.SetAuthorityAction(msg);
                    }
                    finally
                    {
                        context.setState(endState);
                    }
                }
                else
                {
                    super.ReceiveTransition(context, msg, transportData);
                }

                return;
            }

            protected void TimeoutTransition(AccessControl_ReceiveFSMContext context)
            {
                AccessControl_ReceiveFSM ctxt = context.getOwner();

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Receiving_Ready_Controlled_NotAvailable.TimeoutTransition()");
                }

                AccessControl_ReceiveFSMState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.resetTimerAction();
                }
                finally
                {
                    context.setState(endState);
                }
                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

        private static final class AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE
            extends AccessControl_ReceiveFSM_SM_Default
        {
        //-------------------------------------------------------
        // Member methods.
        //

            private AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(String name, int id)
            {
                super (name, id);
            }

            protected void BroadcastGlobalTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastGlobalTransition()");
                }


                return;
            }

            protected void BroadcastLocalTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastLocalTransition()");
                }


                return;
            }

            protected void CancelEventTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CancelEventTransition()");
                }


                return;
            }

            protected void CommandCompletedTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CommandCompletedTransition()");
                }


                return;
            }

            protected void CommandExpiredTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CommandExpiredTransition()");
                }


                return;
            }

            protected void CreateCommandEventTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateCommandEventTransition()");
                }


                return;
            }

            protected void CreateEventTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateEventTransition()");
                }


                return;
            }

            protected void EventErrorTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.EventErrorTransition()");
                }


                return;
            }

            protected void EventOccurredTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.EventOccurredTransition()");
                }


                return;
            }

            protected void QueryAuthorityTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryAuthorityTransition()");
                }


                return;
            }

            protected void QueryControlTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryControlTransition()");
                }


                return;
            }

            protected void QueryEventTimeoutTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventTimeoutTransition()");
                }


                return;
            }

            protected void QueryEventsTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventsTransition()");
                }


                return;
            }

            protected void QueryTimeoutTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryTimeoutTransition()");
                }


                return;
            }

            protected void ReceiveTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ReceiveTransition()");
                }


                return;
            }

            protected void ReleaseControlTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.ReleaseControlTransition()");
                }


                return;
            }

            protected void RequestControlTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.RequestControlTransition()");
                }


                return;
            }

            protected void SendTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.SendTransition()");
                }


                return;
            }

            protected void SetAuthorityTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.SetAuthorityTransition()");
                }


                return;
            }

            protected void TimeoutTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.TimeoutTransition()");
                }


                return;
            }

            protected void UpdateEventTransition(AccessControl_ReceiveFSMContext context)
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("TRANSITION   : AccessControl_ReceiveFSM_SM.Internally_Generated_State_DO_NOT_USE.UpdateEventTransition()");
                }


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
