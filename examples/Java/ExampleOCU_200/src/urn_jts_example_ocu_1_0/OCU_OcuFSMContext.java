/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : OCU_OcuFSMContext.sm
 */

package src.urn_jts_example_ocu_1_0;

import framework.internalEvents.*;
import src.urn_jts_example_ocu_1_0.InternalEvents.*;
import src.urn_jts_example_ocu_1_0.Messages.*;
import java.io.PrintStream;

public class OCU_OcuFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public OCU_OcuFSMContext(OCU_OcuFSM owner)
    {
        super (OCU_OcuFSM_SM.FindDiscoveryServer);
        //setDebugFlag(true);
        _owner = owner;
    }

    public OCU_OcuFSMContext(OCU_OcuFSM owner, OCU_OcuFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void ConfirmControlTransition()
    {
        _transition = "ConfirmControlTransition";
        getState().ConfirmControlTransition(this);
        _transition = "";
        return;
    }

    public void ConfirmControlTransition(ConfirmControl msg)
    {
        _transition = "ConfirmControlTransition";
        getState().ConfirmControlTransition(this, msg);
        _transition = "";
        return;
    }

    public void ConfirmElementRequestTransition()
    {
        _transition = "ConfirmElementRequestTransition";
        getState().ConfirmElementRequestTransition(this);
        _transition = "";
        return;
    }

    public void ConfirmElementRequestTransition(ConfirmElementRequest msg)
    {
        _transition = "ConfirmElementRequestTransition";
        getState().ConfirmElementRequestTransition(this, msg);
        _transition = "";
        return;
    }

    public void GuiControlEnteredTransition()
    {
        _transition = "GuiControlEnteredTransition";
        getState().GuiControlEnteredTransition(this);
        _transition = "";
        return;
    }

    public void GuiControlEnteredTransition(GuiControlEntered msg)
    {
        _transition = "GuiControlEnteredTransition";
        getState().GuiControlEnteredTransition(this, msg);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition";
        getState().InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition";
        getState().InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_OCU_OcuFSM_RunningTransition";
        getState().InternalStateChange_To_OCU_OcuFSM_RunningTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition";
        getState().InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(this, ie);
        _transition = "";
        return;
    }

    public void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)
    {
        _transition = "InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition";
        getState().InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(this, ie);
        _transition = "";
        return;
    }

    public void ReportActiveElementTransition()
    {
        _transition = "ReportActiveElementTransition";
        getState().ReportActiveElementTransition(this);
        _transition = "";
        return;
    }

    public void ReportActiveElementTransition(ReportActiveElement msg)
    {
        _transition = "ReportActiveElementTransition";
        getState().ReportActiveElementTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReportControlTransition()
    {
        _transition = "ReportControlTransition";
        getState().ReportControlTransition(this);
        _transition = "";
        return;
    }

    public void ReportIdentificationTransition()
    {
        _transition = "ReportIdentificationTransition";
        getState().ReportIdentificationTransition(this);
        _transition = "";
        return;
    }

    public void ReportIdentificationTransition(long source_id)
    {
        _transition = "ReportIdentificationTransition";
        getState().ReportIdentificationTransition(this, source_id);
        _transition = "";
        return;
    }

    public void ReportLocalPoseTransition()
    {
        _transition = "ReportLocalPoseTransition";
        getState().ReportLocalPoseTransition(this);
        _transition = "";
        return;
    }

    public void ReportLocalPoseTransition(ReportLocalPose msg)
    {
        _transition = "ReportLocalPoseTransition";
        getState().ReportLocalPoseTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReportLocalWaypointTransition()
    {
        _transition = "ReportLocalWaypointTransition";
        getState().ReportLocalWaypointTransition(this);
        _transition = "";
        return;
    }

    public void ReportLocalWaypointTransition(ReportLocalWaypoint msg)
    {
        _transition = "ReportLocalWaypointTransition";
        getState().ReportLocalWaypointTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReportServicesTransition()
    {
        _transition = "ReportServicesTransition";
        getState().ReportServicesTransition(this);
        _transition = "";
        return;
    }

    public void ReportServicesTransition(ReportServices msg)
    {
        _transition = "ReportServicesTransition";
        getState().ReportServicesTransition(this, msg);
        _transition = "";
        return;
    }

    public void ReportStatusTransition()
    {
        _transition = "ReportStatusTransition";
        getState().ReportStatusTransition(this);
        _transition = "";
        return;
    }

    public void ReportStatusTransition(ReportStatus msg)
    {
        _transition = "ReportStatusTransition";
        getState().ReportStatusTransition(this, msg);
        _transition = "";
        return;
    }

    public OCU_OcuFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((OCU_OcuFSMState) _state);
    }

    protected OCU_OcuFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(OCU_OcuFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private OCU_OcuFSM _owner;

    public static abstract class OCU_OcuFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected OCU_OcuFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(OCU_OcuFSMContext context) {}
        protected void Exit(OCU_OcuFSMContext context) {}

        protected void ConfirmControlTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ConfirmControlTransition(OCU_OcuFSMContext context, ConfirmControl msg)
        {
            Default(context);
        }

        protected void ConfirmElementRequestTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ConfirmElementRequestTransition(OCU_OcuFSMContext context, ConfirmElementRequest msg)
        {
            Default(context);
        }

        protected void GuiControlEnteredTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void GuiControlEnteredTransition(OCU_OcuFSMContext context, GuiControlEntered msg)
        {
            Default(context);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_RunningTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            Default(context);
        }

        protected void ReportActiveElementTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportActiveElementTransition(OCU_OcuFSMContext context, ReportActiveElement msg)
        {
            Default(context);
        }

        protected void ReportControlTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportIdentificationTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportIdentificationTransition(OCU_OcuFSMContext context, long source_id)
        {
            Default(context);
        }

        protected void ReportLocalPoseTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportLocalPoseTransition(OCU_OcuFSMContext context, ReportLocalPose msg)
        {
            Default(context);
        }

        protected void ReportLocalWaypointTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportLocalWaypointTransition(OCU_OcuFSMContext context, ReportLocalWaypoint msg)
        {
            Default(context);
        }

        protected void ReportServicesTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportServicesTransition(OCU_OcuFSMContext context, ReportServices msg)
        {
            Default(context);
        }

        protected void ReportStatusTransition(OCU_OcuFSMContext context)
        {
            Default(context);
        }

        protected void ReportStatusTransition(OCU_OcuFSMContext context, ReportStatus msg)
        {
            Default(context);
        }

        protected void Default(OCU_OcuFSMContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class OCU_OcuFSM_SM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final OCU_OcuFSM_SM_FindDiscoveryServer FindDiscoveryServer =
            new OCU_OcuFSM_SM_FindDiscoveryServer("OCU_OcuFSM_SM.FindDiscoveryServer", 0);
        public static final OCU_OcuFSM_SM_FindWaypointDriver FindWaypointDriver =
            new OCU_OcuFSM_SM_FindWaypointDriver("OCU_OcuFSM_SM.FindWaypointDriver", 1);
        public static final OCU_OcuFSM_SM_WaitForControl WaitForControl =
            new OCU_OcuFSM_SM_WaitForControl("OCU_OcuFSM_SM.WaitForControl", 2);
        public static final OCU_OcuFSM_SM_WaitForResume WaitForResume =
            new OCU_OcuFSM_SM_WaitForResume("OCU_OcuFSM_SM.WaitForResume", 3);
        public static final OCU_OcuFSM_SM_Running Running =
            new OCU_OcuFSM_SM_Running("OCU_OcuFSM_SM.Running", 4);
        public static final OCU_OcuFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE =
            new OCU_OcuFSM_SM_Internally_Generated_State_DO_NOT_USE("OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE", 5);
        private static final OCU_OcuFSM_SM_Default Default =
            new OCU_OcuFSM_SM_Default("OCU_OcuFSM_SM.Default", -1);

    }

    protected static class OCU_OcuFSM_SM_Default
        extends OCU_OcuFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected OCU_OcuFSM_SM_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_FindDiscoveryServer
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_FindDiscoveryServer(String name, int id)
        {
            super (name, id);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindDiscoveryServer");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryServicesAction();
                ctxt.processNotifications("FindWaypointDriver", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindWaypointDriver);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_RunningTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindDiscoveryServer");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.setupQueryTimerAction();
                ctxt.processNotifications("Running", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.Running);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindDiscoveryServer");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendRequestControlAction();
                ctxt.processNotifications("WaitForControl", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForControl);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindDiscoveryServer");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryStatusAction();
                ctxt.sendResumeAction();
                ctxt.processNotifications("WaitForResume", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForResume);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void ReportIdentificationTransition(OCU_OcuFSMContext context, long source_id)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindDiscoveryServer");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.ReportIdentificationTransition(long source_id)");
            }

            context.clearState();
            try
            {
                ctxt.saveDiscoveryServerIDAction(source_id);
                ctxt.sendQueryServicesAction();
                ctxt.processNotifications("FindWaypointDriver", null);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindDiscoveryServer.ReportIdentificationTransition(long source_id)");
                }

                context.setState(OCU_OcuFSM_SM.FindWaypointDriver);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_FindWaypointDriver
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_FindWaypointDriver(String name, int id)
        {
            super (name, id);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindWaypointDriver");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryIdentificationAction();
                ctxt.processNotifications("FindDiscoveryServer", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindDiscoveryServer);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_RunningTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindWaypointDriver");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.setupQueryTimerAction();
                ctxt.processNotifications("Running", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.Running);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindWaypointDriver");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendRequestControlAction();
                ctxt.processNotifications("WaitForControl", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForControl);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindWaypointDriver");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryStatusAction();
                ctxt.sendResumeAction();
                ctxt.processNotifications("WaitForResume", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForResume);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void ReportServicesTransition(OCU_OcuFSMContext context, ReportServices msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.FindWaypointDriver");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.ReportServicesTransition(ReportServices msg)");
            }

            context.clearState();
            try
            {
                ctxt.findWaypointDriverAction(msg);
                ctxt.sendRequestControlAction();
                ctxt.processNotifications("WaitForControl", null);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.FindWaypointDriver.ReportServicesTransition(ReportServices msg)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForControl);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_WaitForControl
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_WaitForControl(String name, int id)
        {
            super (name, id);
        }

        protected void ConfirmControlTransition(OCU_OcuFSMContext context, ConfirmControl msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForControl");
            }
            if (! ctxt.isControlAccepted(msg))
            {

                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.ConfirmControlTransition(ConfirmControl msg)");
                }

                // No actions.
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.ConfirmControlTransition(ConfirmControl msg)");
                }

            }
            else if (ctxt.isControlAccepted(msg))
            {

                (context.getState()).Exit(context);
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.ConfirmControlTransition(ConfirmControl msg)");
                }

                context.clearState();
                try
                {
                    ctxt.sendQueryStatusAction();
                    ctxt.sendResumeAction();
                    ctxt.processNotifications("WaitForResume", null);
                }
                finally
                {
                    if (context.getDebugFlag() == true)
                    {
                        PrintStream str = context.getDebugStream();

                        str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.ConfirmControlTransition(ConfirmControl msg)");
                    }

                    context.setState(OCU_OcuFSM_SM.WaitForResume);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.ConfirmControlTransition(context, msg);
            }

            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForControl");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryIdentificationAction();
                ctxt.processNotifications("FindDiscoveryServer", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindDiscoveryServer);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForControl");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryServicesAction();
                ctxt.processNotifications("FindWaypointDriver", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindWaypointDriver);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_RunningTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForControl");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.setupQueryTimerAction();
                ctxt.processNotifications("Running", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.Running);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForControl");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryStatusAction();
                ctxt.sendResumeAction();
                ctxt.processNotifications("WaitForResume", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForControl.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForResume);
                (context.getState()).Entry(context);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_WaitForResume
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_WaitForResume(String name, int id)
        {
            super (name, id);
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForResume");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryIdentificationAction();
                ctxt.processNotifications("FindDiscoveryServer", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindDiscoveryServer);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForResume");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryServicesAction();
                ctxt.processNotifications("FindWaypointDriver", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindWaypointDriver);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_RunningTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForResume");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.setupQueryTimerAction();
                ctxt.processNotifications("Running", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_RunningTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.Running);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForResume");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendRequestControlAction();
                ctxt.processNotifications("WaitForControl", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForControl);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void ReportStatusTransition(OCU_OcuFSMContext context, ReportStatus msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.WaitForResume");
            }
            if (! ctxt.inReadyState(msg))
            {

                (context.getState()).Exit(context);
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.ReportStatusTransition(ReportStatus msg)");
                }

                context.clearState();
                try
                {
                    ctxt.sendQueryStatusAction();
                    ctxt.sendResumeAction();
                    ctxt.processNotifications("WaitForResume", null);
                }
                finally
                {
                    if (context.getDebugFlag() == true)
                    {
                        PrintStream str = context.getDebugStream();

                        str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.ReportStatusTransition(ReportStatus msg)");
                    }

                    context.setState(OCU_OcuFSM_SM.WaitForResume);
                    (context.getState()).Entry(context);
                }
            }
            else if (ctxt.inReadyState(msg))
            {

                (context.getState()).Exit(context);
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.ReportStatusTransition(ReportStatus msg)");
                }

                context.clearState();
                try
                {
                    ctxt.setupQueryTimerAction();
                    ctxt.processNotifications("Running", null);
                }
                finally
                {
                    if (context.getDebugFlag() == true)
                    {
                        PrintStream str = context.getDebugStream();

                        str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.WaitForResume.ReportStatusTransition(ReportStatus msg)");
                    }

                    context.setState(OCU_OcuFSM_SM.Running);
                    (context.getState()).Entry(context);
                }
            }            else
            {
                super.ReportStatusTransition(context, msg);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_Running
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_Running(String name, int id)
        {
            super (name, id);
        }

        protected void ConfirmElementRequestTransition(OCU_OcuFSMContext context, ConfirmElementRequest msg)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ConfirmElementRequestTransition(ConfirmElementRequest msg)");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ConfirmElementRequestTransition(ConfirmElementRequest msg)");
            }

            return;
        }

        protected void GuiControlEnteredTransition(OCU_OcuFSMContext context, GuiControlEntered msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }
            OCU_OcuFSMState endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.GuiControlEnteredTransition(GuiControlEntered msg)");
            }

            context.clearState();
            try
            {
                ctxt.sendControlMessageAction(msg);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.GuiControlEnteredTransition(GuiControlEntered msg)");
                }

                context.setState(endState);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryIdentificationAction();
                ctxt.processNotifications("FindDiscoveryServer", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_FindDiscoveryServerTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindDiscoveryServer);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryServicesAction();
                ctxt.processNotifications("FindWaypointDriver", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_FindWaypointDriverTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.FindWaypointDriver);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendRequestControlAction();
                ctxt.processNotifications("WaitForControl", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_WaitForControlTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForControl);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(OCU_OcuFSMContext context, InternalEvent ie)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }

            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
            }

            context.clearState();
            try
            {
                ctxt.sendQueryStatusAction();
                ctxt.sendResumeAction();
                ctxt.processNotifications("WaitForResume", ie);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.InternalStateChange_To_OCU_OcuFSM_WaitForResumeTransition(InternalEvent ie)");
                }

                context.setState(OCU_OcuFSM_SM.WaitForResume);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void ReportActiveElementTransition(OCU_OcuFSMContext context, ReportActiveElement msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }
            OCU_OcuFSMState endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportActiveElementTransition(ReportActiveElement msg)");
            }

            context.clearState();
            try
            {
                ctxt.printDebugAction(msg);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportActiveElementTransition(ReportActiveElement msg)");
                }

                context.setState(endState);
            }
            return;
        }

        protected void ReportLocalPoseTransition(OCU_OcuFSMContext context, ReportLocalPose msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }
            OCU_OcuFSMState endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportLocalPoseTransition(ReportLocalPose msg)");
            }

            context.clearState();
            try
            {
                ctxt.saveLocalPoseAction(msg);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportLocalPoseTransition(ReportLocalPose msg)");
                }

                context.setState(endState);
            }
            return;
        }

        protected void ReportLocalWaypointTransition(OCU_OcuFSMContext context, ReportLocalWaypoint msg)
        {
            OCU_OcuFSM ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Running");
            }
            OCU_OcuFSMState endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportLocalWaypointTransition(ReportLocalWaypoint msg)");
            }

            context.clearState();
            try
            {
                ctxt.saveTargetDataAction(msg);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Running.ReportLocalWaypointTransition(ReportLocalWaypoint msg)");
                }

                context.setState(endState);
            }
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OCU_OcuFSM_SM_Internally_Generated_State_DO_NOT_USE
        extends OCU_OcuFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OCU_OcuFSM_SM_Internally_Generated_State_DO_NOT_USE(String name, int id)
        {
            super (name, id);
        }

        protected void ConfirmControlTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ConfirmControlTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ConfirmControlTransition()");
            }

            return;
        }

        protected void ConfirmElementRequestTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ConfirmElementRequestTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ConfirmElementRequestTransition()");
            }

            return;
        }

        protected void GuiControlEnteredTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.GuiControlEnteredTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.GuiControlEnteredTransition()");
            }

            return;
        }

        protected void ReportActiveElementTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportActiveElementTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportActiveElementTransition()");
            }

            return;
        }

        protected void ReportControlTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportControlTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportControlTransition()");
            }

            return;
        }

        protected void ReportIdentificationTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportIdentificationTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportIdentificationTransition()");
            }

            return;
        }

        protected void ReportLocalPoseTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportLocalPoseTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportLocalPoseTransition()");
            }

            return;
        }

        protected void ReportLocalWaypointTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportLocalWaypointTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportLocalWaypointTransition()");
            }

            return;
        }

        protected void ReportServicesTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportServicesTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportServicesTransition()");
            }

            return;
        }

        protected void ReportStatusTransition(OCU_OcuFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportStatusTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OCU_OcuFSM_SM.OCU_OcuFSM_SM.Internally_Generated_State_DO_NOT_USE.ReportStatusTransition()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
