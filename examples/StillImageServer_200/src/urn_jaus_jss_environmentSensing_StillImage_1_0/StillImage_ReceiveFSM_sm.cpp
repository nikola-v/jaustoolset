/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StillImage_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_environmentSensing_StillImage_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_environmentSensing_StillImage_1_0/StillImage_ReceiveFSM.h"
#include "include/urn_jaus_jss_environmentSensing_StillImage_1_0/StillImage_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_environmentSensing_StillImage_1_0
{
    // Static class declarations.
    StillImage_ReceiveFSM_SM_Receiving_Ready_NotControlled StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled("StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled", 0);
    StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled("StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled", 1);
    StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void StillImage_ReceiveFSMState::BroadcastGlobalTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::BroadcastLocalTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::CancelEventTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::CreateEventTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::EventErrorTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::EventOccurredTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::InternalStateChange_To_StillImage_ReceiveFSM_ReceivingTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_ReadyTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_ControlledTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_NotControlledTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryAuthorityTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryControlTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryEventsTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QuerySensorGeometricPropertiesTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryStillImageDataTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryStillImageSensorCapabilitiesTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryStillImageSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryTimeoutTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryVisualSensorCapabilitiesTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::QueryVisualSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReceiveTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageData msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReceiveTransition(StillImage_ReceiveFSMContext& context, SetStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::ReleaseControlTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::RequestControlTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::SendTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::SetAuthorityTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::SetStillImageSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::SetVisualSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::TimeoutTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::UpdateEventTransition(StillImage_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void StillImage_ReceiveFSMState::Default(StillImage_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_NotControlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_ControlledTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled);
        }
        catch (...)
        {
            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageData msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTransformSupported( ))
        {
            StillImage_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportStillImageData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTransformSupported( ))
    
    {
            StillImage_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportStillImageData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             StillImage_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        StillImage_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStillImageSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        StillImage_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStillImageSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_ReceivingTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_ReadyTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_NotControlledTransition(StillImage_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_StillImage_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(StillImage_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageData msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTransformSupported( ))
        {
            StillImage_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportStillImageData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTransformSupported( ))
    
    {
            StillImage_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportStillImageData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             StillImage_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        StillImage_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStillImageSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        StillImage_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStillImageSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(StillImage_ReceiveFSMContext& context, SetStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        StillImage_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            StillImage_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmSensorConfiguration", transportData);
                ctxt.updateStillImageSensorConfigurationAction();
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetStillImageSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             StillImage_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStillImageDataTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageDataTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageDataTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorCapabilitiesTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStillImageSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetStillImageSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetStillImageSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetStillImageSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void StillImage_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(StillImage_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : StillImage_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
